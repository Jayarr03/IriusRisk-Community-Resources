<?xml version="1.0" encoding="UTF-8"?>
<template ref="medical_imaging_ref_arch-template" name="medical_imaging_ref_arch template" tags="PACS">
  <desc>&lt;p&gt;&lt;i&gt;A cloud-based medical imaging system, such as a PACS or VNA, on AWS. High availability and low-latency study retrieval for medical imaging solutions.&lt;/i&gt;&lt;/p&gt;</desc>
  <diagram draft="false">
    <schema>PG14R3JhcGhNb2RlbCBkeD0iMTg0MCIgZHk9IjExMDMiIGdyaWQ9IjAiIGdyaWRTaXplPSIxMCIgZ3VpZGVzPSIxIiB0b29sdGlwcz0iMSIgY29ubmVjdD0iMSIgYXJyb3dzPSIxIiBmb2xkPSIxIiBwYWdlPSIwIiBwYWdlU2NhbGU9IjEiIHBhZ2VXaWR0aD0iODUwIiBwYWdlSGVpZ2h0PSIxMTAwIiBtYXRoPSIwIiBzaGFkb3c9IjAiIGlyRHJhd2lvVmVyc2lvbj0ibnVsbCI+CiAgPHJvb3Q+CiAgICA8bXhDZWxsIGlkPSIwIi8+CiAgICA8bXhDZWxsIGlkPSIxIiBwYXJlbnQ9IjAiLz4KICAgIDxteENlbGwgaWQ9IjIiIHZhbHVlPSJQcml2YXRlIFNlY3VyZWQiIHN0eWxlPSJpci5yZWY9MmFiNGVmZmEtNDBiNy00Y2QyLWJhODEtODI0N2QyOWE2ZjJkO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7cmVjdXJzaXZlUmVzaXplPTA7aHRtbD0xO3ZlcnRpY2FsQWxpZ249dG9wO2FsaWduPWxlZnQ7ZGFzaGVkPTE7c3Ryb2tlV2lkdGg9MTthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyO3N0cm9rZUNvbG9yPSM3NTc1RUI7ZmlsbENvbG9yPSNGMEYwRkY7ZmlsbE9wYWNpdHk9MzA7Zm9udENvbG9yPSM1NjUxRTA7Y29ubmVjdGFibGU9MDtjb250YWluZXI9MTtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9VFJVU1RaT05FO3NoYWRvdz0wOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEiPgogICAgICA8bXhHZW9tZXRyeSB4PSItMzkzIiB5PSItNzAiIHdpZHRoPSIzMDIiIGhlaWdodD0iNjQ0IiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMyIgdmFsdWU9IkhlYWx0aGNhcmUgRGVsaXZlcnkgU2l0ZSIgc3R5bGU9InRleHQ7c3Ryb2tlQ29sb3I9bm9uZTthbGlnbj1jZW50ZXI7ZmlsbENvbG9yPW5vbmU7aHRtbD0xO3ZlcnRpY2FsQWxpZ249bWlkZGxlO3doaXRlU3BhY2U9d3JhcDtyb3VuZGVkPTA7Zm9udENvbG9yPSM4QzhDOEM7IiB2ZXJ0ZXg9IjEiIHBhcmVudD0iMiI+CiAgICAgIDxteEdlb21ldHJ5IHg9IjE1IiB5PSIzNiIgd2lkdGg9IjEyNyIgaGVpZ2h0PSIzMCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxvYmplY3QgbGFiZWw9Ik9uLVByZW0gQXBwbGljYXRpb24gVmlld2VyIiBpci5kZXNjcmlwdGlvbj0iT24tUHJlbSBBcHBsaWNhdGlvbiBWaWV3ZXIiIGlkPSI1Ij4KICAgICAgPG14Q2VsbCBzdHlsZT0iaXIucmVmPTcxM2Q5YjhjLTA3ODAtNGMyYy1iNzU3LWM4YTRmZTFiM2JiZjtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj13ZWItY2xpZW50O2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BITjBlV3hsUGlZamVHRTdJQ0FnSUM1cFkyOXVMV1pwYkd3Z2V5WWplR0U3SUNBZ0lDQWdJQ0JtYVd4c09pQWpNVEZCT0VOR095WWplR0U3SUNBZ0lIMG1JM2hoT3p3dmMzUjViR1UrSmlONFlUczhaeUJqYkdsd0xYQmhkR2c5SW5WeWJDZ2pZMnhwY0RBcElqNG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqWTFNRE01T0NBd0xqWTVOREk1TWtNd0xqWTBOamszTmlBd0xqWTVORE01T0NBd0xqWTBNelUwTVNBd0xqWTVORFExTWlBd0xqWTBNREE1TXlBd0xqWTVORFExTWtNd0xqWXpOalkwTmlBd0xqWTVORFExTWlBd0xqWXpNekl4TVNBd0xqWTVORE01T0NBd0xqWXlPVGM0T1NBd0xqWTVOREk1TWtnd0xqSTFOakE1TTBNd0xqSXlNelEyTmlBd0xqWTVOREk1TWlBd0xqRTVOekF4TmlBd0xqWTJOemcxT0NBd0xqRTVOekF4TmlBd0xqWXpOVEkxTVZZd0xqSTRNVEUyTjBNd0xqRTVOekF4TmlBd0xqSTBPRFUySURBdU1qSXpORFkySURBdU1qSXlNVEkzSURBdU1qVTJNRGt6SURBdU1qSXlNVEkzU0RBdU16VXdOVGs1UXpBdU16WXhOREEwSURBdU1qQXhNREF6SURBdU16YzBORFUySURBdU1UZ3hNakU0SURBdU16ZzVORE01SURBdU1UWXpNRGcyU0RBdU1qVTJNRGt6UXpBdU1Ua3dPRE01SURBdU1UWXpNRGcySURBdU1UTTNPVE01SURBdU1qRTFPVFV6SURBdU1UTTNPVE01SURBdU1qZ3hNVFkzVmpBdU5qTTFNalV4UXpBdU1UTTNPVE01SURBdU56QXdORFkySURBdU1Ua3dPRE01SURBdU56VXpNek15SURBdU1qVTJNRGt6SURBdU56VXpNek15U0RBdU16YzBOVFF6VmpBdU9ERXpNREEwVERBdU1qZzFPVGcxSURBdU9ERXpNREExUXpBdU1qWTVOamN4SURBdU9ERXpNREExSURBdU1qVTJORFEzSURBdU9ESTJNakl5SURBdU1qVTJORFEzSURBdU9EUXlOVEkyUXpBdU1qVTJORFEzSURBdU9EVTRPREk1SURBdU1qWTVOamN5SURBdU9EY3lNRFEySURBdU1qZzFPVGcySURBdU9EY3lNRFEyVERBdU5qazVNamsySURBdU9EY3lNRFF6UXpBdU56RTFOakVnTUM0NE56SXdORElnTUM0M01qZzRNelFnTUM0NE5UZzRNallnTUM0M01qZzRNelFnTUM0NE5ESTFNakpETUM0M01qZzRNelFnTUM0NE1qWXlNVGdnTUM0M01UVTJNRGtnTUM0NE1UTXdNRElnTUM0Mk9Ua3lPVFVnTUM0NE1UTXdNREpNTUM0Mk1UQTNNamdnTUM0NE1UTXdNRE5XTUM0M05UTXpNekpJTUM0M01qZzNNRGxETUM0M09UTTVOak1nTUM0M05UTXpNeklnTUM0NE5EWTROaklnTUM0M01EQTBOallnTUM0NE5EWTROaklnTUM0Mk16VXlOVEZXTUM0Mk1qQXlNamhETUM0NE1qWTROVGNnTUM0Mk16WTNNemtnTUM0NE1EUTROREVnTUM0Mk5UQTVNRE1nTUM0M09ERXlNellnTUM0Mk5qSXlPVGhETUM0M056RTBNVGtnTUM0Mk9ERXpJREF1TnpVeE5UZ3lJREF1TmprME1qa3lJREF1TnpJNE56QTVJREF1TmprME1qa3lTREF1TmpVd016azRXazB3TGpVMU1UWTFNU0F3TGpneE16QXdNMHd3TGpRek16WXlJREF1T0RFek1EQTBWakF1TnpVek16TXlTREF1TlRVeE5qVXhWakF1T0RFek1EQXpXaUlnWTJ4aGMzTTlJbWxqYjI0dFptbHNiQ0l2UGlZamVHRTdQSEJoZEdnZ1ptbHNiQzF5ZFd4bFBTSmxkbVZ1YjJSa0lpQmpiR2x3TFhKMWJHVTlJbVYyWlc1dlpHUWlJR1E5SWswd0xqWXlPVEF5TVNBd0xqWTBNekk1TmtNd0xqYzNOVEkwTmlBd0xqWTBNekk1TmlBd0xqZzVNemM0TkNBd0xqVXlORGMxTnlBd0xqZzVNemM0TkNBd0xqTTNPRFV6TWtNd0xqZzVNemM0TkNBd0xqSXpNak13T0NBd0xqYzNOVEkwTmlBd0xqRXhNemMzSURBdU5qSTVNREl4SURBdU1URXpOemRETUM0ME9ESTNPVFlnTUM0eE1UTTNOeUF3TGpNMk5ESTFPQ0F3TGpJek1qTXdPQ0F3TGpNMk5ESTFPQ0F3TGpNM09EVXpNa013TGpNMk5ESTFPQ0F3TGpVeU5EYzFOeUF3TGpRNE1qYzVOaUF3TGpZME16STVOaUF3TGpZeU9UQXlNU0F3TGpZME16STVObHBOTUM0M09EVTBOVFlnTUM0ek56ZzFNVFpETUM0M09EVTBOVFlnTUM0ME5qUTVNakVnTUM0M01UVTBNU0F3TGpVek5EazJOaUF3TGpZeU9UQXdOU0F3TGpVek5EazJOa013TGpVME1qWXdNU0F3TGpVek5EazJOaUF3TGpRM01qVTFOU0F3TGpRMk5Ea3lNU0F3TGpRM01qVTFOU0F3TGpNM09EVXhOa013TGpRM01qVTFOU0F3TGpJNU1qRXhNU0F3TGpVME1qWXdNU0F3TGpJeU1qQTJOaUF3TGpZeU9UQXdOU0F3TGpJeU1qQTJOa013TGpjeE5UUXhJREF1TWpJeU1EWTJJREF1TnpnMU5EVTJJREF1TWpreU1URXhJREF1TnpnMU5EVTJJREF1TXpjNE5URTJXazB3TGpZMk5qSTNNU0F3TGpJNE1EUTNORU13TGpZMU5EVXhPQ0F3TGpJMU5UQXhJREF1TmpRd05UTTFJREF1TWpRME5ERTJJREF1TmpJNU1EQTFJREF1TWpRME5ERTJRekF1TmpFM05EYzJJREF1TWpRME5ERTJJREF1TmpBek5Ea3pJREF1TWpVMU1ERWdNQzQxT1RFM05DQXdMakk0TURRM05FTXdMalU0TnpVMk5DQXdMakk0T1RVeU15QXdMalU0TXprek5TQXdMakk1T1RrMU15QXdMalU0TVRBeE9DQXdMak14TVRRMk5rZ3dMalkzTmprNU1rTXdMalkzTkRBM05pQXdMakk1T1RrMU15QXdMalkzTURRME5pQXdMakk0T1RVeU15QXdMalkyTmpJM01TQXdMakk0TURRM05GcE5NQzQxTlRnd01qa2dNQzR6TVRFME5qWkRNQzQxTmpFME5ETWdNQzR5T1RZMU56UWdNQzQxTmpVNU56a2dNQzR5T0RJNU5UY2dNQzQxTnpFME5EY2dNQzR5TnpFeE1EaERNQzQxTnpRek9ERWdNQzR5TmpRM05UUWdNQzQxTnpjM0lEQXVNalU0TmpnMUlEQXVOVGd4TXprZ01DNHlOVE14TVRaRE1DNDFOVEl6T0RjZ01DNHlOalF4TXpRZ01DNDFNamd4T1RnZ01DNHlPRFE1TWpVZ01DNDFNVEk0TkRZZ01DNHpNVEUwTmpaSU1DNDFOVGd3TWpsYVRUQXVOVFV3TnpneElEQXVNemM0TlRFMlF6QXVOVFV3TnpneElEQXVNell6TURJNUlEQXVOVFV4T0RZeklEQXVNelE0TURFMElEQXVOVFV6T0RrMklEQXVNek16T0RFMlNEQXVOVEF5TlRNMVF6QXVORGszTlRrMUlEQXVNelEzTnprM0lEQXVORGswT1RBMUlEQXVNell5T0RReklEQXVORGswT1RBMUlEQXVNemM0TlRFMlF6QXVORGswT1RBMUlEQXVNemswTVRrZ01DNDBPVGMxT1RVZ01DNDBNRGt5TXpVZ01DNDFNREkxTXpVZ01DNDBNak15TVRaSU1DNDFOVE00T1RaRE1DNDFOVEU0TmpNZ01DNDBNRGt3TVRrZ01DNDFOVEEzT0RFZ01DNHpPVFF3TURRZ01DNDFOVEEzT0RFZ01DNHpOemcxTVRaYVRUQXVOVGN4TkRRM0lEQXVORGcxT1RJMFF6QXVOVFkxT1RjNUlEQXVORGMwTURjMklEQXVOVFl4TkRReklEQXVORFl3TkRVNUlEQXVOVFU0TURJNUlEQXVORFExTlRZM1NEQXVOVEV5T0RRMlF6QXVOVEk0TVRrNElEQXVORGN5TVRBNElEQXVOVFV5TXpnM0lEQXVORGt5T0RrNElEQXVOVGd4TXprZ01DNDFNRE01TVRkRE1DNDFOemMzSURBdU5EazRNelE0SURBdU5UYzBNemd4SURBdU5Ea3lNamM1SURBdU5UY3hORFEzSURBdU5EZzFPVEkwV2swd0xqWTJOakkzTVNBd0xqUTNOalUxT1VNd0xqWTNNRFEwTmlBd0xqUTJOelV4SURBdU5qYzBNRGMySURBdU5EVTNNRGdnTUM0Mk56WTVPVElnTUM0ME5EVTFOamRJTUM0MU9ERXdNVGhETUM0MU9ETTVNelVnTUM0ME5UY3dPQ0F3TGpVNE56VTJOQ0F3TGpRMk56VXhJREF1TlRreE56UWdNQzQwTnpZMU5UbERNQzQyTURNME9UTWdNQzQxTURJd01qSWdNQzQyTVRjME56WWdNQzQxTVRJMk1UY2dNQzQyTWprd01EVWdNQzQxTVRJMk1UZERNQzQyTkRBMU16VWdNQzQxTVRJMk1UY2dNQzQyTlRRMU1UZ2dNQzQxTURJd01qSWdNQzQyTmpZeU56RWdNQzQwTnpZMU5UbGFUVEF1TlRjek1UTWdNQzR6TnpnMU1UWkRNQzQxTnpNeE15QXdMak01TkRJek9DQXdMalUzTkRNeU5DQXdMalF3T1RJMk9DQXdMalUzTmpRNU1pQXdMalF5TXpJeE5rZ3dMalk0TVRVeE9VTXdMalk0TXpZNE55QXdMalF3T1RJMk9DQXdMalk0TkRnNE1TQXdMak01TkRJek9DQXdMalk0TkRnNE1TQXdMak0zT0RVeE5rTXdMalk0TkRnNE1TQXdMak0yTWpjNU5TQXdMalk0TXpZNE55QXdMak0wTnpjMk5TQXdMalk0TVRVeE9TQXdMak16TXpneE5rZ3dMalUzTmpRNU1rTXdMalUzTkRNeU5DQXdMak0wTnpjMk5TQXdMalUzTXpFeklEQXVNell5TnprMUlEQXVOVGN6TVRNZ01DNHpOemcxTVRaYVRUQXVOelExTVRZMUlEQXVORFExTlRZM1NEQXVOams1T1RneVF6QXVOamsyTlRZNElEQXVORFl3TkRVNUlEQXVOamt5TURNeUlEQXVORGMwTURjMklEQXVOamcyTlRZeklEQXVORGcxT1RJMFF6QXVOamd6TmpNZ01DNDBPVEl5TnprZ01DNDJPREF6TVRNZ01DNDBPVGd6TkRnZ01DNDJOelkyTWpJZ01DNDFNRE01TVRkRE1DNDNNRFUyTWpRZ01DNDBPVEk0T1RnZ01DNDNNams0TVRNZ01DNDBOekl4TURnZ01DNDNORFV4TmpVZ01DNDBORFUxTmpkYVRUQXVOekEwTVRFMUlEQXVOREl6TWpFMlNEQXVOelUxTkRjMlF6QXVOell3TkRFMklEQXVOREE1TWpNMUlEQXVOell6TVRBMUlEQXVNemswTVRrZ01DNDNOak14TURVZ01DNHpOemcxTVRaRE1DNDNOak14TURVZ01DNHpOakk0TkRNZ01DNDNOakEwTVRZZ01DNHpORGMzT1RjZ01DNDNOVFUwTnpZZ01DNHpNek00TVRaSU1DNDNNRFF4TVRWRE1DNDNNRFl4TkRnZ01DNHpORGd3TVRRZ01DNDNNRGN5TXpJZ01DNHpOak13TWprZ01DNDNNRGN5TXpJZ01DNHpOemcxTVRaRE1DNDNNRGN5TXpJZ01DNHpPVFF3TURRZ01DNDNNRFl4TkRnZ01DNDBNRGt3TVRrZ01DNDNNRFF4TVRVZ01DNDBNak15TVRaYVRUQXVOelExTVRZMUlEQXVNekV4TkRZMlF6QXVOekk1T0RFeklEQXVNamcwT1RJMUlEQXVOekExTmpJMElEQXVNalkwTVRNMElEQXVOamMyTmpJeUlEQXVNalV6TVRFMlF6QXVOamd3TXpFeklEQXVNalU0TmpnMUlEQXVOamd6TmpNZ01DNHlOalEzTlRRZ01DNDJPRFkxTmpNZ01DNHlOekV4TURoRE1DNDJPVEl3TXpJZ01DNHlPREk1TlRjZ01DNDJPVFkxTmpnZ01DNHlPVFkxTnpRZ01DNDJPVGs1T0RJZ01DNHpNVEUwTmpaSU1DNDNORFV4TmpWYUlpQmpiR0Z6Y3owaWFXTnZiaTFtYVd4c0lpOCtKaU40WVRzOEwyYytKaU40WVRzOFpHVm1jejRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakF1T1RnME5qRTFJaUJvWldsbmFIUTlJakF1T1RnME5qRTFJaUJtYVd4c1BTSjNhR2wwWlNJZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9NQ0F3TGpBeE5UTTRNRGtwSWk4K0ppTjRZVHM4TDJOc2FYQlFZWFJvUGlZamVHRTdQQzlrWldaelBpWWplR0U3UEM5emRtYys7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xO2lyLmRlc2NyaXB0aW9uPU9uLVByZW0gQXBwbGljYXRpb24gVmlld2VyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjIiPgogICAgICAgIDxteEdlb21ldHJ5IHg9IjYzIiB5PSI0NzEiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICAgIDwvbXhDZWxsPgogICAgPC9vYmplY3Q+CiAgICA8bXhDZWxsIGlkPSIzMSIgc3R5bGU9ImVkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0xO2V4aXRZPTAuNTtleGl0RHg9MDtleGl0RHk9MDtlbnRyeVg9MDtlbnRyeVk9MC41O2VudHJ5RHg9MDtlbnRyeUR5PTA7ZW50cnlQZXJpbWV0ZXI9MDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTsiIGVkZ2U9IjEiIHBhcmVudD0iMiIgc291cmNlPSI4IiB0YXJnZXQ9IjEwIj4KICAgICAgPG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSI+CiAgICAgICAgPEFycmF5IGFzPSJwb2ludHMiPgogICAgICAgICAgPG14UG9pbnQgeD0iMjQzIiB5PSI5NCIvPgogICAgICAgIDwvQXJyYXk+CiAgICAgIDwvbXhHZW9tZXRyeT4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iOCIgdmFsdWU9IkRJQ09NIC8gRElNU0UgJmx0O2JyJmd0O1NvdXJjZSIgc3R5bGU9IndoaXRlU3BhY2U9d3JhcDtodG1sPTE7c2hhZG93PTA7c3Ryb2tlQ29sb3I9IzhDOEM4QztzdHJva2VXaWR0aD0xO2ZvbnRDb2xvcj0jOEM4QzhDO2ZpbGxDb2xvcj0jRjVGNUY1OyIgdmVydGV4PSIxIiBwYXJlbnQ9IjIiPgogICAgICA8bXhHZW9tZXRyeSB4PSIyOSIgeT0iODkiIHdpZHRoPSIxMTgiIGhlaWdodD0iNTkiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIzMiIgc3R5bGU9ImVkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0xO2V4aXRZPTAuNzU7ZXhpdER4PTA7ZXhpdER5PTA7ZW50cnlYPTA7ZW50cnlZPTAuNTtlbnRyeUR4PTA7ZW50cnlEeT0wO2VudHJ5UGVyaW1ldGVyPTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7IiBlZGdlPSIxIiBwYXJlbnQ9IjIiIHNvdXJjZT0iOSIgdGFyZ2V0PSIxMCI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiPgogICAgICAgIDxBcnJheSBhcz0icG9pbnRzIj4KICAgICAgICAgIDxteFBvaW50IHg9IjIwNCIgeT0iMjExIi8+CiAgICAgICAgICA8bXhQb2ludCB4PSIxOTUiIHk9IjMxMSIvPgogICAgICAgIDwvQXJyYXk+CiAgICAgIDwvbXhHZW9tZXRyeT4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iOSIgdmFsdWU9IkRJQ09NIFdlYiAmbHQ7YnImZ3Q7U291cmNlIiBzdHlsZT0id2hpdGVTcGFjZT13cmFwO2h0bWw9MTtzaGFkb3c9MDtzdHJva2VDb2xvcj0jOEM4QzhDO3N0cm9rZVdpZHRoPTE7Zm9udENvbG9yPSM4QzhDOEM7ZmlsbENvbG9yPSNGNUY1RjU7IiB2ZXJ0ZXg9IjEiIHBhcmVudD0iMiI+CiAgICAgIDxteEdlb21ldHJ5IHg9IjU1IiB5PSIxNzAiIHdpZHRoPSIxMjAiIGhlaWdodD0iNTkiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIzMyIgc3R5bGU9ImVkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0wLjE0NTtleGl0WT0wLjg1NTtleGl0RHg9MDtleGl0RHk9MDtleGl0UGVyaW1ldGVyPTA7ZW50cnlYPTAuNjtlbnRyeVk9MC4wMTE7ZW50cnlEeD0wO2VudHJ5RHk9MDtlbnRyeVBlcmltZXRlcj0wO3N0cm9rZUNvbG9yPSNCRkJGQkY7c3Ryb2tlV2lkdGg9MjtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c291cmNlUGVyaW1ldGVyU3BhY2luZz05OyIgZWRnZT0iMSIgcGFyZW50PSIyIiBzb3VyY2U9IjEwIiB0YXJnZXQ9IjUiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ij4KICAgICAgICA8QXJyYXkgYXM9InBvaW50cyI+CiAgICAgICAgICA8bXhQb2ludCB4PSI4OCIgeT0iMjk5Ii8+CiAgICAgICAgPC9BcnJheT4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIxMCIgdmFsdWU9IkdhdGV3YXkiIHN0eWxlPSJvdXRsaW5lQ29ubmVjdD0wO2Rhc2hlZD0wO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7YWxpZ249Y2VudGVyO2h0bWw9MTtzaGFwZT1teGdyYXBoLmF3czMuY3VzdG9tZXJfZ2F0ZXdheTtmaWxsQ29sb3I9I0Y1ODUzNjtncmFkaWVudENvbG9yPW5vbmU7c2hhZG93PTA7c3Ryb2tlQ29sb3I9IzhDOEM4QztzdHJva2VXaWR0aD0xO2ZvbnRDb2xvcj0jOEM4QzhDOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjIiPgogICAgICA8bXhHZW9tZXRyeSB4PSIyMjYiIHk9IjI2MyIgd2lkdGg9Ijc1IiBoZWlnaHQ9Ijc2IiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMTIiIHZhbHVlPSJQdWJsaWMgQ2xvdWQiIHN0eWxlPSJpci5yZWY9YjYxZDY5MTEtMzM4ZC00NmE4LTlmMzktOGRjZDI0YWJmZTkxO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7cmVjdXJzaXZlUmVzaXplPTA7aHRtbD0xO3ZlcnRpY2FsQWxpZ249dG9wO2FsaWduPWxlZnQ7ZGFzaGVkPTE7c3Ryb2tlV2lkdGg9MTthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyO3N0cm9rZUNvbG9yPSM3NTc1RUI7ZmlsbENvbG9yPSNGMEYwRkY7ZmlsbE9wYWNpdHk9MzA7Zm9udENvbG9yPSM1NjUxRTA7Y29ubmVjdGFibGU9MDtjb250YWluZXI9MTtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9VFJVU1RaT05FO3NoYWRvdz0wOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEiPgogICAgICA8bXhHZW9tZXRyeSB4PSIzOSIgeT0iLTY4IiB3aWR0aD0iMTMxMCIgaGVpZ2h0PSI2NTgiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIxMSIgdmFsdWU9IkFXUyBEaXJlY3QgQ29ubmVjdCIgc3R5bGU9InJvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPWRpcmVjdC1jb25uZWN0O2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyT1RrNU1USWdNQzQxT1RNeVNEQXVOakEyTlRjNFZqQXVOVFkyTlRNelNEQXVOams1T1RFeVF6QXVOek15TURRMUlEQXVOVFkyTlRNeklEQXVPREEyTlRjNElEQXVOVFUyT1RNeklEQXVPREEyTlRjNElEQXVORFkzT0RZMlF6QXVPREEyTlRjNElEQXVOREUwTlRNeklEQXVOemMxTWpRMUlEQXVNemd4TURZMklEQXVOekV6TWpRMUlEQXVNelk0TlRNelF6QXVOekV3TXpZeklEQXVNelkzT1RVZ01DNDNNRGMzTlRVZ01DNHpOalkwTXpFZ01DNDNNRFU0TWpZZ01DNHpOalF5TVRORE1DNDNNRE00T1RjZ01DNHpOakU1T1RVZ01DNDNNREkzTlRVZ01DNHpOVGt5TURFZ01DNDNNREkxTnpnZ01DNHpOVFl5TmpaRE1DNDJPVGsxTVRJZ01DNHpNRFF5TmpZZ01DNDJOamt5TkRVZ01DNHlPRFUzTXpNZ01DNDJORFF6TVRJZ01DNHlPRFUzTXpORE1DNDJNelU0TkRrZ01DNHlPRFU0TVRVZ01DNDJNamMxTWpFZ01DNHlPRGM0TlRZZ01DNDJNVGs1T0NBd0xqSTVNVFk1TmtNd0xqWXhNalF6T1NBd0xqSTVOVFV6TnlBd0xqWXdOVGc0T1NBd0xqTXdNVEEzTVNBd0xqWXdNRGcwTlNBd0xqTXdOemcyTmtNd0xqVTVPVE01TlNBd0xqTXdPVGMxTkNBd0xqVTVOelEyTmlBd0xqTXhNVEl4T1NBd0xqVTVOVEkxT0NBd0xqTXhNakV3T1VNd0xqVTVNekExSURBdU16RXlPVGs1SURBdU5Ua3dOalEwSURBdU16RXpNamd5SURBdU5UZzRNamt4SURBdU16RXlPVEk0UXpBdU5UZzFPVE0zSURBdU16RXlOVGMwSURBdU5UZ3pOeklnTUM0ek1URTFPVGNnTUM0MU9ERTROeklnTUM0ek1UQXdPVGRETUM0MU9EQXdNak1nTUM0ek1EZzFPVGNnTUM0MU56ZzJNU0F3TGpNd05qWXpJREF1TlRjM056YzRJREF1TXpBME16azVRekF1TlRZNU1UWWdNQzR5TnpreU56TWdNQzQxTlRRNE9ERWdNQzR5TlRZME5qTWdNQzQxTXpZd05EVWdNQzR5TXpjM016SkRNQzQxTVRVMk16SWdNQzR5TVRZMU5UTWdNQzQwT0RrME1EUWdNQzR5TURFNE9USWdNQzQwTmpBMk5qa2dNQzR4T1RVMU9UbERNQzQwTXpFNU16UWdNQzR4T0Rrek1EY2dNQzQwTURFNU9DQXdMakU1TVRZMk5TQXdMak0zTkRVNE15QXdMakl3TWpNM05VTXdMak0wTnpFNE5pQXdMakl4TXpBNE5pQXdMak15TXpVM05TQXdMakl6TVRZMk9TQXdMak13TmpjeU55QXdMakkxTlRjNE1rTXdMakk0T1RnM09TQXdMakkzT1RnNU5TQXdMakk0TURVME9DQXdMak13T0RRMU55QXdMakkzT1RreE1pQXdMak16TnpnMk5rTXdMakkzT1RreU55QXdMak0wTXpnNE1TQXdMakk0TURJNE5DQXdMak0wT1RnNU1TQXdMakk0TURrM09TQXdMak0xTlRnMk5rTXdMakk0TVRRd015QXdMak0xT1RFeE1pQXdMakk0TURZeE9TQXdMak0yTWpRd01TQXdMakkzT0RjM05DQXdMak0yTlRFd05VTXdMakkzTmpreklEQXVNelkzT0RFZ01DNHlOelF4TlRZZ01DNHpOamszTkRJZ01DNHlOekE1TnprZ01DNHpOekExTXpORE1DNHlOREl3TkRZZ01DNHpOemMySURBdU1Ua3pNalEySURBdU5DQXdMakU1TXpJME5pQXdMalEyTmpZMk5rTXdMakU1TXpJME5pQXdMalEyT1RJZ01DNHhPVE15TkRZZ01DNDBOekUySURBdU1Ua3pNalEySURBdU5EYzBRekF1TVRrMU5qRXlJREF1TkRrNU56ZzNJREF1TWpBM056TTFJREF1TlRJek5qazRJREF1TWpJM01UTTVJREF1TlRRd09EUTNRekF1TWpRMk5UUXpJREF1TlRVM09UazJJREF1TWpjeE56WXpJREF1TlRZM01EZzVJREF1TWprM05qUTJJREF1TlRZMk1qWTNTREF1TXpZMk5UYzVWakF1TlRreU9UTXpTREF1TWprM09URXlRekF1TWpZMU1qQTFJREF1TlRrek56WXpJREF1TWpNek5ERTRJREF1TlRneU1EWXpJREF1TWpBNU1EVXpJREF1TlRZd01qSTJRekF1TVRnME5qZzVJREF1TlRNNE16a2dNQzR4TmprMU9TQXdMalV3T0RBMk9TQXdMakUyTmpnME5pQXdMalEzTlRRMk5rTXdMakUyTmpnME5pQXdMalEzTWpVek15QXdMakUyTmpnME5pQXdMalEyT1RZZ01DNHhOalk0TkRZZ01DNDBOalkyTmpaRE1DNHhOalUzTmpNZ01DNDBOREF3TVRJZ01DNHhOek0zTURNZ01DNDBNVE0zTnpFZ01DNHhPRGt6T0RJZ01DNHpPVEl4T0RoRE1DNHlNRFV3TmpFZ01DNHpOekEyTURVZ01DNHlNamMxTmpJZ01DNHpOVFE1TkRNZ01DNHlOVE15TkRZZ01DNHpORGMzTXpORE1DNHlOVE15TkRZZ01DNHpORFExTXpNZ01DNHlOVE15TkRZZ01DNHpOREV4T1RrZ01DNHlOVE15TkRZZ01DNHpNemM0TmpaRE1DNHlOVFF3TURnZ01DNHpNRE15TnprZ01DNHlOalE1TnpFZ01DNHlOamsyT0RnZ01DNHlPRFEzTlRjZ01DNHlOREV6TURoRE1DNHpNRFExTkRNZ01DNHlNVEk1TWprZ01DNHpNekl5TnpFZ01DNHhPVEV3TWpjZ01DNHpOalEwTmlBd0xqRTNPRE0xTVVNd0xqTTVOalkwT1NBd0xqRTJOVFkzTkNBd0xqUXpNVGcyTmlBd0xqRTJNamM0T1NBd0xqUTJOVFk1SURBdU1UY3dNRFUyUXpBdU5EazVOVEV6SURBdU1UYzNNekl6SURBdU5UTXdORE0zSURBdU1UazBOREU1SURBdU5UVTBOVGM0SURBdU1qRTVNVGs1UXpBdU5UY3hNalk0SURBdU1qTTFOak0wSURBdU5UZzBPREl5SURBdU1qVTBPVGN5SURBdU5UazBOVGM0SURBdU1qYzJNalkyUXpBdU5qQTROamNnTUM0eU5qVXhORFVnTUM0Mk1qWXdPVE1nTUM0eU5Ua3dPRGNnTUM0Mk5EUXdORFVnTUM0eU5Ua3dOalpETUM0Mk9ERXpOemdnTUM0eU5Ua3dOallnTUM0M01qQTNNVElnTUM0eU9EVTNNek1nTUM0M01qZ3dORFVnTUM0ek5EUTJOalpETUM0M09UVTNOemdnTUM0ek5qRXpNek1nTUM0NE16STVOemdnTUM0ME1EUTRJREF1T0RNeU9UYzRJREF1TkRZM09EWTJRekF1T0RNek1qUTFJREF1TlRZZ01DNDNOalF6TVRFZ01DNDFPVE15SURBdU5qazVPVEV5SURBdU5Ua3pNbG9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJNalF5TVRFZ01DNDNOVE14TnpGSU1DNDJNakF3TnpoV01DNDJPRE0wTXpoRE1DNDJNVGsxT1RNZ01DNDJOek15TmpNZ01DNDJNVFV4TWpjZ01DNDJOak0yT0RnZ01DNDJNRGMyTkRNZ01DNDJOVFkzTnpoRE1DNDJNREF4TlRrZ01DNDJORGs0TmpnZ01DNDFPVEF5TlRrZ01DNDJORFl4TnpnZ01DNDFPREF3TnpnZ01DNDJORFkxTURSSU1DNHpPVE00TVRGRE1DNHpPRE0yTXpFZ01DNDJORFl4TnpnZ01DNHpOek0zTXlBd0xqWTBPVGcyT0NBd0xqTTJOakkwTmlBd0xqWTFOamMzT0VNd0xqTTFPRGMyTWlBd0xqWTJNelk0T0NBd0xqTTFOREk1TmlBd0xqWTNNekkyTXlBd0xqTTFNemd4TVNBd0xqWTRNelF6T0ZZd0xqYzFNekUzTVVnd0xqTTBPVFkzT0VNd0xqTXpPVFF5T0NBd0xqYzFNems0T1NBd0xqTXlPVGt4TkNBd0xqYzFPRGd4TmlBd0xqTXlNeklnTUM0M05qWTJNRFJETUM0ek1UWTBPRFVnTUM0M056UXpPVEVnTUM0ek1UTXhNVElnTUM0M09EUTFNVElnTUM0ek1UTTRNVEVnTUM0M09UUTNOekZXTUM0NE16TXhOekZJTUM0ek5EQTBOemhXTUM0M09UUTNOekZETUM0ek5EQTBOemdnTUM0M09EWXlNemdnTUM0ek5EVTBNVEVnTUM0M056azRNemdnTUM0ek5EazJOemdnTUM0M056azRNemhJTUM0Mk1qUXlNVEZETUM0Mk1qZzBOemdnTUM0M056azRNemdnTUM0Mk16TTBNVEVnTUM0M09EWXlNemdnTUM0Mk16TTBNVEVnTUM0M09UUTNOekZXTUM0NE16TXhOekZJTUM0Mk5qQXdOemhXTUM0M09UUTNOekZETUM0Mk5qQTNOemNnTUM0M09EUTFNVElnTUM0Mk5UYzBNRFFnTUM0M056UXpPVEVnTUM0Mk5UQTJPU0F3TGpjMk5qWXdORU13TGpZME16azNOU0F3TGpjMU9EZ3hOaUF3TGpZek5EUTJNU0F3TGpjMU16azRPU0F3TGpZeU5ESXhNU0F3TGpjMU16RTNNVll3TGpjMU16RTNNVnBOTUM0ek9EQXdOemdnTUM0Mk9ETTBNemhETUM0ek9EQXdOemdnTUM0Mk56YzRNemdnTUM0ek9EWXpORFVnTUM0Mk56TXhOekVnTUM0ek9UTTBNVEVnTUM0Mk56TXhOekZJTUM0MU56azJOemhETUM0MU9EY3hORFVnTUM0Mk56TXhOekVnTUM0MU9UTXdNVEVnTUM0Mk56YzRNemdnTUM0MU9UTXdNVEVnTUM0Mk9ETTBNemhXTUM0M05UTXhOekZJTUM0ek56azJOemhNTUM0ek9EQXdOemdnTUM0Mk9ETTBNemhhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVOREEyTmprM0lEQXVOREEyTkRrMFF6QXVNemt6TnpReklEQXVOREEyTlRNeElEQXVNemd4TWpRMUlEQXVOREV4TWpneUlEQXVNemN4TlRNMklEQXVOREU1T0RVNVF6QXVNell4T0RJNElEQXVOREk0TkRNMklEQXVNelUxTlRjMElEQXVORFF3TWpVMElEQXVNelV6T1RReElEQXVORFV6TVRBMVF6QXVNelV5TXpBNElEQXVORFkxT1RVMklEQXVNelUxTkRBNElEQXVORGM0T1RZeUlEQXVNell5TmpZeklEQXVORGc1TmprMFF6QXVNelk1T1RFM0lEQXVOVEF3TkRJM0lEQXVNemd3T0RNZ01DNDFNRGd4TlRJZ01DNHpPVE16TmpNZ01DNDFNVEUwTWpoV01DNDJNek14TmpGSU1DNDBNakF3TTFZd0xqVXhNVFF5T0VNd0xqUXpNalUyTXlBd0xqVXdPREUxTWlBd0xqUTBNelEzTmlBd0xqVXdNRFF5TnlBd0xqUTFNRGN6TVNBd0xqUTRPVFk1TkVNd0xqUTFOems0TlNBd0xqUTNPRGsyTWlBd0xqUTJNVEE0TlNBd0xqUTJOVGsxTmlBd0xqUTFPVFExTWlBd0xqUTFNekV3TlVNd0xqUTFOemd5SURBdU5EUXdNalUwSURBdU5EVXhOVFkxSURBdU5ESTRORE0ySURBdU5EUXhPRFUzSURBdU5ERTVPRFU1UXpBdU5ETXlNVFE1SURBdU5ERXhNamd5SURBdU5ERTVOalV4SURBdU5EQTJOVE14SURBdU5EQTJOamszSURBdU5EQTJORGswV2swd0xqUXdOalk1TnlBd0xqUTROalE1TkVNd0xqUXdNVFF5TXlBd0xqUTROalE1TkNBd0xqTTVOakkyTnlBd0xqUTRORGt6SURBdU16a3hPRGd5SURBdU5EZ3lRekF1TXpnM05EazJJREF1TkRjNU1EY2dNQzR6T0RRd056Z2dNQzQwTnpRNU1EVWdNQzR6T0RJd05pQXdMalEzTURBek1rTXdMak00TURBME1pQXdMalEyTlRFMklEQXVNemM1TlRFMElEQXVORFU1TnprNElEQXVNemd3TlRReklEQXVORFUwTmpJMVF6QXVNemd4TlRjeElEQXVORFE1TkRVeUlEQXVNemcwTVRFeElEQXVORFEwTnpBeElEQXVNemczT0RReElEQXVORFF3T1RjeFF6QXVNemt4TlRjZ01DNDBNemN5TkRJZ01DNHpPVFl6TWpJZ01DNDBNelEzTURJZ01DNDBNREUwT1RRZ01DNDBNek0yTnpORE1DNDBNRFkyTmpjZ01DNDBNekkyTkRRZ01DNDBNVEl3TWprZ01DNDBNek14TnpJZ01DNDBNVFk1TURJZ01DNDBNelV4T1RGRE1DNDBNakUzTnpRZ01DNDBNemN5TURrZ01DNDBNalU1TXprZ01DNDBOREEyTWpjZ01DNDBNamc0TmprZ01DNDBORFV3TVRKRE1DNDBNekUzT1RrZ01DNDBORGt6T1RnZ01DNDBNek16TmpNZ01DNDBOVFExTlRNZ01DNDBNek16TmpNZ01DNDBOVGs0TWpoRE1DNDBNek16TmpNZ01DNDBOalk1SURBdU5ETXdOVFUwSURBdU5EY3pOamd6SURBdU5ESTFOVFV6SURBdU5EYzROamcwUXpBdU5ESXdOVFV5SURBdU5EZ3pOamcxSURBdU5ERXpOelk1SURBdU5EZzJORGswSURBdU5EQTJOamszSURBdU5EZzJORGswV2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMalE0TlRjMk9TQXdMak14TXpJek1rTXdMalEzTWpjNU1pQXdMak14TXpNek5pQXdMalEyTURJNU9DQXdMak14T0RFMk9DQXdMalExTURZeU55QXdMak15TmpneU1rTXdMalEwTURrMU55QXdMak16TlRRM055QXdMalF6TkRjM05DQXdMak0wTnpNMklEQXVORE16TWpNM0lEQXVNell3TWpRMlF6QXVORE14TnlBd0xqTTNNekV6TXlBd0xqUXpORGt4TkNBd0xqTTROakV6TnlBd0xqUTBNakkzTnlBd0xqTTVOamd5TkVNd0xqUTBPVFkwSURBdU5EQTNOVEVnTUM0ME5qQTJORGNnTUM0ME1UVXhORFVnTUM0ME56TXlNellnTUM0ME1UZ3lPVGhXTUM0Mk16TXlNMGd3TGpRNU9Ua3dNMVl3TGpReE56ZzVPRU13TGpVeE1qSTNNeUF3TGpReE5EUXhNeUF3TGpVeU1qazJPQ0F3TGpRd05qVTNPQ0F3TGpVek1EQXlNU0F3TGpNNU5UZ3pOVU13TGpVek56QTNOQ0F3TGpNNE5UQTVNaUF3TGpVME1EQXhNU0F3TGpNM01qRTJNeUF3TGpVek9ESTVNaUF3TGpNMU9UUXlOME13TGpVek5qVTNNaUF3TGpNME5qWTVNaUF3TGpVek1ETXhNU0F3TGpNek5UQXdOU0F3TGpVeU1EWTJNU0F3TGpNeU5qVXhOME13TGpVeE1UQXhNU0F3TGpNeE9EQXpJREF1TkRrNE5qSXhJREF1TXpFek16RXlJREF1TkRnMU56WTVJREF1TXpFek1qTXlXazB3TGpRNE5UYzJPU0F3TGpNNU16SXpNa013TGpRNE1EUTVOU0F3TGpNNU16SXpNaUF3TGpRM05UTXpPU0F3TGpNNU1UWTJPQ0F3TGpRM01EazFOQ0F3TGpNNE9EY3pPRU13TGpRMk5qVTJPU0F3TGpNNE5UZ3dPQ0F3TGpRMk16RTFNU0F3TGpNNE1UWTBNeUF3TGpRMk1URXpNaUF3TGpNM05qYzNRekF1TkRVNU1URTBJREF1TXpjeE9EazRJREF1TkRVNE5UZzJJREF1TXpZMk5UTTJJREF1TkRVNU5qRTFJREF1TXpZeE16WXpRekF1TkRZd05qUTBJREF1TXpVMk1Ua2dNQzQwTmpNeE9EUWdNQzR6TlRFME16a2dNQzQwTmpZNU1UTWdNQzR6TkRjM01EbERNQzQwTnpBMk5ETWdNQzR6TkRNNU9DQXdMalEzTlRNNU5DQXdMak0wTVRRMElEQXVORGd3TlRZM0lEQXVNelF3TkRFeFF6QXVORGcxTnpRZ01DNHpNemt6T0RJZ01DNDBPVEV4TURJZ01DNHpNems1TVNBd0xqUTVOVGszTkNBd0xqTTBNVGt5T1VNd0xqVXdNRGcwTnlBd0xqTTBNemswTnlBd0xqVXdOVEF4TWlBd0xqTTBOek0yTlNBd0xqVXdOemswTWlBd0xqTTFNVGMxUXpBdU5URXdPRGN5SURBdU16VTJNVE0ySURBdU5URXlORE0ySURBdU16WXhNamt4SURBdU5URXlORE0ySURBdU16WTJOVFkxUXpBdU5URXlORE0ySURBdU16Y3pOak00SURBdU5UQTVOakkySURBdU16Z3dOREl4SURBdU5UQTBOakkySURBdU16ZzFOREl4UXpBdU5EazVOakkxSURBdU16a3dOREl5SURBdU5Ea3lPRFF5SURBdU16a3pNak15SURBdU5EZzFOelk1SURBdU16a3pNak15V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMalUyTmpZd09TQXdMalF3TmpRNU5FTXdMalUxTXpZMU5TQXdMalF3TmpVek1TQXdMalUwTVRFMU55QXdMalF4TVRJNE1pQXdMalV6TVRRME9TQXdMalF4T1RnMU9VTXdMalV5TVRjME1TQXdMalF5T0RRek5pQXdMalV4TlRRNE5pQXdMalEwTURJMU5DQXdMalV4TXpnMU15QXdMalExTXpFd05VTXdMalV4TWpJeUlEQXVORFkxT1RVMklEQXVOVEUxTXpJeElEQXVORGM0T1RZeUlEQXVOVEl5TlRjMUlEQXVORGc1TmprMFF6QXVOVEk1T0RJNUlEQXVOVEF3TkRJM0lEQXVOVFF3TnpReUlEQXVOVEE0TVRVeUlEQXVOVFV6TWpjMklEQXVOVEV4TkRJNFZqQXVOak16TVRZeFNEQXVOVGM1T1RReVZqQXVOVEV4TkRJNFF6QXVOVGt5TkRjMklEQXVOVEE0TVRVeUlEQXVOakF6TXpnNElEQXVOVEF3TkRJM0lEQXVOakV3TmpReklEQXVORGc1TmprMFF6QXVOakUzT0RrM0lEQXVORGM0T1RZeUlEQXVOakl3T1RrM0lEQXVORFkxT1RVMklEQXVOakU1TXpZMElEQXVORFV6TVRBMVF6QXVOakUzTnpNeUlEQXVORFF3TWpVMElEQXVOakV4TkRjM0lEQXVOREk0TkRNMklEQXVOakF4TnpZNUlEQXVOREU1T0RVNVF6QXVOVGt5TURZeElEQXVOREV4TWpneUlEQXVOVGM1TlRZeklEQXVOREEyTlRNeElEQXVOVFkyTmpBNUlEQXVOREEyTkRrMFZqQXVOREEyTkRrMFdrMHdMalUyTmpZd09TQXdMalE0TmpRNU5FTXdMalUyTVRNek5TQXdMalE0TmpRNU5DQXdMalUxTmpFM09TQXdMalE0TkRreklEQXVOVFV4TnprMElEQXVORGd5UXpBdU5UUTNOREE0SURBdU5EYzVNRGNnTUM0MU5ETTVPU0F3TGpRM05Ea3dOU0F3TGpVME1UazNNaUF3TGpRM01EQXpNa013TGpVek9UazFOQ0F3TGpRMk5URTJJREF1TlRNNU5ESTJJREF1TkRVNU56azRJREF1TlRRd05EVTFJREF1TkRVME5qSTFRekF1TlRReE5EZzBJREF1TkRRNU5EVXlJREF1TlRRME1ESXpJREF1TkRRME56QXhJREF1TlRRM056VXpJREF1TkRRd09UY3hRekF1TlRVeE5EZ3lJREF1TkRNM01qUXlJREF1TlRVMk1qTTBJREF1TkRNME56QXlJREF1TlRZeE5EQTJJREF1TkRNek5qY3pRekF1TlRZMk5UYzVJREF1TkRNeU5qUTBJREF1TlRjeE9UUXhJREF1TkRNek1UY3lJREF1TlRjMk9ERTBJREF1TkRNMU1Ua3hRekF1TlRneE5qZzJJREF1TkRNM01qQTVJREF1TlRnMU9EVXhJREF1TkRRd05qSTNJREF1TlRnNE56Z3hJREF1TkRRMU1ERXlRekF1TlRreE56RXlJREF1TkRRNU16azRJREF1TlRrek1qYzJJREF1TkRVME5UVXpJREF1TlRrek1qYzJJREF1TkRVNU9ESTRRekF1TlRrek1qYzJJREF1TkRZMk9TQXdMalU1TURRMk5pQXdMalEzTXpZNE15QXdMalU0TlRRMk5TQXdMalEzT0RZNE5FTXdMalU0TURRMk5DQXdMalE0TXpZNE5TQXdMalUzTXpZNE1TQXdMalE0TmpRNU5DQXdMalUyTmpZd09TQXdMalE0TmpRNU5Gb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4TDJjK0ppTjRZVHM4TDJjK0ppTjRZVHM4WkdWbWN6NG1JM2hoT3p4c2FXNWxZWEpIY21Ga2FXVnVkQ0JwWkQwaWNHRnBiblF3WDJ4cGJtVmhjaUlnZURFOUlpMHdMakl3TnpBMk55SWdlVEU5SWpFdU1qQTNNRGNpSUhneVBTSXhMakl3TnpBM0lpQjVNajBpTFRBdU1qQTNNRFkzSWlCbmNtRmthV1Z1ZEZWdWFYUnpQU0oxYzJWeVUzQmhZMlZQYmxWelpTSStKaU40WVRzOGMzUnZjQ0J6ZEc5d0xXTnZiRzl5UFNJak5FUXlOMEU0SWk4K0ppTjRZVHM4YzNSdmNDQnZabVp6WlhROUlqRWlJSE4wYjNBdFkyOXNiM0k5SWlOQk1UWTJSa1lpTHo0bUkzaGhPend2YkdsdVpXRnlSM0poWkdsbGJuUStKaU40WVRzOFkyeHBjRkJoZEdnZ2FXUTlJbU5zYVhBd0lqNG1JM2hoT3p4eVpXTjBJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOEwyTnNhWEJRWVhSb1BpWWplR0U3UEM5a1pXWnpQaVlqZUdFN1BDOXpkbWMrO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7c2hhZG93PTA7c3Ryb2tlV2lkdGg9MTtpci5yZWY9YzU1YjZhYjMtMDcyZC00OWMxLWEyZWQtNDRlM2VjMzNhMDI5OyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEyIj4KICAgICAgPG14R2VvbWV0cnkgeD0iOCIgeT0iMjU5IiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8b2JqZWN0IGxhYmVsPSJBV1MgQWNjb3VudCBFbnZpcm9ubWVudCIgaXIuc291cmNlU3R5bGU9InJvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPWFtYXpvbi13ZWItc2VydmljZXMtZW52aXJvbm1lbnQ7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BIQmhkR2dnWkQwaVRURWdNRWd3VmpGSU1WWXdXaUlnWm1sc2JEMGlkWEpzS0NOd1lXbHVkREJmYkdsdVpXRnlLU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TkRjMk56STBJREF1Tmpnd016QXpTREF1TVRVNU9URXlWakF1TmpNd09EYzRRekF1TVRVNU9ETXpJREF1TlRjeU5qQTFJREF1TVRjNU16SXlJREF1TlRFMU9Ua3pJREF1TWpFMU1qVTJJREF1TkRjd01URTVRekF1TWpVeE1UZzVJREF1TkRJME1qUTFJREF1TXpBeE5EZzBJREF1TXpreE56WTNJREF1TXpVNE1EYzRJREF1TXpjM09Ea3hUREF1TXpZek9UTTVJREF1TXpjMk5EWTFUREF1TXpZNU16STFJREF1TXpjNU16RTJRekF1TXpnM016YzRJREF1TXpnNE9UZ3hJREF1TkRBM05UTTNJREF1TXprME1ETTRJREF1TkRJNE1ERTBJREF1TXprME1ETTRRekF1TkRRNE5Ea3hJREF1TXprME1ETTRJREF1TkRZNE5qVXhJREF1TXpnNE9UZ3hJREF1TkRnMk56QTBJREF1TXpjNU16RTJUREF1TkRreU1EZzVJREF1TXpjMk5EWTFUREF1TkRrM09UVWdNQzR6TnpjNE9URkRNQzQxTkRnNE1UZ2dNQzR6T1RBMU1EZ2dNQzQxT1RRM01qa2dNQzQwTVRneElEQXVOakk1TnpRMElEQXVORFUzTURrNFREQXVOakEyTXlBd0xqUTNPRE15TlVNd0xqVTNOall3T0NBd0xqUTBOVFUxTlNBd0xqVXpPREV4TmlBd0xqUXlNakF4T1NBd0xqUTVOVFF4TmlBd0xqUXhNRFV5TkVNd0xqUTNOREl3T0NBd0xqUXlNRGdnTUM0ME5UQTVORGNnTUM0ME1qWXhNemtnTUM0ME1qY3pPREVnTUM0ME1qWXhNemxETUM0ME1ETTRNVFFnTUM0ME1qWXhNemtnTUM0ek9EQTFOVFFnTUM0ME1qQTRJREF1TXpVNU16UTFJREF1TkRFd05USTBRekF1TXpFeE1ESXhJREF1TkRJek56UXpJREF1TWpZNE16YzBJREF1TkRVeU5EWXpJREF1TWpNM09UVXpJREF1TkRreU1qY3lRekF1TWpBM05UTXpJREF1TlRNeU1EZ2dNQzR4T1RFd01qTWdNQzQxT0RBM056WWdNQzR4T1RBNU5pQXdMall6TURnM09GWXdMalkwT0RZeVNEQXVORGMyTURsTU1DNDBOelkzTWpRZ01DNDJPREF6TUROYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TkRJM05qTTFJREF1TkRJMU1ERTFRekF1TkRBek56TTRJREF1TkRJMU1EZzJJREF1TXpnd01qQTNJREF1TkRFNU1UUTVJREF1TXpVNU1qQTBJREF1TkRBM056UTRRekF1TXpNeE16azBJREF1TXpreU5UYzNJREF1TXpBNU5ESTVJREF1TXpZNE5UYzBJREF1TWprMk56YzNJREF1TXpNNU5UTkRNQzR5T0RReE1qUWdNQzR6TVRBME9EWWdNQzR5T0RFMU1EVWdNQzR5Tnpnd05UVWdNQzR5T0Rrek16TWdNQzR5TkRjek5UWkRNQzR5T1RjeE5qSWdNQzR5TVRZMk5UZ2dNQzR6TVRRNU9URWdNQzR4T0RrME5ESWdNQzR6TkRBd01EWWdNQzR4TnpBd01EUkRNQzR6TmpVd01qRWdNQzR4TlRBMU5qWWdNQzR6T1RVM09UZ2dNQzR4TkRBd01UVWdNQzQwTWpjME56Y2dNQzR4TkRBd01UVkRNQzQwTlRreE5UWWdNQzR4TkRBd01UVWdNQzQwT0RrNU16TWdNQzR4TlRBMU5qWWdNQzQxTVRRNU5EZ2dNQzR4TnpBd01EUkRNQzQxTXprNU5qTWdNQzR4T0RrME5ESWdNQzQxTlRjM09UTWdNQzR5TVRZMk5UZ2dNQzQxTmpVMk1qRWdNQzR5TkRjek5UWkRNQzQxTnpNME5Ea2dNQzR5Tnpnd05UVWdNQzQxTnpBNE15QXdMak14TURRNE5pQXdMalUxT0RFM055QXdMak16T1RVelF6QXVOVFExTlRJMUlEQXVNelk0TlRjMElEQXVOVEl6TlRZZ01DNHpPVEkxTnpjZ01DNDBPVFUzTlNBd0xqUXdOemMwT0ZZd0xqUXdOemMwT0VNd0xqUTNORGd4TWlBd0xqUXhPVEF5TWlBd0xqUTFNVFF4TlNBd0xqUXlORGsxTkNBd0xqUXlOell6TlNBd0xqUXlOVEF4TlZwTk1DNDBNamMyTXpVZ01DNHhOelUyTnpKRE1DNDBNRE15T0RrZ01DNHhOelV5TURVZ01DNHpOemswT1RJZ01DNHhPREk1TXlBd0xqTTJNREEyTVNBd0xqRTVOell3TmtNd0xqTTBNRFl6SURBdU1qRXlNamd6SURBdU16STJOamt5SURBdU1qTXpNRFl4SURBdU16SXdORGd4SURBdU1qVTJOakEzUXpBdU16RTBNamN4SURBdU1qZ3dNVFUwSURBdU16RTJNVFE0SURBdU16QTFNVEEwSURBdU16STFPREV6SURBdU16STNORFUxUXpBdU16TTFORGMzSURBdU16UTVPREEzSURBdU16VXlNelk1SURBdU16WTRNalkxSURBdU16Y3pOemM0SURBdU16YzVPRFkzUXpBdU16a3dNVFExSURBdU16ZzROalExSURBdU5EQTROREk1SURBdU16a3pNak00SURBdU5ESTNNREF5SURBdU16a3pNak00UXpBdU5EUTFOVGMwSURBdU16a3pNak00SURBdU5EWXpPRFU0SURBdU16ZzROalExSURBdU5EZ3dNakkySURBdU16YzVPRFkzUXpBdU5UQXhOVE1nTUM0ek5qZ3pNVElnTUM0MU1UZ3pOaUF3TGpNME9UazJOaUF3TGpVeU9EQTBNU0F3TGpNeU56YzBOa013TGpVek56Y3lNU0F3TGpNd05UVXlOaUF3TGpVek9UWTVOU0F3TGpJNE1EY3dOeUF3TGpVek16WTFJREF1TWpVM01qTTJRekF1TlRJM05qQTFJREF1TWpNek56WTBJREF1TlRFek9EZzRJREF1TWpFeU9UZzNJREF1TkRrME5qYzRJREF1TVRrNE1qQTVRekF1TkRjMU5EWTVJREF1TVRnek5ETWdNQzQwTlRFNE56RWdNQzR4TnpVME9UY2dNQzQwTWpjMk16VWdNQzR4TnpVMk56SldNQzR4TnpVMk56SmFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU5qY3pOREkySURBdU9EWXdNRFE0VERBdU5UQTBPRGd6SURBdU56WXlOemd5VmpBdU5UWTRNRGt4VERBdU5qY3pOREkySURBdU5EY3dPREkxVERBdU9EUXhPVFk1SURBdU5UWTRNRGt4VmpBdU56WXlOemd5VERBdU5qY3pOREkySURBdU9EWXdNRFE0V2swd0xqVXpOalUyTkNBd0xqYzBORFF3Tmt3d0xqWTNNelF5TmlBd0xqZ3lNell4TTB3d0xqZ3hNREk0T0NBd0xqYzBORFF3TmxZd0xqVTROVGs1TWt3d0xqWTNNelF5TmlBd0xqVXdOamM0TlV3d0xqVXpOalUyTkNBd0xqVTROVGs1TWxZd0xqYzBORFF3TmxvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyTnpNMU5qTWdNQzQyT0RNMk56ZE1NQzQxTVRJNU16a2dNQzQxT1RFd01EUk1NQzQxTWpnM09DQXdMalUyTXpVNU9Vd3dMalkzTXpVMk15QXdMalkwTnpBNE0wd3dMamd4T0RNME5pQXdMalUyTXpVNU9Vd3dMamd6TkRFNE55QXdMalU1TVRBd05Fd3dMalkzTXpVMk15QXdMalk0TXpZM04xb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0Mk9Ea3pPVFlnTUM0Mk5qVTFNamRJTUM0Mk5UYzNNVFZXTUM0NE5ERTROREpJTUM0Mk9Ea3pPVFpXTUM0Mk5qVTFNamRhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOW5QaVlqZUdFN1BHUmxabk0rSmlONFlUczhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbkJoYVc1ME1GOXNhVzVsWVhJaUlIZ3hQU0l0TUM0eU1EY3hNRGNpSUhreFBTSXhMakl3TnpFMUlpQjRNajBpTVM0eU1EY3hNU0lnZVRJOUlpMHdMakl3TnpBMk55SWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpUGlZamVHRTdQSE4wYjNBZ2MzUnZjQzFqYjJ4dmNqMGlJME00TlRFeFFpSXZQaVlqZUdFN1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpSa1k1T1RBd0lpOCtKaU40WVRzOEwyeHBibVZoY2tkeVlXUnBaVzUwUGlZamVHRTdQQzlrWldaelBpWWplR0U3UEM5emRtYys7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MDtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgaWQ9IjEzIj4KICAgICAgPG14Q2VsbCBzdHlsZT0iaXIucmVmPTk4MTI2YTlhLTNkOWMtNDQ2ZS05YWUwLWZiODEyZDczNmJkNDtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1sZWZ0O2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT0zO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTM7c291cmNlPWN1c3RvbTtpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj1hbWF6b24td2ViLXNlcnZpY2VzLWVudmlyb25tZW50O3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7Y29udGFpbmVyPTE7cGVyaW1ldGVyPXJlY3RhbmdsZVBlcmltZXRlcjtyZWN1cnNpdmVSZXNpemU9MDt0ZXh0RGlyZWN0aW9uPWx0cjtzcGFjaW5nVG9wPTE7c3BhY2luZ0xlZnQ9MzI7IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiIHBhcmVudD0iMTIiPgogICAgICAgIDxteEdlb21ldHJ5IHg9IjE0NCIgeT0iMiIgd2lkdGg9IjExNjIiIGhlaWdodD0iNTk3IiBhcz0iZ2VvbWV0cnkiLz4KICAgICAgPC9teENlbGw+CiAgICA8L29iamVjdD4KICAgIDxvYmplY3QgbGFiZWw9IkFXUyBWUEMgKFZpcnR1YWwgUHJpdmF0ZSBDbG91ZCkiIGlyLnNvdXJjZVN0eWxlPSJyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj12cGM7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJaUJtYVd4c1BTSWpSVE5HUTBaRElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQwT0RVNU5DQXdMall5TUROSU1DNHlPVGt5TnpORE1DNHlNall5TURZZ01DNDJNakF6SURBdU1UY3dNelFnTUM0MU56RTFJREF1TVRZMk5qQTJJREF1TlRBME5ETXpRekF1TVRZMk5qQTJJREF1TlRBeE5qTXpJREF1TVRZMk5qQTJJREF1TkRrNE5ETXpJREF1TVRZMk5qQTJJREF1TkRrMU1qTXpRekF1TVRZMU5EY3hJREF1TkRZM05EQTRJREF1TVRjek9EQTNJREF1TkRRd01ESXhJREF1TVRrd01qVXhJREF1TkRFM05UUTJRekF1TWpBMk5qazFJREF1TXprMU1EY3hJREF1TWpNd01qYzJJREF1TXpjNE9ETTVJREF1TWpVM01UUWdNQzR6TnpFMVF6QXVNalUzTVRRZ01DNHpOamM1SURBdU1qVTNNVFFnTUM0ek5qUTBNek1nTUM0eU5UY3hOQ0F3TGpNMk1EZ3pNME13TGpJMU56Z3hNaUF3TGpNeU5Ea3pOeUF3TGpJMk9UQTVOQ0F3TGpJNU1EQTBOQ0F3TGpJNE9UVTJNeUF3TGpJMk1EVTBPVU13TGpNeE1EQXpNeUF3TGpJek1UQTFOQ0F3TGpNek9EYzNOQ0F3TGpJd09ESTNOeUF3TGpNM01qRTJOaUF3TGpFNU5UQTRPVU13TGpRd05UVTFPQ0F3TGpFNE1Ua2dNQzQwTkRJeE1EWWdNQzR4TnpnNE9TQXdMalEzTnpJd05pQXdMakU0TmpRek4wTXdMalV4TWpNd05pQXdMakU1TXprNE5DQXdMalUwTkRNNE55QXdMakl4TVRjMU1TQXdMalUyT1RRd05pQXdMakl6TnpWRE1DNDFPRFk0TlRVZ01DNHlOVFEzTnlBd0xqWXdNVEF6T0NBd0xqSTNOVEExTVNBd0xqWXhNVEkzTXlBd0xqSTVOek0yTjBNd0xqWXlOVGt3TWlBd0xqSTROVFl4TkNBd0xqWTBOREV3T0NBd0xqSTNPVEl4TmlBd0xqWTJNamczTXlBd0xqSTNPVEl6TTBNd0xqY3dNVFUwSURBdU1qYzVNak16SURBdU56UXlPRGN6SURBdU16QTJPRE16SURBdU56UTVOamN6SURBdU16WTRNME13TGpjNE1qVXpJREF1TXpjME9DQXdMamd4TWpFM015QXdMak01TWpNMUlEQXVPRE16TmpjeklEQXVOREU0TURNelREQXVPREV5TnpRZ01DNDBNelEwTXpORE1DNDNPVEkzTnpVZ01DNDBNVEUxT1RJZ01DNDNOalV5T1RjZ01DNHpPVFkyTkRjZ01DNDNNelV5TnpNZ01DNHpPVEl6UXpBdU56TXlNamN6SURBdU16a3hPREU1SURBdU56STVOVEkySURBdU16a3dNekkzSURBdU56STNORGtnTUM0ek9EZ3dOekpETUM0M01qVTBOVE1nTUM0ek9EVTRNVGNnTUM0M01qUXlORGNnTUM0ek9ESTVNelFnTUM0M01qUXdOek1nTUM0ek56azVRekF1TnpJeE1EQTJJREF1TXpJNE9ETXpJREF1TmpreE1UUWdNQzR6TURVNUlEQXVOall5T0RjeklEQXVNekExT1VNd0xqWTFNems1TnlBd0xqTXdOVGs0TWlBd0xqWTBOVEkySURBdU16QTRNVElnTUM0Mk16Y3pORGtnTUM0ek1USXhORFZETUM0Mk1qazBNemNnTUM0ek1UWXhOeUF3TGpZeU1qVTJOaUF3TGpNeU1UazNOQ0F3TGpZeE56STNNeUF3TGpNeU9URkRNQzQyTVRVNE5ERWdNQzR6TXpFd01Ea2dNQzQyTVRNNU1qSWdNQzR6TXpJME9Ua2dNQzQyTVRFM01UY2dNQzR6TXpNME1UTkRNQzQyTURrMU1UTWdNQzR6TXpRek1qZ2dNQzQyTURjeE1ETWdNQzR6TXpRMk16UWdNQzQyTURRM05DQXdMak16TkRORE1DNDJNREl6TmpZZ01DNHpNek01TXpjZ01DNDJNREF4TXpVZ01DNHpNekk1TkRFZ01DNDFPVGd5T0RFZ01DNHpNekUwTVRaRE1DNDFPVFkwTWpjZ01DNHpNams0T1NBd0xqVTVOVEF4T1NBd0xqTXlOemc1TWlBd0xqVTVOREl3TmlBd0xqTXlOVFl6TTBNd0xqVTROVEEzT1NBd0xqSTVPVGN4TkNBd0xqVTNNREkzTXlBd0xqSTNOakUyTWlBd0xqVTFNRGczTXlBd0xqSTFOamRETUM0MU1qazFOelFnTUM0eU16UTNPRGNnTUM0MU1ESXlPRFlnTUM0eU1UazJORElnTUM0ME56STBNaklnTUM0eU1UTXhOak5ETUM0ME5ESTFOVGtnTUM0eU1EWTJPRE1nTUM0ME1URTBORGNnTUM0eU1Ea3hOVFlnTUM0ek9ESTVPRElnTUM0eU1qQXlOekZETUM0ek5UUTFNVGNnTUM0eU16RXpPRGNnTUM0ek1qazVOak1nTUM0eU5UQTJOVElnTUM0ek1USXpPVE1nTUM0eU56VTJOVFJETUM0eU9UUTRNalFnTUM0ek1EQTJOVFlnTUM0eU9EVXdNVGtnTUM0ek16QXlPRFlnTUM0eU9EUXlNRFlnTUM0ek5qQTRNek5ETUM0eU9EUXlNalVnTUM0ek5qY3lNRE1nTUM0eU9EUTFPREVnTUM0ek56TTFOamdnTUM0eU9EVXlOek1nTUM0ek56azVRekF1TWpnMU5UazBJREF1TXpnek1EZ3lJREF1TWpnME56WXhJREF1TXpnMk1qY3pJREF1TWpneU9USTFJREF1TXpnNE9Ea3lRekF1TWpneE1Ea2dNQzR6T1RFMU1URWdNQzR5Tnpnek56UWdNQzR6T1RNek9ETWdNQzR5TnpVeU56TWdNQzR6T1RReE5qZERNQzR5TkRVd01EWWdNQzQwTURFMk16TWdNQzR4T1RNNU5DQXdMalF5TkRnek15QXdMakU1TXprMElEQXVORGsxTWpNelF6QXVNVGt6T0RBMklEQXVORGszTmpNeElEQXVNVGt6T0RBMklEQXVOVEF3TURNMUlEQXVNVGt6T1RRZ01DNDFNREkwTXpORE1DNHhPVFk0TnpNZ01DNDFOVFUzTmpjZ01DNHlOREUxTkNBd0xqVTVNell6TXlBd0xqTXdNRFl3TmlBd0xqVTVNell6TTBnd0xqUTROekkzTTB3d0xqUTROVGswSURBdU5qSXdNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJOekkwTlRFZ01DNDRNVFk0TURWRE1DNDFNVFF6TVRnZ01DNDRNVFk0TURVZ01DNDFNVEkwTlRFZ01DNDJNemt3TnpFZ01DNDFNVEkwTlRFZ01DNDJNemN6TXpoV01DNDBOelV3TnpGRE1DNDFNVEkwTkRJZ01DNDBOekl6TkRjZ01DNDFNVE15TmpnZ01DNDBOamsyT0RVZ01DNDFNVFE0TVRnZ01DNDBOamMwTkRWRE1DNDFNVFl6TmpjZ01DNDBOalV5TURRZ01DNDFNVGcxTmpZZ01DNDBOak0wT1RJZ01DNDFNakV4TVRnZ01DNDBOakkxTXpoTU1DNDJOamMzT0RVZ01DNDBNRGd5TnpGRE1DNDJOekE0TURRZ01DNDBNRGN5TURRZ01DNDJOelF3T1RnZ01DNDBNRGN5TURRZ01DNDJOemN4TVRnZ01DNDBNRGd5TnpGTU1DNDRNak0zT0RVZ01DNDBOakkxTXpoRE1DNDRNall6TXpjZ01DNDBOak0wT1RJZ01DNDRNamcxTXpVZ01DNDBOalV5TURRZ01DNDRNekF3T0RVZ01DNDBOamMwTkRWRE1DNDRNekUyTXpRZ01DNDBOamsyT0RVZ01DNDRNekkwTmlBd0xqUTNNak0wTnlBd0xqZ3pNalExTVNBd0xqUTNOVEEzTVZZd0xqWTBOek16T0VNd0xqZ3pNalExTVNBd0xqWTBPVEEzTVNBd0xqZ3pNRFU0TlNBd0xqZ3hOamd3TlNBd0xqWTNNalExTVNBd0xqZ3hOamd3TlZwTk1DNDFNemt4TVRnZ01DNDBPRFEwTURWV01DNDJNemN6TXpoRE1DNDFNemt4TVRnZ01DNDJORE0yTURVZ01DNDFOREE1T0RVZ01DNDNPVEF4TXpnZ01DNDJOekkwTlRFZ01DNDNPVEF4TXpoRE1DNDRNRE01TVRnZ01DNDNPVEF4TXpnZ01DNDRNRFUzT0RVZ01DNDJOVE15TURVZ01DNDRNRFUzT0RVZ01DNDJORGN6TXpoV01DNDBPRFEwTURWTU1DNDJOekkwTlRFZ01DNDBNelE1TXpoTU1DNDFNemt4TVRnZ01DNDBPRFEwTURWYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TmpjeU5ETTVJREF1TnpZMk9USTBRekF1TlRnM05qTTVJREF1TnpZMk9USTBJREF1TlRZMk9ETTVJREF1TmpVNU16STBJREF1TlRZMU56Y3pJREF1TmpVME56a3hRekF1TlRZMU5qUXhJREF1TmpVek9UazJJREF1TlRZMU5qUXhJREF1TmpVek1UZzFJREF1TlRZMU56Y3pJREF1TmpVeU16a3hWakF1TlRFME1qVTRRekF1TlRZMU56Y2dNQzQxTVRFMU9EY2dNQzQxTmpZMU5qa2dNQzQxTURnNU56Z2dNQzQxTmpnd05qY2dNQzQxTURZM05qZERNQzQxTmprMU5qVWdNQzQxTURRMU5UWWdNQzQxTnpFMk9USWdNQzQxTURJNE5EWWdNQzQxTnpReE56TWdNQzQxTURFNE5UaE1NQzQyTmpjMU1EWWdNQzQwTmpVd05UaERNQzQyTnpBMk56UWdNQzQwTmpNM09UWWdNQzQyTnpReU1EVWdNQzQwTmpNM09UWWdNQzQyTnpjek56TWdNQzQwTmpVd05UaE1NQzQzTnpBM01EWWdNQzQxTURFNE5UaERNQzQzTnpNeE9EY2dNQzQxTURJNE5EWWdNQzQzTnpVek1UUWdNQzQxTURRMU5UWWdNQzQzTnpZNE1USWdNQzQxTURZM05qZERNQzQzTnpnek1Ea2dNQzQxTURnNU56Z2dNQzQzTnpreE1Ea2dNQzQxTVRFMU9EY2dNQzQzTnpreE1EWWdNQzQxTVRReU5UaFdNQzQyTlRJek9URkRNQzQzTnpreE56SWdNQzQyTlRNeE9TQXdMamMzT1RFM01pQXdMalkxTXprNU1pQXdMamMzT1RFd05pQXdMalkxTkRjNU1VTXdMamMzT0RBek9TQXdMalkxT1RNeU5DQXdMamMxTnpJek9TQXdMamMyTmpreU5DQXdMalkzTWpRek9TQXdMamMyTmpreU5GcE5NQzQxT1RJME16a2dNQzQyTlRFd05UaERNQzQxT1RRMU56TWdNQzQyTmpFeE9URWdNQzQyTVRNMk16a2dNQzQzTkRBeU5UZ2dNQzQyTnpJME16a2dNQzQzTkRBeU5UaERNQzQzTXpFeU16a2dNQzQzTkRBeU5UZ2dNQzQzTlRBek1EWWdNQzQyTmpFek1qUWdNQzQzTlRJME16a2dNQzQyTlRFd05UaFdNQzQxTWpNek1qUk1NQzQyTnpJME16a2dNQzQwT1RFNE5UaE1NQzQxT1RJME16a2dNQzQxTWpNek1qUldNQzQyTlRFd05UaGFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEM5blBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWElpSUhneFBTSXRNQzR5TURjd05qY2lJSGt4UFNJeExqSXdOekEzSWlCNE1qMGlNUzR5TURjd055SWdlVEk5SWkwd0xqSXdOekEyTnlJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQaVlqZUdFN1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUl6UkVNamRCT0NJdlBpWWplR0U3UEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJalFURTJOa1pHSWk4K0ppTjRZVHM4TDJ4cGJtVmhja2R5WVdScFpXNTBQaVlqZUdFN1BHTnNhWEJRWVhSb0lHbGtQU0pqYkdsd01DSStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOWpiR2x3VUdGMGFENG1JM2hoT3p3dlpHVm1jejRtSTNoaE96d3ZjM1puUGc9PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0wO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7IiBpZD0iMTQiPgogICAgICA8bXhDZWxsIHN0eWxlPSJpci5yZWY9YzM5ZjNjOTctMDA2MC00YjlmLWI1NzQtZDMyYjNhNDk4Y2VlO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWxlZnQ7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMztzb3VyY2U9Y3VzdG9tO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXZwYzt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xO2NvbnRhaW5lcj0xO3BlcmltZXRlcj1yZWN0YW5nbGVQZXJpbWV0ZXI7cmVjdXJzaXZlUmVzaXplPTA7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEzIj4KICAgICAgICA8bXhHZW9tZXRyeSB4PSIxODgiIHk9IjIwIiB3aWR0aD0iNDk5IiBoZWlnaHQ9IjUzMCIgYXM9Imdlb21ldHJ5Ii8+CiAgICAgIDwvbXhDZWxsPgogICAgPC9vYmplY3Q+CiAgICA8b2JqZWN0IGxhYmVsPSIiIGlyLnNvdXJjZVN0eWxlPSJyb3VuZGVkPTE7YXJjU2l6ZT0xMDtkYXNoZWQ9MTtzdHJva2VDb2xvcj0jRjU5RDU2O2ZpbGxDb2xvcj1ub25lO2dyYWRpZW50Q29sb3I9bm9uZTtkYXNoUGF0dGVybj04IDQ7c3Ryb2tlV2lkdGg9MjtzaGFkb3c9MDtmb250Q29sb3I9IzhDOEM4QzsiIGlkPSIxNiI+CiAgICAgIDxteENlbGwgc3R5bGU9InJvdW5kZWQ9MTthcmNTaXplPTM7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9bm9uZTtncmFkaWVudENvbG9yPW5vbmU7ZGFzaFBhdHRlcm49OCA0O3N0cm9rZVdpZHRoPTE7c2hhZG93PTA7Zm9udENvbG9yPSM4QzhDOEM7Y29udGFpbmVyPTE7cGVyaW1ldGVyPXJlY3RhbmdsZVBlcmltZXRlcjtyZWN1cnNpdmVSZXNpemU9MDt2ZXJ0aWNhbEFsaWduPXRvcDtmb250U2l6ZT0xMzt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWxlZnQ7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE0Ij4KICAgICAgICA8bXhHZW9tZXRyeSB4PSI0MCIgeT0iMzAiIHdpZHRoPSI0MDYiIGhlaWdodD0iMTU2IiBhcz0iZ2VvbWV0cnkiPgogICAgICAgICAgPG14UmVjdGFuZ2xlIHg9IjQwIiB5PSIzMCIgd2lkdGg9Ijc1LjYiIGhlaWdodD0iNTIiIGFzPSJhbHRlcm5hdGVCb3VuZHMiLz4KICAgICAgICA8L214R2VvbWV0cnk+CiAgICAgIDwvbXhDZWxsPgogICAgPC9vYmplY3Q+CiAgICA8bXhDZWxsIGlkPSIxOCIgdmFsdWU9IkFaMSIgc3R5bGU9InRleHQ7c3Ryb2tlQ29sb3I9bm9uZTthbGlnbj1jZW50ZXI7ZmlsbENvbG9yPW5vbmU7aHRtbD0xO3ZlcnRpY2FsQWxpZ249bWlkZGxlO3doaXRlU3BhY2U9d3JhcDtyb3VuZGVkPTA7Zm9udENvbG9yPSM4QzhDOEM7IiB2ZXJ0ZXg9IjEiIHBhcmVudD0iMTYiPgogICAgICA8bXhHZW9tZXRyeSB4PSIzMCIgeT0iMTMiIHdpZHRoPSI2MCIgaGVpZ2h0PSIzMCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjIwIiB2YWx1ZT0iQVdTIEVDMiAoRWxhc3RpYyBDb21wdXRlIENsb3VkKSIgc3R5bGU9ImlyLnJlZj1mMWY0ZWQ0YS0wMWU2LTRlM2QtYjIyNy1mMDZhYmFiZWU5ZDk7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZWMyO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TURZMk1qZ2dNQzQxTXprNU5UbElNQzQzTXprNU5qRldNQzQxTVRNeU9UTklNQzQ0TURZMk1qaFdNQzR4T1RNeU9UTklNQzQwT0RZMk1qaFdNQzR5TlRrNU5UbElNQzQwTlRrNU5qRldNQzR4T1RNeU9UTkRNQzQwTlRrNU5qRWdNQzR4T0RZeU1pQXdMalEyTWpjM0lEQXVNVGM1TkRNM0lEQXVORFkzTnpjeElEQXVNVGMwTkRNMlF6QXVORGN5TnpjeUlEQXVNVFk1TkRNMUlEQXVORGM1TlRVMUlEQXVNVFkyTmpJMklEQXVORGcyTmpJNElEQXVNVFkyTmpJMlNEQXVPREEyTmpJNFF6QXVPREV6TnlBd0xqRTJOall5TmlBd0xqZ3lNRFE0TXlBd0xqRTJPVFF6TlNBd0xqZ3lOVFE0TkNBd0xqRTNORFF6TmtNd0xqZ3pNRFE0TlNBd0xqRTNPVFF6TnlBd0xqZ3pNekk1TkNBd0xqRTROakl5SURBdU9ETXpNamswSURBdU1Ua3pNamt6VmpBdU5URXpNamt6UXpBdU9ETXpNamswSURBdU5USXdNelkxSURBdU9ETXdORGcxSURBdU5USTNNVFE0SURBdU9ESTFORGcwSURBdU5UTXlNVFE1UXpBdU9ESXdORGd6SURBdU5UTTNNVFVnTUM0NE1UTTNJREF1TlRNNU9UVTVJREF1T0RBMk5qSTRJREF1TlRNNU9UVTVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXhNekUzSURBdU9ETXpNamswU0RBdU1Ua3pNVGN4UXpBdU1UZzJNRGs0SURBdU9ETXpNamswSURBdU1UYzVNekUxSURBdU9ETXdORGcxSURBdU1UYzBNekUwSURBdU9ESTFORGcwUXpBdU1UWTVNekV6SURBdU9ESXdORGd6SURBdU1UWTJOVEEwSURBdU9ERXpOeUF3TGpFMk5qVXdOQ0F3TGpnd05qWXlOMVl3TGpRNE5qWXlPRU13TGpFMk5qVXdOQ0F3TGpRM09UVTFOU0F3TGpFMk9UTXhNeUF3TGpRM01qYzNNaUF3TGpFM05ETXhOQ0F3TGpRMk56YzNNVU13TGpFM09UTXhOU0F3TGpRMk1qYzNJREF1TVRnMk1EazRJREF1TkRVNU9UWXhJREF1TVRrek1UY3hJREF1TkRVNU9UWXhTREF1TWpVNU9ETTNWakF1TkRnMk5qSTRTREF1TVRrek1UY3hWakF1T0RBMk5qSTNTREF1TlRFek1UZFdNQzQzTXprNU5qRklNQzQxTXprNE16WldNQzQ0TURZMk1qZERNQzQxTXprNE16WWdNQzQ0TVRNM0lEQXVOVE0zTURJM0lEQXVPREl3TkRneklEQXVOVE15TURJMklEQXVPREkxTkRnMFF6QXVOVEkzTURJMUlEQXVPRE13TkRnMUlEQXVOVEl3TWpReUlEQXVPRE16TWprMElEQXVOVEV6TVRjZ01DNDRNek15T1RSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TnpFek1qZzVJREF1TXpjNU9UVTFWakF1TXpVek1qZzRTREF1Tmpjek1qZzVRekF1TmpjeU56UWdNQzR6TkRZek9UZ2dNQzQyTmprM05UUWdNQzR6TXprNU15QXdMalkyTkRnMk55QXdMak16TlRBME0wTXdMalkxT1RrNElEQXVNek13TVRVMklEQXVOalV6TlRFeUlEQXVNekkzTVRjZ01DNDJORFkyTWpJZ01DNHpNalkyTWpGV01DNHlPRFkyTWpGSU1DNDJNVGs1TlRWV01DNHpNalkyTWpGSU1DNDFOems1TlRWV01DNHlPRFkyTWpGSU1DNDFOVE15T0RoV01DNHpNalkyTWpGSU1DNDFNVE15T0RoV01DNHlPRFkyTWpGSU1DNDBPRFkyTWpKV01DNHpNalkyTWpGSU1DNDBORFkyTWpGV01DNHlPRFkyTWpGSU1DNDBNVGs1TlRWV01DNHpNalkyTWpGSU1DNHpOems1TlRWV01DNHlPRFkyTWpGSU1DNHpOVE15T0RoV01DNHpNalkyTWpGRE1DNHpORFl6T1RnZ01DNHpNamN4TnlBd0xqTXpPVGt6SURBdU16TXdNVFUySURBdU16TTFNRFF6SURBdU16TTFNRFF6UXpBdU16TXdNVFUySURBdU16TTVPVE1nTUM0ek1qY3hOeUF3TGpNME5qTTVPQ0F3TGpNeU5qWXlNU0F3TGpNMU16STRPRWd3TGpJNE5qWXlNVll3TGpNM09UazFOVWd3TGpNeU5qWXlNVll3TGpReE9UazFOVWd3TGpJNE5qWXlNVll3TGpRME5qWXlNVWd3TGpNeU5qWXlNVll3TGpRNE5qWXlNa2d3TGpJNE5qWXlNVll3TGpVeE16STRPRWd3TGpNeU5qWXlNVll3TGpVMU16STRPRWd3TGpJNE5qWXlNVll3TGpVM09UazFOVWd3TGpNeU5qWXlNVll3TGpZeE9UazFOVWd3TGpJNE5qWXlNVll3TGpZME5qWXlNa2d3TGpNeU5qWXlNVU13TGpNeU56RTNJREF1TmpVek5URXhJREF1TXpNd01UVTJJREF1TmpVNU9UZ2dNQzR6TXpVd05ETWdNQzQyTmpRNE5qZERNQzR6TXprNU15QXdMalkyT1RjMU5DQXdMak0wTmpNNU9DQXdMalkzTWpjMElEQXVNelV6TWpnNElEQXVOamN6TWpnNVZqQXVOekV6TWpnNVNEQXVNemM1T1RVMVZqQXVOamN6TWpnNVNEQXVOREU1T1RVMVZqQXVOekV6TWpnNVNEQXVORFEyTmpJeFZqQXVOamN6TWpnNVNEQXVORGcyTmpJeVZqQXVOekV6TWpnNVNEQXVOVEV6TWpnNFZqQXVOamN6TWpnNVNEQXVOVFV6TWpnNFZqQXVOekV6TWpnNVNEQXVOVGM1T1RVMVZqQXVOamN6TWpnNVNEQXVOakU1T1RVMVZqQXVOekV6TWpnNVNEQXVOalEyTmpJeVZqQXVOamN6TWpnNVF6QXVOalV6TlRFeUlEQXVOamN5TnpRZ01DNDJOVGs1T0NBd0xqWTJPVGMxTkNBd0xqWTJORGcyTnlBd0xqWTJORGcyTjBNd0xqWTJPVGMxTkNBd0xqWTFPVGs0SURBdU5qY3lOelFnTUM0Mk5UTTFNVEVnTUM0Mk56TXlPRGtnTUM0Mk5EWTJNakpJTUM0M01UTXlPRGxXTUM0Mk1UazVOVFZJTUM0Mk56TXlPRGxXTUM0MU56azVOVFZJTUM0M01UTXlPRGxXTUM0MU5UTXlPRGhJTUM0Mk56TXlPRGxXTUM0MU1UTXlPRGhJTUM0M01UTXlPRGxXTUM0ME9EWTJNakpJTUM0Mk56TXlPRGxXTUM0ME5EWTJNakZJTUM0M01UTXlPRGxXTUM0ME1UazVOVFZJTUM0Mk56TXlPRGxXTUM0ek56azVOVFZJTUM0M01UTXlPRGxhVFRBdU5qUTJOakl5SURBdU5qUTBNakl5UXpBdU5qUTJOakl5SURBdU5qUTBPRFU0SURBdU5qUTJNelk1SURBdU5qUTFORFk1SURBdU5qUTFPVEU1SURBdU5qUTFPVEU1UXpBdU5qUTFORFk1SURBdU5qUTJNelk1SURBdU5qUTBPRFU1SURBdU5qUTJOakl5SURBdU5qUTBNakl5SURBdU5qUTJOakl5U0RBdU16VTFOamc0UXpBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTBORFF4SURBdU5qUTJNelk1SURBdU16VXpPVGt4SURBdU5qUTFPVEU1UXpBdU16VXpOVFF4SURBdU5qUTFORFk1SURBdU16VXpNamc0SURBdU5qUTBPRFU0SURBdU16VXpNamc0SURBdU5qUTBNakl5VmpBdU16VTFOamc0UXpBdU16VXpNamc0SURBdU16VTFNRFV4SURBdU16VXpOVFF4SURBdU16VTBORFF4SURBdU16VXpPVGt4SURBdU16VXpPVGt4UXpBdU16VTBORFF4SURBdU16VXpOVFF4SURBdU16VTFNRFV4SURBdU16VXpNamc0SURBdU16VTFOamc0SURBdU16VXpNamc0U0RBdU5qUTBNakl5UXpBdU5qUTBPRFU1SURBdU16VXpNamc0SURBdU5qUTFORFk1SURBdU16VXpOVFF4SURBdU5qUTFPVEU1SURBdU16VXpPVGt4UXpBdU5qUTJNelk1SURBdU16VTBORFF4SURBdU5qUTJOakl5SURBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTFOamc0VmpBdU5qUTBNakl5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZaejRtSTNoaE96d3ZaejRtSTNoaE96eGtaV1p6UGlZamVHRTdQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p3WVdsdWREQmZiR2x1WldGeUlpQjRNVDBpTFRBdU1qQTNNaUlnZVRFOUlqRXVNakEzTWlJZ2VESTlJakV1TWpBM01EY2lJSGt5UFNJdE1DNHlNRGN3TmpjaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajRtSTNoaE96eHpkRzl3SUhOMGIzQXRZMjlzYjNJOUlpTkRPRFV4TVVJaUx6NG1JM2hoT3p4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUkwWkdPVGt3TUNJdlBpWWplR0U3UEM5c2FXNWxZWEpIY21Ga2FXVnVkRDRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakVpSUdobGFXZG9kRDBpTVNJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZZMnhwY0ZCaGRHZytKaU40WVRzOEwyUmxabk0rSmlONFlUczhMM04yWno0PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiIHBhcmVudD0iMTYiPgogICAgICA8bXhHZW9tZXRyeSB4PSI5OCIgeT0iMTMiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjIyIiB2YWx1ZT0iQVdTIFJEUyAoUmVsYXRpb25hbCBEYXRhYmFzZSBTZXJ2aWNlKSIgc3R5bGU9ImlyLnJlZj03NGU5NDkxMi0xMDhlLTRkYTctYjMwZi03M2JjNzg3MzQ1Yjg7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9cmRzO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyTkRZd01ETWdNQzR6TnpZME56bERNQzQyTkRZd01ETWdNQzR6TXpjNE1UTWdNQzQxTnpBeE16Y2dNQzR6TVRrNU5EWWdNQzQwT1Rrek16Y2dNQzR6TVRrNU5EWkRNQzQwTWpnMU16Y2dNQzR6TVRrNU5EWWdNQzR6TlRJMk55QXdMak16TnpneE15QXdMak0xTWpZM0lEQXVNemMyTkRjNVF6QXVNelV5TmpFeUlEQXVNemM0TkRFeklEQXVNelV5T0RNM0lEQXVNemd3TXpRMElEQXVNelV6TXpNM0lEQXVNemd5TWpFelZqQXVOakl5T0RjNVF6QXVNelV5TmpjZ01DNDJOakk0TnprZ01DNDBNamcyTnlBd0xqWTNPVGswTlNBd0xqVXdNREF3TXlBd0xqWTNPVGswTlVNd0xqVTNNVE16TnlBd0xqWTNPVGswTlNBd0xqWTBOalkzSURBdU5qWXlNelExSURBdU5qUTJOamNnTUM0Mk1qTTJOemxXTUM0ek56WTBOemxJTUM0Mk5EWXdNRE5hVFRBdU5EazVOakF6SURBdU16UTJOelEyUXpBdU5UYzNNek0zSURBdU16UTJOelEySURBdU5qRTVOakF6SURBdU16WTNPVFEySURBdU5qRTVOakF6SURBdU16YzJOakV6UXpBdU5qRTVOakF6SURBdU16ZzFNamM1SURBdU5UYzNOakF6SURBdU5EQTJORGM1SURBdU5EazVOakF6SURBdU5EQTJORGM1UXpBdU5ESXhOakF6SURBdU5EQTJORGM1SURBdU16YzVOakF6SURBdU16ZzFOREV6SURBdU16YzVOakF6SURBdU16YzJOakV6UXpBdU16YzVOakF6SURBdU16WTNPREV6SURBdU5ESXhPRGNnTUM0ek5EWTNORFlnTUM0ME9UazJNRE1nTUM0ek5EWTNORFphVFRBdU5qRTVOakF6SURBdU5qSXpPREV5UXpBdU5qRTVOakF6SURBdU5qTXlNelExSURBdU5UYzNORGNnTUM0Mk5UTTBNVElnTUM0ME9UazJNRE1nTUM0Mk5UTTBNVEpETUM0ME1qRTNNemNnTUM0Mk5UTTBNVElnTUM0ek56azJNRE1nTUM0Mk16SXpORFVnTUM0ek56azJNRE1nTUM0Mk1qTTRNVEpXTUM0MU9ERTJOemxETUM0ME1EYzNNemNnTUM0MU9UY3dNVElnTUM0ME5UUTVNemNnTUM0Mk1EUXpORFVnTUM0ME9UazJNRE1nTUM0Mk1EUXpORFZETUM0MU5EUXlOeUF3TGpZd05ETTBOU0F3TGpVNU1UQTNJREF1TlRrM01UUTFJREF1TmpFNU5qQXpJREF1TlRneU1EYzVWakF1TmpJek9ERXlXazB3TGpZeE9UWXdNeUF3TGpVME56azBOa013TGpZeE9UWXdNeUF3TGpVMU5qUTNPU0F3TGpVM056WXdNeUF3TGpVM056Z3hNaUF3TGpRNU9UWXdNeUF3TGpVM056Z3hNa013TGpReU1UWXdNeUF3TGpVM056Z3hNaUF3TGpNM09UWXdNeUF3TGpVMU5qUTNPU0F3TGpNM09UWXdNeUF3TGpVME56azBOa2d3TGpNNE1EQXdNMVl3TGpRNU56QXhNa013TGpRd09ERXpOeUF3TGpVeE1qSXhNaUF3TGpRMU5UTXpOeUF3TGpVeE9UVTBOaUF3TGpVd01EQXdNeUF3TGpVeE9UVTBOa013TGpVME5EWTNJREF1TlRFNU5UUTJJREF1TlRreE5EY2dNQzQxTVRJek5EWWdNQzQyTWpBd01ETWdNQzQwT1RjeU56bE1NQzQyTVRrMk1ETWdNQzQxTkRjNU5EWmFUVEF1TmpFNU5qQXpJREF1TkRZek1ERXpRekF1TmpFNU5qQXpJREF1TkRjeE5qYzVJREF1TlRjM05qQXpJREF1TkRrek1ERXlJREF1TkRrNU5qQXpJREF1TkRrek1ERXlRekF1TkRJeE5qQXpJREF1TkRrek1ERXlJREF1TXpjNU5qQXpJREF1TkRjeE5qYzVJREF1TXpjNU5qQXpJREF1TkRZek1ERXpTREF1TXpnd01EQXpWakF1TkRFeE1ERXpRekF1TkRBNE5EQXpJREF1TkRJMk1EYzVJREF1TkRVMU1EY2dNQzQwTXpNd01UTWdNQzQxTURBd01ETWdNQzQwTXpNd01UTkRNQzQxTkRRNU16Y2dNQzQwTXpNd01UTWdNQzQxT1RJeE16Y2dNQzQwTWpVNE1UTWdNQzQyTWpBd01ETWdNQzQwTVRBME56bE1NQzQyTVRrMk1ETWdNQzQwTmpNd01UTmFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU1qRXlNRGt6SURBdU9EQTJPRWd3TGpJNU9UazFPVll3TGpnek16UTJOa2d3TGpFM09UazFPVU13TGpFM05qUXlNeUF3TGpnek16UTJOaUF3TGpFM016QXpNaUF3TGpnek1qQTJNU0F3TGpFM01EVXpNU0F3TGpneU9UVTJNVU13TGpFMk9EQXpNU0F3TGpneU56QTJNU0F3TGpFMk5qWXlOaUF3TGpneU16WTJPU0F3TGpFMk5qWXlOaUF3TGpneU1ERXpNMVl3TGpjd01ERXpNMGd3TGpFNU16STVNMVl3TGpjNE56Y3pNMHd3TGpJNU16STVNeUF3TGpZNE56ZzJOa3d3TGpNeE1UazFPU0F3TGpjd05qWTJOa3d3TGpJeE1qQTVNeUF3TGpnd05qaGFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU9ETXpNek14SURBdU56QXdNVE14VmpBdU9ESXdNVE14UXpBdU9ETXpNek14SURBdU9ESXpOalkzSURBdU9ETXhPVEkySURBdU9ESTNNRFU1SURBdU9ESTVOREkySURBdU9ESTVOVFU1UXpBdU9ESTJPVEkxSURBdU9ETXlNRFlnTUM0NE1qTTFNelFnTUM0NE16TTBOalFnTUM0NE1UazVPVGdnTUM0NE16TTBOalJJTUM0Mk9UazVPVGhXTUM0NE1EWTNPVGhJTUM0M09EYzROalJNTUM0Mk9Ea3pNekVnTUM0M01EYzVPVGhNTUM0M01EZ3hNekVnTUM0Mk9Ea3pNekZNTUM0NE1EWTJOalFnTUM0M09EYzNNekZXTUM0M01EQXhNekZJTUM0NE16TXpNekZhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVPRE16TXpNeElEQXVNVGd3TWpBMFZqQXVNekF3TWpBMFNEQXVPREEyTmpZMFZqQXVNakV5TWpBMFREQXVOekE0TVRNeElEQXVNekV3TnpNNFREQXVOamc1TXpNeElEQXVNamt4T1RNNFREQXVOemczTnpNeElEQXVNVGt6TlRNM1NEQXVOams1T1RrNFZqQXVNVFkyT0RkSU1DNDRNVGs1T1RoRE1DNDRNak0xTXpRZ01DNHhOalk0TnlBd0xqZ3lOamt5TlNBd0xqRTJPREkzTlNBd0xqZ3lPVFF5TmlBd0xqRTNNRGMzTlVNd0xqZ3pNVGt5TmlBd0xqRTNNekkzTmlBd0xqZ3pNek16TVNBd0xqRTNOalkyTnlBd0xqZ3pNek16TVNBd0xqRTRNREl3TkZvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzR6TVRFNU5Ua2dNQzR5T1RNek1EUk1NQzR5T1RNeU9UTWdNQzR6TVRFNU56Rk1NQzR4T1RNeU9UTWdNQzR5TVRJeE1EUldNQzR5T1RrNE16ZElNQzR4TmpZMk1qWldNQzR4TnprNE16ZERNQzR4TmpZMk1qWWdNQzR4TnpZek1ERWdNQzR4Tmpnd016RWdNQzR4TnpJNU1TQXdMakUzTURVek1TQXdMakUzTURRd09VTXdMakUzTXpBek1pQXdMakUyTnprd09TQXdMakUzTmpReU15QXdMakUyTmpVd05DQXdMakUzT1RrMU9TQXdMakUyTmpVd05FZ3dMakk1T1RrMU9WWXdMakU1TXpFM01VZ3dMakl4TWpBNU0wd3dMak14TVRrMU9TQXdMakk1TXpNd05Gb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0eU9UVTBPVEVnTUM0Mk1UazFNRE5ETUM0eU1UUXdNalVnTUM0MU9UQXhOeUF3TGpFMk56TTFPQ0F3TGpVME5UTTJPU0F3TGpFMk56TTFPQ0F3TGpRNU5qY3dNa013TGpFMk56TTFPQ0F3TGpRME9EQXpOU0F3TGpJeE5EQXlOU0F3TGpRd016TTJPQ0F3TGpJNU5UUTVNU0F3TGpNM016a3dNVXd3TGpNd05EVTFOeUF3TGpNNU9EazJPRU13TGpJek5UTTFPQ0F3TGpReU16a3dNaUF3TGpFNU5EQXlOU0F3TGpRMk1EUXpOU0F3TGpFNU5EQXlOU0F3TGpRNU5qY3dNa013TGpFNU5EQXlOU0F3TGpVek1qazJPU0F3TGpJek5UTTFPQ0F3TGpVMk9UVXdNeUF3TGpNd05EVTFOeUF3TGpVNU5EUXpOMHd3TGpJNU5UUTVNU0F3TGpZeE9UVXdNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJPVGN4TXpJZ01DNDJNakkwTkV3d0xqWTRPRFU1T1NBd0xqVTVOekV3TjBNd0xqYzJNalU1T1NBd0xqVTNNakUzTXlBd0xqZ3dOamN6TWlBd0xqVXpORFUzTXlBd0xqZ3dOamN6TWlBd0xqUTVOamN3TmtNd0xqZ3dOamN6TWlBd0xqUTFPRGd6T1NBd0xqYzJNalU1T1NBd0xqUXlNVEl6T1NBd0xqWTRPRFU1T1NBd0xqTTVOakUzTWt3d0xqWTVOekV6TWlBd0xqTTNNRGszTWtNd0xqYzRNelkyTlNBd0xqUXdNREF6T1NBd0xqZ3pNek01T1NBd0xqUTBOakUzTWlBd0xqZ3pNek01T1NBd0xqUTVOamN3TmtNd0xqZ3pNek01T1NBd0xqVTBOekkwSURBdU56Z3pOalkxSURBdU5Ua3pNVEEzSURBdU5qazNNVE15SURBdU5qSXlORFJhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOW5QaVlqZUdFN1BDOW5QaVlqZUdFN1BHUmxabk0rSmlONFlUczhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbkJoYVc1ME1GOXNhVzVsWVhJaUlIZ3hQU0l0TUM0eU1EY3dOamNpSUhreFBTSXhMakl3TnpBM0lpQjRNajBpTVM0eU1EY3lJaUI1TWowaUxUQXVNakEzTWlJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQaVlqZUdFN1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUl6SkZNamRCUkNJdlBpWWplR0U3UEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJak5USTNSa1pHSWk4K0ppTjRZVHM4TDJ4cGJtVmhja2R5WVdScFpXNTBQaVlqZUdFN1BHTnNhWEJRWVhSb0lHbGtQU0pqYkdsd01DSStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOWpiR2x3VUdGMGFENG1JM2hoT3p3dlpHVm1jejRtSTNoaE96d3ZjM1puUGc9PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiIHBhcmVudD0iMTYiPgogICAgICA8bXhHZW9tZXRyeSB4PSIyNjAiIHk9IjEzIiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8b2JqZWN0IGxhYmVsPSIiIGlyLnNvdXJjZVN0eWxlPSJyb3VuZGVkPTE7YXJjU2l6ZT0xMDtkYXNoZWQ9MTtzdHJva2VDb2xvcj0jRjU5RDU2O2ZpbGxDb2xvcj1ub25lO2dyYWRpZW50Q29sb3I9bm9uZTtkYXNoUGF0dGVybj04IDQ7c3Ryb2tlV2lkdGg9MjtzaGFkb3c9MDtmb250Q29sb3I9IzhDOEM4QzsiIGlkPSIxNyI+CiAgICAgIDxteENlbGwgc3R5bGU9InJvdW5kZWQ9MTthcmNTaXplPTM7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9bm9uZTtncmFkaWVudENvbG9yPW5vbmU7ZGFzaFBhdHRlcm49OCA0O3N0cm9rZVdpZHRoPTE7c2hhZG93PTA7Zm9udENvbG9yPSM4QzhDOEM7Y29udGFpbmVyPTE7cGVyaW1ldGVyPXJlY3RhbmdsZVBlcmltZXRlcjtyZWN1cnNpdmVSZXNpemU9MDt2ZXJ0aWNhbEFsaWduPXRvcDtmb250U2l6ZT0xMzt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWxlZnQ7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE0Ij4KICAgICAgICA8bXhHZW9tZXRyeSB4PSIzMiIgeT0iMzMxIiB3aWR0aD0iNDA2IiBoZWlnaHQ9IjE3NSIgYXM9Imdlb21ldHJ5Ii8+CiAgICAgIDwvbXhDZWxsPgogICAgPC9vYmplY3Q+CiAgICA8bXhDZWxsIGlkPSIxOSIgdmFsdWU9IkFaMiIgc3R5bGU9InRleHQ7c3Ryb2tlQ29sb3I9bm9uZTthbGlnbj1jZW50ZXI7ZmlsbENvbG9yPW5vbmU7aHRtbD0xO3ZlcnRpY2FsQWxpZ249bWlkZGxlO3doaXRlU3BhY2U9d3JhcDtyb3VuZGVkPTA7Zm9udENvbG9yPSM4QzhDOEM7IiB2ZXJ0ZXg9IjEiIHBhcmVudD0iMTciPgogICAgICA8bXhHZW9tZXRyeSB4PSIzOCIgeT0iMTkiIHdpZHRoPSI2MCIgaGVpZ2h0PSIzMCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjIxIiB2YWx1ZT0iQVdTIEVDMiAoRWxhc3RpYyBDb21wdXRlIENsb3VkKSIgc3R5bGU9ImlyLnJlZj1jNmQxZTBiOS0wYTEyLTQ2NTQtOGZjNS0xYmQ5ODgyMTU4ZmQ7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZWMyO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TURZMk1qZ2dNQzQxTXprNU5UbElNQzQzTXprNU5qRldNQzQxTVRNeU9UTklNQzQ0TURZMk1qaFdNQzR4T1RNeU9UTklNQzQwT0RZMk1qaFdNQzR5TlRrNU5UbElNQzQwTlRrNU5qRldNQzR4T1RNeU9UTkRNQzQwTlRrNU5qRWdNQzR4T0RZeU1pQXdMalEyTWpjM0lEQXVNVGM1TkRNM0lEQXVORFkzTnpjeElEQXVNVGMwTkRNMlF6QXVORGN5TnpjeUlEQXVNVFk1TkRNMUlEQXVORGM1TlRVMUlEQXVNVFkyTmpJMklEQXVORGcyTmpJNElEQXVNVFkyTmpJMlNEQXVPREEyTmpJNFF6QXVPREV6TnlBd0xqRTJOall5TmlBd0xqZ3lNRFE0TXlBd0xqRTJPVFF6TlNBd0xqZ3lOVFE0TkNBd0xqRTNORFF6TmtNd0xqZ3pNRFE0TlNBd0xqRTNPVFF6TnlBd0xqZ3pNekk1TkNBd0xqRTROakl5SURBdU9ETXpNamswSURBdU1Ua3pNamt6VmpBdU5URXpNamt6UXpBdU9ETXpNamswSURBdU5USXdNelkxSURBdU9ETXdORGcxSURBdU5USTNNVFE0SURBdU9ESTFORGcwSURBdU5UTXlNVFE1UXpBdU9ESXdORGd6SURBdU5UTTNNVFVnTUM0NE1UTTNJREF1TlRNNU9UVTVJREF1T0RBMk5qSTRJREF1TlRNNU9UVTVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXhNekUzSURBdU9ETXpNamswU0RBdU1Ua3pNVGN4UXpBdU1UZzJNRGs0SURBdU9ETXpNamswSURBdU1UYzVNekUxSURBdU9ETXdORGcxSURBdU1UYzBNekUwSURBdU9ESTFORGcwUXpBdU1UWTVNekV6SURBdU9ESXdORGd6SURBdU1UWTJOVEEwSURBdU9ERXpOeUF3TGpFMk5qVXdOQ0F3TGpnd05qWXlOMVl3TGpRNE5qWXlPRU13TGpFMk5qVXdOQ0F3TGpRM09UVTFOU0F3TGpFMk9UTXhNeUF3TGpRM01qYzNNaUF3TGpFM05ETXhOQ0F3TGpRMk56YzNNVU13TGpFM09UTXhOU0F3TGpRMk1qYzNJREF1TVRnMk1EazRJREF1TkRVNU9UWXhJREF1TVRrek1UY3hJREF1TkRVNU9UWXhTREF1TWpVNU9ETTNWakF1TkRnMk5qSTRTREF1TVRrek1UY3hWakF1T0RBMk5qSTNTREF1TlRFek1UZFdNQzQzTXprNU5qRklNQzQxTXprNE16WldNQzQ0TURZMk1qZERNQzQxTXprNE16WWdNQzQ0TVRNM0lEQXVOVE0zTURJM0lEQXVPREl3TkRneklEQXVOVE15TURJMklEQXVPREkxTkRnMFF6QXVOVEkzTURJMUlEQXVPRE13TkRnMUlEQXVOVEl3TWpReUlEQXVPRE16TWprMElEQXVOVEV6TVRjZ01DNDRNek15T1RSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TnpFek1qZzVJREF1TXpjNU9UVTFWakF1TXpVek1qZzRTREF1Tmpjek1qZzVRekF1TmpjeU56UWdNQzR6TkRZek9UZ2dNQzQyTmprM05UUWdNQzR6TXprNU15QXdMalkyTkRnMk55QXdMak16TlRBME0wTXdMalkxT1RrNElEQXVNek13TVRVMklEQXVOalV6TlRFeUlEQXVNekkzTVRjZ01DNDJORFkyTWpJZ01DNHpNalkyTWpGV01DNHlPRFkyTWpGSU1DNDJNVGs1TlRWV01DNHpNalkyTWpGSU1DNDFOems1TlRWV01DNHlPRFkyTWpGSU1DNDFOVE15T0RoV01DNHpNalkyTWpGSU1DNDFNVE15T0RoV01DNHlPRFkyTWpGSU1DNDBPRFkyTWpKV01DNHpNalkyTWpGSU1DNDBORFkyTWpGV01DNHlPRFkyTWpGSU1DNDBNVGs1TlRWV01DNHpNalkyTWpGSU1DNHpOems1TlRWV01DNHlPRFkyTWpGSU1DNHpOVE15T0RoV01DNHpNalkyTWpGRE1DNHpORFl6T1RnZ01DNHpNamN4TnlBd0xqTXpPVGt6SURBdU16TXdNVFUySURBdU16TTFNRFF6SURBdU16TTFNRFF6UXpBdU16TXdNVFUySURBdU16TTVPVE1nTUM0ek1qY3hOeUF3TGpNME5qTTVPQ0F3TGpNeU5qWXlNU0F3TGpNMU16STRPRWd3TGpJNE5qWXlNVll3TGpNM09UazFOVWd3TGpNeU5qWXlNVll3TGpReE9UazFOVWd3TGpJNE5qWXlNVll3TGpRME5qWXlNVWd3TGpNeU5qWXlNVll3TGpRNE5qWXlNa2d3TGpJNE5qWXlNVll3TGpVeE16STRPRWd3TGpNeU5qWXlNVll3TGpVMU16STRPRWd3TGpJNE5qWXlNVll3TGpVM09UazFOVWd3TGpNeU5qWXlNVll3TGpZeE9UazFOVWd3TGpJNE5qWXlNVll3TGpZME5qWXlNa2d3TGpNeU5qWXlNVU13TGpNeU56RTNJREF1TmpVek5URXhJREF1TXpNd01UVTJJREF1TmpVNU9UZ2dNQzR6TXpVd05ETWdNQzQyTmpRNE5qZERNQzR6TXprNU15QXdMalkyT1RjMU5DQXdMak0wTmpNNU9DQXdMalkzTWpjMElEQXVNelV6TWpnNElEQXVOamN6TWpnNVZqQXVOekV6TWpnNVNEQXVNemM1T1RVMVZqQXVOamN6TWpnNVNEQXVOREU1T1RVMVZqQXVOekV6TWpnNVNEQXVORFEyTmpJeFZqQXVOamN6TWpnNVNEQXVORGcyTmpJeVZqQXVOekV6TWpnNVNEQXVOVEV6TWpnNFZqQXVOamN6TWpnNVNEQXVOVFV6TWpnNFZqQXVOekV6TWpnNVNEQXVOVGM1T1RVMVZqQXVOamN6TWpnNVNEQXVOakU1T1RVMVZqQXVOekV6TWpnNVNEQXVOalEyTmpJeVZqQXVOamN6TWpnNVF6QXVOalV6TlRFeUlEQXVOamN5TnpRZ01DNDJOVGs1T0NBd0xqWTJPVGMxTkNBd0xqWTJORGcyTnlBd0xqWTJORGcyTjBNd0xqWTJPVGMxTkNBd0xqWTFPVGs0SURBdU5qY3lOelFnTUM0Mk5UTTFNVEVnTUM0Mk56TXlPRGtnTUM0Mk5EWTJNakpJTUM0M01UTXlPRGxXTUM0Mk1UazVOVFZJTUM0Mk56TXlPRGxXTUM0MU56azVOVFZJTUM0M01UTXlPRGxXTUM0MU5UTXlPRGhJTUM0Mk56TXlPRGxXTUM0MU1UTXlPRGhJTUM0M01UTXlPRGxXTUM0ME9EWTJNakpJTUM0Mk56TXlPRGxXTUM0ME5EWTJNakZJTUM0M01UTXlPRGxXTUM0ME1UazVOVFZJTUM0Mk56TXlPRGxXTUM0ek56azVOVFZJTUM0M01UTXlPRGxhVFRBdU5qUTJOakl5SURBdU5qUTBNakl5UXpBdU5qUTJOakl5SURBdU5qUTBPRFU0SURBdU5qUTJNelk1SURBdU5qUTFORFk1SURBdU5qUTFPVEU1SURBdU5qUTFPVEU1UXpBdU5qUTFORFk1SURBdU5qUTJNelk1SURBdU5qUTBPRFU1SURBdU5qUTJOakl5SURBdU5qUTBNakl5SURBdU5qUTJOakl5U0RBdU16VTFOamc0UXpBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTBORFF4SURBdU5qUTJNelk1SURBdU16VXpPVGt4SURBdU5qUTFPVEU1UXpBdU16VXpOVFF4SURBdU5qUTFORFk1SURBdU16VXpNamc0SURBdU5qUTBPRFU0SURBdU16VXpNamc0SURBdU5qUTBNakl5VmpBdU16VTFOamc0UXpBdU16VXpNamc0SURBdU16VTFNRFV4SURBdU16VXpOVFF4SURBdU16VTBORFF4SURBdU16VXpPVGt4SURBdU16VXpPVGt4UXpBdU16VTBORFF4SURBdU16VXpOVFF4SURBdU16VTFNRFV4SURBdU16VXpNamc0SURBdU16VTFOamc0SURBdU16VXpNamc0U0RBdU5qUTBNakl5UXpBdU5qUTBPRFU1SURBdU16VXpNamc0SURBdU5qUTFORFk1SURBdU16VXpOVFF4SURBdU5qUTFPVEU1SURBdU16VXpPVGt4UXpBdU5qUTJNelk1SURBdU16VTBORFF4SURBdU5qUTJOakl5SURBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTFOamc0VmpBdU5qUTBNakl5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZaejRtSTNoaE96d3ZaejRtSTNoaE96eGtaV1p6UGlZamVHRTdQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p3WVdsdWREQmZiR2x1WldGeUlpQjRNVDBpTFRBdU1qQTNNaUlnZVRFOUlqRXVNakEzTWlJZ2VESTlJakV1TWpBM01EY2lJSGt5UFNJdE1DNHlNRGN3TmpjaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajRtSTNoaE96eHpkRzl3SUhOMGIzQXRZMjlzYjNJOUlpTkRPRFV4TVVJaUx6NG1JM2hoT3p4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUkwWkdPVGt3TUNJdlBpWWplR0U3UEM5c2FXNWxZWEpIY21Ga2FXVnVkRDRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakVpSUdobGFXZG9kRDBpTVNJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZZMnhwY0ZCaGRHZytKaU40WVRzOEwyUmxabk0rSmlONFlUczhMM04yWno0PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiIHBhcmVudD0iMTciPgogICAgICA8bXhHZW9tZXRyeSB4PSIxMDEiIHk9IjI2IiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIyMyIgdmFsdWU9IkFXUyBSRFMgKFJlbGF0aW9uYWwgRGF0YWJhc2UgU2VydmljZSkiIHN0eWxlPSJpci5yZWY9ZTAxZGRjNjAtNDgxNi00YTFiLThlY2UtYzIwNWEyODNkZjZkO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXJkcztpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQRzFoYzJzZ2FXUTlJbTFoYzJzd0lpQnRZWE5yTFhSNWNHVTlJbUZzY0doaElpQnRZWE5yVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElpQjRQU0l3SWlCNVBTSXdJaUIzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWo0bUkzaGhPenhqYVhKamJHVWdZM2c5SWpBdU5TSWdZM2s5SWpBdU5TSWdjajBpTUM0MUlpQm1hV3hzUFNKaWJHRmpheUl2UGlZamVHRTdQQzl0WVhOclBpWWplR0U3UEdjZ2JXRnphejBpZFhKc0tDTnRZWE5yTUNraVBpWWplR0U3UEdjZ1kyeHBjQzF3WVhSb1BTSjFjbXdvSTJOc2FYQXdLU0krSmlONFlUczhjR0YwYUNCa1BTSk5NU0F3U0RCV01VZ3hWakJhSWlCbWFXeHNQU0oxY213b0kzQmhhVzUwTUY5c2FXNWxZWElwSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0Mk5EWXdNRE1nTUM0ek56WTBOemxETUM0Mk5EWXdNRE1nTUM0ek16YzRNVE1nTUM0MU56QXhNemNnTUM0ek1UazVORFlnTUM0ME9Ua3pNemNnTUM0ek1UazVORFpETUM0ME1qZzFNemNnTUM0ek1UazVORFlnTUM0ek5USTJOeUF3TGpNek56Z3hNeUF3TGpNMU1qWTNJREF1TXpjMk5EYzVRekF1TXpVeU5qRXlJREF1TXpjNE5ERXpJREF1TXpVeU9ETTNJREF1TXpnd016UTBJREF1TXpVek16TTNJREF1TXpneU1qRXpWakF1TmpJeU9EYzVRekF1TXpVeU5qY2dNQzQyTmpJNE56a2dNQzQwTWpnMk55QXdMalkzT1RrME5TQXdMalV3TURBd015QXdMalkzT1RrME5VTXdMalUzTVRNek55QXdMalkzT1RrME5TQXdMalkwTmpZM0lEQXVOall5TXpRMUlEQXVOalEyTmpjZ01DNDJNak0yTnpsV01DNHpOelkwTnpsSU1DNDJORFl3TUROYVRUQXVORGs1TmpBeklEQXVNelEyTnpRMlF6QXVOVGMzTXpNM0lEQXVNelEyTnpRMklEQXVOakU1TmpBeklEQXVNelkzT1RRMklEQXVOakU1TmpBeklEQXVNemMyTmpFelF6QXVOakU1TmpBeklEQXVNemcxTWpjNUlEQXVOVGMzTmpBeklEQXVOREEyTkRjNUlEQXVORGs1TmpBeklEQXVOREEyTkRjNVF6QXVOREl4TmpBeklEQXVOREEyTkRjNUlEQXVNemM1TmpBeklEQXVNemcxTkRFeklEQXVNemM1TmpBeklEQXVNemMyTmpFelF6QXVNemM1TmpBeklEQXVNelkzT0RFeklEQXVOREl4T0RjZ01DNHpORFkzTkRZZ01DNDBPVGsyTURNZ01DNHpORFkzTkRaYVRUQXVOakU1TmpBeklEQXVOakl6T0RFeVF6QXVOakU1TmpBeklEQXVOak15TXpRMUlEQXVOVGMzTkRjZ01DNDJOVE0wTVRJZ01DNDBPVGsyTURNZ01DNDJOVE0wTVRKRE1DNDBNakUzTXpjZ01DNDJOVE0wTVRJZ01DNHpOemsyTURNZ01DNDJNekl6TkRVZ01DNHpOemsyTURNZ01DNDJNak00TVRKV01DNDFPREUyTnpsRE1DNDBNRGMzTXpjZ01DNDFPVGN3TVRJZ01DNDBOVFE1TXpjZ01DNDJNRFF6TkRVZ01DNDBPVGsyTURNZ01DNDJNRFF6TkRWRE1DNDFORFF5TnlBd0xqWXdORE0wTlNBd0xqVTVNVEEzSURBdU5UazNNVFExSURBdU5qRTVOakF6SURBdU5UZ3lNRGM1VmpBdU5qSXpPREV5V2swd0xqWXhPVFl3TXlBd0xqVTBOemswTmtNd0xqWXhPVFl3TXlBd0xqVTFOalEzT1NBd0xqVTNOell3TXlBd0xqVTNOemd4TWlBd0xqUTVPVFl3TXlBd0xqVTNOemd4TWtNd0xqUXlNVFl3TXlBd0xqVTNOemd4TWlBd0xqTTNPVFl3TXlBd0xqVTFOalEzT1NBd0xqTTNPVFl3TXlBd0xqVTBOemswTmtnd0xqTTRNREF3TTFZd0xqUTVOekF4TWtNd0xqUXdPREV6TnlBd0xqVXhNakl4TWlBd0xqUTFOVE16TnlBd0xqVXhPVFUwTmlBd0xqVXdNREF3TXlBd0xqVXhPVFUwTmtNd0xqVTBORFkzSURBdU5URTVOVFEySURBdU5Ua3hORGNnTUM0MU1USXpORFlnTUM0Mk1qQXdNRE1nTUM0ME9UY3lOemxNTUM0Mk1UazJNRE1nTUM0MU5EYzVORFphVFRBdU5qRTVOakF6SURBdU5EWXpNREV6UXpBdU5qRTVOakF6SURBdU5EY3hOamM1SURBdU5UYzNOakF6SURBdU5Ea3pNREV5SURBdU5EazVOakF6SURBdU5Ea3pNREV5UXpBdU5ESXhOakF6SURBdU5Ea3pNREV5SURBdU16YzVOakF6SURBdU5EY3hOamM1SURBdU16YzVOakF6SURBdU5EWXpNREV6U0RBdU16Z3dNREF6VmpBdU5ERXhNREV6UXpBdU5EQTROREF6SURBdU5ESTJNRGM1SURBdU5EVTFNRGNnTUM0ME16TXdNVE1nTUM0MU1EQXdNRE1nTUM0ME16TXdNVE5ETUM0MU5EUTVNemNnTUM0ME16TXdNVE1nTUM0MU9USXhNemNnTUM0ME1qVTRNVE1nTUM0Mk1qQXdNRE1nTUM0ME1UQTBOemxNTUM0Mk1UazJNRE1nTUM0ME5qTXdNVE5hSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVNakV5TURreklEQXVPREEyT0Vnd0xqSTVPVGsxT1ZZd0xqZ3pNelEyTmtnd0xqRTNPVGsxT1VNd0xqRTNOalF5TXlBd0xqZ3pNelEyTmlBd0xqRTNNekF6TWlBd0xqZ3pNakEyTVNBd0xqRTNNRFV6TVNBd0xqZ3lPVFUyTVVNd0xqRTJPREF6TVNBd0xqZ3lOekEyTVNBd0xqRTJOall5TmlBd0xqZ3lNelkyT1NBd0xqRTJOall5TmlBd0xqZ3lNREV6TTFZd0xqY3dNREV6TTBnd0xqRTVNekk1TTFZd0xqYzROemN6TTB3d0xqSTVNekk1TXlBd0xqWTROemcyTmt3d0xqTXhNVGsxT1NBd0xqY3dOalkyTmt3d0xqSXhNakE1TXlBd0xqZ3dOamhhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVPRE16TXpNeElEQXVOekF3TVRNeFZqQXVPREl3TVRNeFF6QXVPRE16TXpNeElEQXVPREl6TmpZM0lEQXVPRE14T1RJMklEQXVPREkzTURVNUlEQXVPREk1TkRJMklEQXVPREk1TlRVNVF6QXVPREkyT1RJMUlEQXVPRE15TURZZ01DNDRNak0xTXpRZ01DNDRNek0wTmpRZ01DNDRNVGs1T1RnZ01DNDRNek0wTmpSSU1DNDJPVGs1T1RoV01DNDRNRFkzT1RoSU1DNDNPRGM0TmpSTU1DNDJPRGt6TXpFZ01DNDNNRGM1T1RoTU1DNDNNRGd4TXpFZ01DNDJPRGt6TXpGTU1DNDRNRFkyTmpRZ01DNDNPRGMzTXpGV01DNDNNREF4TXpGSU1DNDRNek16TXpGYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1T0RNek16TXhJREF1TVRnd01qQTBWakF1TXpBd01qQTBTREF1T0RBMk5qWTBWakF1TWpFeU1qQTBUREF1TnpBNE1UTXhJREF1TXpFd056TTRUREF1TmpnNU16TXhJREF1TWpreE9UTTRUREF1TnpnM056TXhJREF1TVRrek5UTTNTREF1TmprNU9UazRWakF1TVRZMk9EZElNQzQ0TVRrNU9UaERNQzQ0TWpNMU16UWdNQzR4TmpZNE55QXdMamd5TmpreU5TQXdMakUyT0RJM05TQXdMamd5T1RReU5pQXdMakUzTURjM05VTXdMamd6TVRreU5pQXdMakUzTXpJM05pQXdMamd6TXpNek1TQXdMakUzTmpZMk55QXdMamd6TXpNek1TQXdMakU0TURJd05Gb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0ek1URTVOVGtnTUM0eU9UTXpNRFJNTUM0eU9UTXlPVE1nTUM0ek1URTVOekZNTUM0eE9UTXlPVE1nTUM0eU1USXhNRFJXTUM0eU9UazRNemRJTUM0eE5qWTJNalpXTUM0eE56azRNemRETUM0eE5qWTJNallnTUM0eE56WXpNREVnTUM0eE5qZ3dNekVnTUM0eE56STVNU0F3TGpFM01EVXpNU0F3TGpFM01EUXdPVU13TGpFM016QXpNaUF3TGpFMk56a3dPU0F3TGpFM05qUXlNeUF3TGpFMk5qVXdOQ0F3TGpFM09UazFPU0F3TGpFMk5qVXdORWd3TGpJNU9UazFPVll3TGpFNU16RTNNVWd3TGpJeE1qQTVNMHd3TGpNeE1UazFPU0F3TGpJNU16TXdORm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNHlPVFUwT1RFZ01DNDJNVGsxTURORE1DNHlNVFF3TWpVZ01DNDFPVEF4TnlBd0xqRTJOek0xT0NBd0xqVTBOVE0yT1NBd0xqRTJOek0xT0NBd0xqUTVOamN3TWtNd0xqRTJOek0xT0NBd0xqUTBPREF6TlNBd0xqSXhOREF5TlNBd0xqUXdNek0yT0NBd0xqSTVOVFE1TVNBd0xqTTNNemt3TVV3d0xqTXdORFUxTnlBd0xqTTVPRGsyT0VNd0xqSXpOVE0xT0NBd0xqUXlNemt3TWlBd0xqRTVOREF5TlNBd0xqUTJNRFF6TlNBd0xqRTVOREF5TlNBd0xqUTVOamN3TWtNd0xqRTVOREF5TlNBd0xqVXpNamsyT1NBd0xqSXpOVE0xT0NBd0xqVTJPVFV3TXlBd0xqTXdORFUxTnlBd0xqVTVORFF6TjB3d0xqSTVOVFE1TVNBd0xqWXhPVFV3TTFvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyT1RjeE16SWdNQzQyTWpJME5Fd3dMalk0T0RVNU9TQXdMalU1TnpFd04wTXdMamMyTWpVNU9TQXdMalUzTWpFM015QXdMamd3Tmpjek1pQXdMalV6TkRVM015QXdMamd3Tmpjek1pQXdMalE1Tmpjd05rTXdMamd3Tmpjek1pQXdMalExT0Rnek9TQXdMamMyTWpVNU9TQXdMalF5TVRJek9TQXdMalk0T0RVNU9TQXdMak01TmpFM01rd3dMalk1TnpFek1pQXdMak0zTURrM01rTXdMamM0TXpZMk5TQXdMalF3TURBek9TQXdMamd6TXpNNU9TQXdMalEwTmpFM01pQXdMamd6TXpNNU9TQXdMalE1Tmpjd05rTXdMamd6TXpNNU9TQXdMalUwTnpJMElEQXVOemd6TmpZMUlEQXVOVGt6TVRBM0lEQXVOamszTVRNeUlEQXVOakl5TkRSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzluUGlZamVHRTdQQzluUGlZamVHRTdQR1JsWm5NK0ppTjRZVHM4YkdsdVpXRnlSM0poWkdsbGJuUWdhV1E5SW5CaGFXNTBNRjlzYVc1bFlYSWlJSGd4UFNJdE1DNHlNRGN3TmpjaUlIa3hQU0l4TGpJd056QTNJaUI0TWowaU1TNHlNRGN5SWlCNU1qMGlMVEF1TWpBM01pSWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpUGlZamVHRTdQSE4wYjNBZ2MzUnZjQzFqYjJ4dmNqMGlJekpGTWpkQlJDSXZQaVlqZUdFN1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpOVEkzUmtaR0lpOCtKaU40WVRzOEwyeHBibVZoY2tkeVlXUnBaVzUwUGlZamVHRTdQR05zYVhCUVlYUm9JR2xrUFNKamJHbHdNQ0krSmlONFlUczhjbVZqZENCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzlqYkdsd1VHRjBhRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE3Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMjYxIiB5PSIyOSIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMjUiIHZhbHVlPSJBV1MgRUZTIChFbGFzdGljIEZpbGUgU3lzdGVtKSIgc3R5bGU9ImlyLnJlZj02ZjU5YzJlZS01ZjUyLTQ1OWMtOTcwMS0wODc4ZTEyZDVhNDE7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZWxhc3RpYy1maWxlLXN5c3RlbTtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQRzFoYzJzZ2FXUTlJbTFoYzJzd0lpQnRZWE5yTFhSNWNHVTlJbUZzY0doaElpQnRZWE5yVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElpQjRQU0l3SWlCNVBTSXdJaUIzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWo0bUkzaGhPenhqYVhKamJHVWdZM2c5SWpBdU5TSWdZM2s5SWpBdU5TSWdjajBpTUM0MUlpQm1hV3hzUFNKaWJHRmpheUl2UGlZamVHRTdQQzl0WVhOclBpWWplR0U3UEdjZ2JXRnphejBpZFhKc0tDTnRZWE5yTUNraVBpWWplR0U3UEdjZ1kyeHBjQzF3WVhSb1BTSjFjbXdvSTJOc2FYQXdLU0krSmlONFlUczhjR0YwYUNCa1BTSk5NU0F3U0RCV01DNDVPVGs1T1RWSU1WWXdXaUlnWm1sc2JEMGlkWEpzS0NOd1lXbHVkREJmYkdsdVpXRnlLU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TVRrek5ERTFJREF1TWpFeU1Ea3lUREF1TWprd05qRTFJREF1TXpBNU5ESTFUREF1TXpBNU5UUTRJREF1TWprd05Ea3lUREF1TWpFeU1qRTFJREF1TVRrek1qa3pTREF1TWpnMk56UTRWakF1TVRZMk5qSTJTREF1TVRnd01EZ3hRekF1TVRjMk5UUTFJREF1TVRZMk5qSTJJREF1TVRjek1UVTBJREF1TVRZNE1ETXhJREF1TVRjd05qVXpJREF1TVRjd05UTXhRekF1TVRZNE1UVXpJREF1TVRjek1ETXlJREF1TVRZMk56UTRJREF1TVRjMk5ESXpJREF1TVRZMk56UTRJREF1TVRjNU9UVTVWakF1TWpnMk5qSTFTREF1TVRrek5ERTFWakF1TWpFeU1Ea3lXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqZ3hPVGc1TmlBd0xqRTJOall5Tmtnd0xqY3hNekl6VmpBdU1Ua3pNamt6U0RBdU56ZzNOell6VERBdU5qa3dORE1nTUM0eU9UQTBPVEpNTUM0M01Ea3pOak1nTUM0ek1EazBNalZNTUM0NE1EWTFOak1nTUM0eU1USXdPVEpXTUM0eU9EWTJNalZJTUM0NE16TXlNMVl3TGpFM09UazFPVU13TGpnek16SXpJREF1TVRjMk5ESXpJREF1T0RNeE9ESTFJREF1TVRjek1ETXlJREF1T0RJNU16STBJREF1TVRjd05UTXhRekF1T0RJMk9ESTBJREF1TVRZNE1ETXhJREF1T0RJek5ETXpJREF1TVRZMk5qSTJJREF1T0RFNU9EazJJREF1TVRZMk5qSTJXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqSTVNRFl4TlNBd0xqWTVNRFUxTWt3d0xqRTVNelF4TlNBd0xqYzROemc0TlZZd0xqY3hNek0xTWtnd0xqRTJOamMwT0ZZd0xqZ3lNREF4T0VNd0xqRTJOamMwT0NBd0xqZ3lNelUxTkNBd0xqRTJPREUxTXlBd0xqZ3lOamswTlNBd0xqRTNNRFkxTXlBd0xqZ3lPVFEwTmtNd0xqRTNNekUxTkNBd0xqZ3pNVGswTmlBd0xqRTNOalUwTlNBd0xqZ3pNek0xTVNBd0xqRTRNREE0TVNBd0xqZ3pNek0xTVVnd0xqSTROamMwT0ZZd0xqZ3dOalk0TkVnd0xqSXhNakl4TlV3d0xqTXdPVFUwT0NBd0xqY3dPVFE0TlV3d0xqSTVNRFl4TlNBd0xqWTVNRFUxTWxvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TURZMU5qTWdNQzQzT0RjNE9EVk1NQzQzTURrek5qTWdNQzQyT1RBMU5USk1NQzQyT1RBME15QXdMamN3T1RRNE5Vd3dMamM0TnpjMk15QXdMamd3TmpZNE5FZ3dMamN4TXpJelZqQXVPRE16TXpVeFNEQXVPREU1T0RrMlF6QXVPREl6TkRNeklEQXVPRE16TXpVeElEQXVPREkyT0RJMElEQXVPRE14T1RRMklEQXVPREk1TXpJMElEQXVPREk1TkRRMlF6QXVPRE14T0RJMUlEQXVPREkyT1RRMUlEQXVPRE16TWpNZ01DNDRNak0xTlRRZ01DNDRNek15TXlBd0xqZ3lNREF4T0ZZd0xqY3hNek0xTWtnd0xqZ3dOalUyTTFZd0xqYzROemc0TlZvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzR6T1RRM016TWdNQzR6TURrNU1UWkRNQzQwTVRnek1UY2dNQzR5T1RrME5URWdNQzQwTkRRMU5UUWdNQzR5T1RZMU1USWdNQzQwTmprNE5qa2dNQzR6TURFME9UbERNQzQwT1RVeE9EUWdNQzR6TURZME9EVWdNQzQxTVRnek5EWWdNQzR6TVRreE5UVWdNQzQxTXpZeUlEQXVNek0zTnpneVF6QXVOVFV5TVRBMklEQXVNelV6T1RReklEQXVOVFkwTVRReElEQXVNemN6TlNBd0xqVTNNVFFnTUM0ek9UUTVPREpETUM0MU56SXlNVGdnTUM0ek9UY3lORElnTUM0MU56TTJNeklnTUM0ek9Ua3lNemtnTUM0MU56VTBPVElnTUM0ME1EQTNOakpETUM0MU56Y3pOVElnTUM0ME1ESXlPRFFnTUM0MU56azFPRGtnTUM0ME1ETXlOelVnTUM0MU9ERTVOallnTUM0ME1ETTJNekZETUM0MU9EUXpORFFnTUM0ME1ETTVPRFlnTUM0MU9EWTNOek1nTUM0ME1ETTJPVElnTUM0MU9EZzVPVGNnTUM0ME1ESTNPRU13TGpVNU1USXlNU0F3TGpRd01UZzJOeUF3TGpVNU16RTFOeUF3TGpRd01ETTNNU0F3TGpVNU5EWWdNQzR6T1RnME5EbERNQzQxT1RnMk5EZ2dNQzR6T1RJM09Ua2dNQzQyTURNNU5qY2dNQzR6T0RneE56a2dNQzQyTVRBeE1qY2dNQzR6T0RRNU5rTXdMall4TmpJNE55QXdMak00TVRjME1TQXdMall5TXpFeE55QXdMak00TURBeE15QXdMall6TURBMk5pQXdMak0zT1RreE5VTXdMalkxTURZZ01DNHpOems1TVRVZ01DNDJOelUwSURBdU16azFOalE1SURBdU5qYzNPVE16SURBdU5ETTVPVEUxUXpBdU5qYzRNVEVnTUM0ME5ESTROU0F3TGpZM09USTFNaUF3TGpRME5UWTBOQ0F3TGpZNE1URTRNU0F3TGpRME56ZzJNa013TGpZNE16RXhJREF1TkRVd01EZ2dNQzQyT0RVM01UZ2dNQzQwTlRFMU9Ua2dNQzQyT0RnMklEQXVORFV5TVRneVF6QXVOelF3TkRZMklEQXVORFl6TVRFMUlEQXVOelkyTnpNeklEQXVORGt5TVRneUlEQXVOelkyTnpNeklEQXVOVE0zTlRFMVF6QXVOelkyTnpNeklEQXVOVGd3TkRRNElEQXVOelEzT1RNeklEQXVOakExT1RFMElEQXVOekE1TVRNeklEQXVOakUxTXpneFREQXVOekUxTkNBd0xqWTBNVEkwT0VNd0xqYzJOVFkyTmlBd0xqWXlPVEV4TkNBd0xqYzVNelFnTUM0MU9USXhPREVnTUM0M09UTTBJREF1TlRNM05URTFRekF1Tnprek5DQXdMalE0TWpnME9DQXdMamMyTVRZMk5pQXdMalEwTkRFNE1pQXdMamN3TXpZMk5pQXdMalF5T0RNeE5VTXdMalk1TmpnMk5pQXdMak0zTmpVNE1pQXdMalkyTWpZZ01DNHpOVE15TkRrZ01DNDJNekF3TmpZZ01DNHpOVE15TkRsRE1DNDJNVFV5TVNBd0xqTTFNekV4TkNBd0xqWXdNRGN4SURBdU16VTNOemt5SURBdU5UZzROek16SURBdU16WTJOVGd5UXpBdU5UZ3dNemMzSURBdU16UTROalUySURBdU5UWTRPVFl5SURBdU16TXlNekl6SURBdU5UVTFJREF1TXpFNE16RTJRekF1TlRNek16YzJJREF1TWprMk1ERTVJREF1TlRBMU5EWXhJREF1TWpnd09EVTBJREF1TkRjME9UZzNJREF1TWpjME9EVkRNQzQwTkRRMU1UTWdNQzR5TmpnNE5EWWdNQzQwTVRJNU16SWdNQzR5TnpJeU9EZ2dNQzR6T0RRME5qWWdNQzR5T0RRM01UWkRNQzR6TlRnd01URWdNQzR5T1RjeE5Ua2dNQzR6TXpVMU5ESWdNQzR6TVRZM01qRWdNQzR6TVRrMU56WWdNQzR6TkRFeU1USkRNQzR6TURNMk1TQXdMak0yTlRjd015QXdMakk1TkRjM055QXdMak01TkRFMU5TQXdMakk1TkRBMk5pQXdMalF5TXpNNE1rTXdMakk1TkRBMk5pQXdMalF5TlRjNE1pQXdMakk1TkRBMk5pQXdMalF5T0RFNE1pQXdMakk1TkRBMk5pQXdMalF6TURjeE5VTXdMakkzTVRnME9DQXdMalF6TnpjNE1TQXdMakkxTWpVMU5pQXdMalExTVRrek15QXdMakl6T1RFME15QXdMalEzTVRBd05FTXdMakl5TlRjek1TQXdMalE1TURBM05TQXdMakl4T0Rrek5pQXdMalV4TXpBeE5TQXdMakl4T1RnZ01DNDFNell6TVRWRE1DNHlNVGs0SURBdU5UTTRPRFE0SURBdU1qRTVPQ0F3TGpVME1UTTRNU0F3TGpJeE9UZ2dNQzQxTkRNNU1UVkRNQzR5TWpFeUlEQXVOVFkxT0RnNUlEQXVNakk1TVRNeUlEQXVOVGcyT1RRMElEQXVNalF5TlRjNElEQXVOakEwTXpoRE1DNHlOVFl3TWpNZ01DNDJNakU0TVRjZ01DNHlOelF6TnlBd0xqWXpORGcwSURBdU1qazFNalkySURBdU5qUXhOemd4VERBdU16QTBNRFkySURBdU5qRTJOVGd4UXpBdU1qZzRNVFV4SURBdU5qRXhNemcxSURBdU1qYzBNVFV5SURBdU5qQXhOVFV4SURBdU1qWXpPRFkxSURBdU5UZzRNelF5UXpBdU1qVXpOVGM0SURBdU5UYzFNVE16SURBdU1qUTNORGN6SURBdU5UVTVNVFV4SURBdU1qUTJNek16SURBdU5UUXlORFE0UXpBdU1qUTJNek16SURBdU5UUXdORFE0SURBdU1qUTJNek16SURBdU5UTTRORFE0SURBdU1qUTJNek16SURBdU5UTTJNekUxUXpBdU1qUTFNekF5SURBdU5URTJPRGsySURBdU1qVXhNemM0SURBdU5EazNOelkySURBdU1qWXpOREkzSURBdU5EZ3lOVEF6UXpBdU1qYzFORGMySURBdU5EWTNNak01SURBdU1qa3lOamN5SURBdU5EVTJPRGczSURBdU16RXhPQ0F3TGpRMU16TTRNa013TGpNeE5EY3pNeUF3TGpRMU1qWXlOaUF3TGpNeE56TXlNaUF3TGpRMU1EZzVOQ0F3TGpNeE9URTBJREF1TkRRNE5EZERNQzR6TWpBNU5UY2dNQzQwTkRZd05EY2dNQzR6TWpFNE9UWWdNQzQwTkRNd056WWdNQzR6TWpFNElEQXVORFF3TURRNVF6QXVNekl4TVRVeUlEQXVORE0wT0RjeklEQXVNekl3TnprMklEQXVOREk1TmpZMElEQXVNekl3TnpNeklEQXVOREkwTkRRNVF6QXVNekl4TXpVM0lEQXVOREF3TkRBeUlEQXVNekk0TlRreklEQXVNemMyT1RreklEQXVNelF4TmpRM0lEQXVNelUyTnpnNVF6QXVNelUwTnpBeElEQXVNek0yTlRnMUlEQXVNemN6TURZNElEQXVNekl3TXpZM0lEQXVNemswTnpNeklEQXVNekE1T1RFMldpSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpjeE1qWTJJREF1TlRjd09UWXhRekF1TnpFek16SXhJREF1TlRZNE9UVTFJREF1TnpFek5EazNJREF1TlRZMk9ESXlJREF1TnpFek1UY3lJREF1TlRZME56TTJRekF1TnpFeU9EUTRJREF1TlRZeU5qVWdNQzQzTVRJd016TWdNQzQxTmpBMk55QXdMamN4TURjNU5DQXdMalUxT0RrMk1VTXdMamN3T1RVMk55QXdMalUxTnpJek55QXdMamN3TnprME55QXdMalUxTlRnek1TQXdMamN3TmpBMk9TQXdMalUxTkRnMU4wTXdMamN3TkRFNU1TQXdMalUxTXpnNE15QXdMamN3TWpFd09TQXdMalUxTXpNM0lEQXVOams1T1RreklEQXVOVFV6TXpZeFNEQXVOalU1T1RrelF6QXVOalU0TlRnZ01DNDFOREU0TnpRZ01DNDJOVE16TVRZZ01DNDFNekV5TURVZ01DNDJORFV3TmlBd0xqVXlNekE1TkVNd0xqWTBNVGczTkNBd0xqVXhPVGc1TVNBd0xqWXpPREEyTlNBd0xqVXhOek0zTlNBd0xqWXpNemcyT0NBd0xqVXhOVGRETUM0Mk1qazJOeklnTUM0MU1UUXdNallnTUM0Mk1qVXhOellnTUM0MU1UTXlNeUF3TGpZeU1EWTJJREF1TlRFek16WXhTREF1TkRnek5Ua3pRekF1TkRnd01USTNJREF1TlRBeU5UWXhJREF1TkRjek5EWWdNQzQwT0RnNU5qRWdNQzQwTmpNeE9UUWdNQzQwT0RZMk9UUklNQzQwTmpBMk5rZ3dMalF3TnpNeU4wTXdMak01TlRRMklEQXVORGcyTmprMElEQXVNemczTlRreklEQXVOVEF4TmpJNElEQXVNemd6TlRreklEQXVOVEV6TXpZeFNEQXVNelkzTkRaRE1DNHpOakk0TWpjZ01DNDFNVE14TlRnZ01DNHpOVGd5TURFZ01DNDFNVE01TURVZ01DNHpOVE00TmpnZ01DNDFNVFUxTlRaRE1DNHpORGsxTXpRZ01DNDFNVGN5TURjZ01DNHpORFUxT0RRZ01DNDFNVGszTWpjZ01DNHpOREl5TmlBd0xqVXlNamsyTVVNd0xqTXpOek15T1NBd0xqVXlOemM1TkNBd0xqTXpNelF4SURBdU5UTXpOVFl4SURBdU16TXdOek15SURBdU5UTTVPVEkxUXpBdU16STRNRFV6SURBdU5UUTJNamc1SURBdU16STJOalk1SURBdU5UVXpNVEl6SURBdU16STJOallnTUM0MU5qQXdNamRXTUM0M01qWTJPVE5ETUM0ek1qWTJOaUF3TGpjek1ESXlPU0F3TGpNeU9EQTJOU0F3TGpjek16WXlNU0F3TGpNek1EVTJOU0F3TGpjek5qRXlNVU13TGpNek16QTJOaUF3TGpjek9EWXlNaUF3TGpNek5qUTFOeUF3TGpjME1EQXlOaUF3TGpNek9UazVNeUF3TGpjME1EQXlOa2d3TGpZME5qWTJRekF1TmpRNU5EUTVJREF1TnpNNU9UazJJREF1TmpVeU1UVTRJREF1TnpNNU1Ea3pJREF1TmpVME5EQTNJREF1TnpNM05EUXlRekF1TmpVMk5qVTFJREF1TnpNMU56a3lJREF1TmpVNE16STVJREF1TnpNek5EYzRJREF1TmpVNU1Ua3pJREF1TnpNd09ESTJUREF1TnpFeU5qWWdNQzQxTnpBNU5qRmFUVEF1TmpneE5EWWdNQzQxT0RBd01qZE1NQzQyTlRrNU9UTWdNQzQyTkRRMU5sWXdMalU0TURBeU4wZ3dMalk0TVRRMldrMHdMall6TXpNeU55QXdMamN4TXpNMlNEQXVNelV6TXpJM1ZqQXVOVFl3TURJM1F6QXVNelV6TVRnMUlEQXVOVFV6TlRVNElEQXVNelUxTlRjNElEQXVOVFEzTWprZ01DNHpOVGs1T1RNZ01DNDFOREkxTmpGRE1DNHpOakEzTmpRZ01DNDFOREUzTVNBd0xqTTJNVGN4TkNBd0xqVTBNVEEwTVNBd0xqTTJNamMzTlNBd0xqVTBNRFl3TTBNd0xqTTJNemd6TlNBd0xqVTBNREUyTlNBd0xqTTJORGs0TVNBd0xqVXpPVGsyT0NBd0xqTTJOakV5TnlBd0xqVTBNREF5TjBnd0xqTTVNamM1TTBNd0xqTTVOakU1TlNBd0xqVTBNREF6TkNBd0xqTTVPVFEzTVNBd0xqVXpPRGN6T1NBd0xqUXdNVGsxSURBdU5UTTJOREE1UXpBdU5EQTBOREk0SURBdU5UTTBNRGM1SURBdU5EQTFPVEl6SURBdU5UTXdPRGtnTUM0ME1EWXhNamNnTUM0MU1qYzBPVFJETUM0ME1EYzBORFFnTUM0MU1qSTFOak1nTUM0ME1Ea3pOeUF3TGpVeE56Z3hOaUF3TGpReE1UZzJJREF1TlRFek16WXhTREF1TkRVME5qWkRNQzQwTlRZM09EZ2dNQzQxTVRjMk5ERWdNQzQwTlRnMU1qa2dNQzQxTWpJeE1ETWdNQzQwTlRrNE5pQXdMalV5TmpZNU5FTXdMalExT1RnMklEQXVOVE13TWpNZ01DNDBOakV5TmpVZ01DNDFNek0yTWpJZ01DNDBOak0zTmpVZ01DNDFNell4TWpKRE1DNDBOall5TmpZZ01DNDFNemcyTWpNZ01DNDBOamsyTlRjZ01DNDFOREF3TWpjZ01DNDBOek14T1RRZ01DNDFOREF3TWpkSU1DNDJNakE1TWpkRE1DNDJNakU1TWpJZ01DNDFOREF3TmpjZ01DNDJNakk0T1RjZ01DNDFOREF6TVRNZ01DNDJNak0zT1RJZ01DNDFOREEzTkRsRE1DNDJNalEyT0RjZ01DNDFOREV4T0RVZ01DNDJNalUwT0RJZ01DNDFOREU0TURJZ01DNDJNall4TWpjZ01DNDFOREkxTmpGRE1DNDJNekEzTVRNZ01DNDFORGN5TWpFZ01DNDJNek15T1RjZ01DNDFOVE0wT0RrZ01DNDJNek16TWpjZ01DNDFOakF3TWpkV01DNDNNVE16TmxvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhMMmMrSmlONFlUczhMMmMrSmlONFlUczhaR1ZtY3o0bUkzaGhPenhzYVc1bFlYSkhjbUZrYVdWdWRDQnBaRDBpY0dGcGJuUXdYMnhwYm1WaGNpSWdlREU5SWkwd0xqSXdOekEyTnlJZ2VURTlJakV1TWpBM01EWWlJSGd5UFNJeExqSXdOekEySWlCNU1qMGlMVEF1TWpBM01EY3lJaUJuY21Ga2FXVnVkRlZ1YVhSelBTSjFjMlZ5VTNCaFkyVlBibFZ6WlNJK0ppTjRZVHM4YzNSdmNDQnpkRzl3TFdOdmJHOXlQU0lqTVVJMk5qQkdJaTgrSmlONFlUczhjM1J2Y0NCdlptWnpaWFE5SWpFaUlITjBiM0F0WTI5c2IzSTlJaU0yUTBGRk0wVWlMejRtSTNoaE96d3ZiR2x1WldGeVIzSmhaR2xsYm5RK0ppTjRZVHM4WTJ4cGNGQmhkR2dnYVdROUltTnNhWEF3SWo0bUkzaGhPenh5WldOMElIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqQXVPVGs1T1RrMUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzlqYkdsd1VHRjBhRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE0Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMTk4IiB5PSIyMDMiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjI2IiB2YWx1ZT0iQVdTIFMzIChTaW1wbGUgU3RvcmFnZSBTZXJ2aWNlKSIgc3R5bGU9ImlyLnJlZj04NzgzMjk2Ny01ZGQ0LTQ5MjEtOTFhZS1jMjUyNGNjNDJiYjA7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9czM7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y0dGMGFDQmtQU0pOTVNBd1NEQldNQzQ1T1RrNU9UVklNVll3V2lJZ1ptbHNiRDBpZFhKc0tDTndZV2x1ZERCZmJHbHVaV0Z5S1NJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU9ERTVNRFV4SURBdU5UTTBNVGc0UXpBdU9ERTFNVGcwSURBdU5URXpNalUxSURBdU56a3hORFV4SURBdU5EazRORFUxSURBdU56YzFNVGcwSURBdU5EZzNPVEl5UXpBdU56WTVPVGcwSURBdU5EZzBOVGc1SURBdU56VTFOekU0SURBdU5EYzVNalUxSURBdU56VTBOVEU0SURBdU5EYzBOVGc1UXpBdU56VTBORE0ySURBdU5EY3hNalVnTUM0M05UUTRPRFlnTUM0ME5qYzVNVGtnTUM0M05UVTROVEVnTUM0ME5qUTNNakpNTUM0M05qa3hPRFFnTUM0ek5qZzROVFpETUM0M056TXdOVEVnTUM0ek5EQTNNaklnTUM0M056WTNPRFFnTUM0ek1USTFPRGtnTUM0M09EQTJOVEVnTUM0eU9EUTBOVFpETUM0M09EUXhNVGdnTUM0eU5UZzFPRGtnTUM0M056RTNNVGdnTUM0eU5ERXlOVFlnTUM0M05UQTJOVEVnTUM0eU1qWTNNak5ETUM0M01EYzNNVGdnTUM0eE9UWTVPRGtnTUM0Mk5URTNNVGdnTUM0eE9EUTVPU0F3TGpZd01URTROQ0F3TGpFM05qY3lNME13TGpVek56Z3hNU0F3TGpFMk5qTTNOaUF3TGpRM016TTJOU0F3TGpFMk5ESTNJREF1TkRBNU5EVXhJREF1TVRjd05EVTJRekF1TXpVeE9UWTJJREF1TVRjME5qYzBJREF1TWprMU5UUTJJREF1TVRnNE1UZ3pJREF1TWpReU16ZzBJREF1TWpFd05EVTJRekF1TWpFek9EVXhJREF1TWpJek56ZzVJREF1TVRjMk5URTRJREF1TWpRME5UZzVJREF1TVRneE1UZzBJREF1TWpnd09UZzVRekF1TVRrME5URTRJREF1TXpnNU1qVTJJREF1TWpFd01qVXhJREF1TkRrM01qVTFJREF1TWpJME56ZzBJREF1TmpBMU16ZzRRekF1TWpNeE5EVXhJREF1TmpVME9EVTFJREF1TWpNNE1URTRJREF1TnpBME16SXhJREF1TWpRME56ZzBJREF1TnpVek56ZzRRekF1TWpRMU9EWWdNQzQzTmpNME1pQXdMakkwT1RRMklEQXVOemN5TlRrNElEQXVNalUxTWpFNUlEQXVOemd3TXprMFF6QXVNall3T1RjNElEQXVOemc0TVRrZ01DNHlOamcyT1RNZ01DNDNPVFF6TWpnZ01DNHlOemMxT0RRZ01DNDNPVGd4T0RoRE1DNHpNVGc1TVRnZ01DNDRNakExT0RnZ01DNHpOekF4TVRnZ01DNDRNalk1T0RnZ01DNDBNVFl5TlRFZ01DNDRNekV5TlRSRE1DNDBOemMxT0RNZ01DNDRNelkzT1RRZ01DNDFNemt6T0RJZ01DNDRNelF3TlRnZ01DNDFPVGs1T0RRZ01DNDRNak14TWpGRE1DNDJNemd6T0RRZ01DNDRNVFl3TlRRZ01DNDNNRGs0TlRFZ01DNDRNRFEwTlRRZ01DNDNNVFU1T0RRZ01DNDNOVFkwTlRSRE1DNDNNak0xT0RRZ01DNDJPVFk1T0RnZ01DNDNNekU1T0RRZ01DNDJNemMxTWpFZ01DNDNNems1T0RRZ01DNDFOemd4T0RoTU1DNDNOREk1TVRnZ01DNDFOakF3TlRWRE1DNDNOalEyTlRFZ01DNDFOalV5TlRVZ01DNDRNalkyTlRFZ01DNDFOell6TWpJZ01DNDRNVGt3TlRFZ01DNDFNelF4T0RoYVRUQXVORGd3TmpVeElEQXVNVGt6TXpnNVF6QXVOVFl3TmpVeElEQXVNVGt6TXpnNUlEQXVOalV5TWpVeElEQXVNakF5TkRVMklEQXVOekl6T1RnMElEQXVNalF4T1RJelF6QXVOek0xTURVeElEQXVNalE0TURVMklEQXVOell3TnpnMElEQXVNall4TnpnNUlEQXVOelV6TURVeElEQXVNamM0TURVMlF6QXVOelExTXpFNElEQXVNamswTXpJeklEQXVOekl4TXpFNElEQXVNekF5TkRVMklEQXVOekEyTmpVeElEQXVNekE0TXpJeVF6QXVOamcxTnpBNElEQXVNekUyTURVNUlEQXVOalkwTVRjZ01DNHpNakl3TnpnZ01DNDJOREl5TlRFZ01DNHpNall6TWpKRE1DNDFORGN3TnpRZ01DNHpORFV4TnpZZ01DNDBORGt6TWprZ01DNHpORGN5TURjZ01DNHpOVE0wTlRFZ01DNHpNekl6TWpKRE1DNHpNVEF4TlRnZ01DNHpNamM0TlRnZ01DNHlOamd3TkRRZ01DNHpNVFUxTWpJZ01DNHlNamt4T0RRZ01DNHlPVFU1TWpORE1DNHlNVGsxT0RRZ01DNHlPVEEwTlRZZ01DNHlNRE0zTVRnZ01DNHlPREExT0RrZ01DNHlNRGd4TVRnZ01DNHlOamMxTWpORE1DNHlNVEUyTURNZ01DNHlOakExTURJZ01DNHlNVGN3TnpRZ01DNHlOVFEyTmlBd0xqSXlNemcxTVNBd0xqSTFNRGN5TTBNd0xqSTFNekV6TnlBd0xqSXpNVGc0T1NBd0xqSTROVGN3TXlBd0xqSXhPRGN5TnlBd0xqTXhPVGcxTVNBd0xqSXhNVGt5TTBNd0xqTTNNalV3TnlBd0xqRTVPVEk0TWlBd0xqUXlOalVnTUM0eE9UTXdOVGtnTUM0ME9EQTJOVEVnTUM0eE9UTXpPRGxXTUM0eE9UTXpPRGxhVFRBdU5qZzVOekU0SURBdU56VTFNemc0UXpBdU5qZzNOekU0SURBdU56Y3dPVGc0SURBdU5qWXhPVGcwSURBdU56YzROekl4SURBdU5qUTVOekU0SURBdU56Z3pNVEl4UXpBdU5qSTBNalV4SURBdU56a3hOalFnTUM0MU9UYzVPRElnTUM0M09UYzFNemNnTUM0MU56RXpNVGdnTUM0NE1EQTNNakZETUM0MU1USXhOVFlnTUM0NE1EZzFPRGNnTUM0ME5USXlNVE1nTUM0NE1EZzFPRGNnTUM0ek9UTXdOVEVnTUM0NE1EQTNNakZETUM0ek5UVTVPVFlnTUM0M09UYzRORFlnTUM0ek1UazRNVElnTUM0M09EZ3dNekVnTUM0eU9EWXpPRFFnTUM0M056RTNPRGhETUM0eU9ERTRNellnTUM0M05qazRNVEVnTUM0eU56YzVNeUF3TGpjMk5qWXdOU0F3TGpJM05URXdNeUF3TGpjMk1qVXpRekF1TWpjeU1qYzNJREF1TnpVNE5EVTJJREF1TWpjd05qUXpJREF1TnpVek5qY3pJREF1TWpjd016ZzBJREF1TnpRNE56SXhRekF1TWpVM01EVXhJREF1TmpReU9UZzRJREF1TWpReE9EVXhJREF1TlRNM01qVTFJREF1TWpJM05UZzBJREF1TkRNeE5USXlUREF1TWpFeU1URTRJREF1TXpFMk9EVTJRekF1TWpReU5ESTVJREF1TXpNek5UZzNJREF1TWpjMU16STVJREF1TXpRMU1USTBJREF1TXpBNU5EVXhJREF1TXpVd09UZzVRekF1TXpRMU9UazRJREF1TXpVNE5ESTNJREF1TXpnek1ESXlJREF1TXpZek1qZ3pJREF1TkRJd01qVXhJREF1TXpZMU5USXlRekF1TkRrek16RTFJREF1TXpjd056VTRJREF1TlRZMk56UTVJREF1TXpZMk5qZ3hJREF1TmpNNE56ZzBJREF1TXpVek16ZzVRekF1TmpjM01UWTNJREF1TXpRM09EWTRJREF1TnpFME1qUTJJREF1TXpNMU5EazBJREF1TnpRNE1qVXhJREF1TXpFMk9EVTJUREF1TnpFNU9UZzBJREF1TlRJMk1UZzRRekF1TmpVeU5ERTRJREF1TlRBek9USTRJREF1TlRnMk5EQTJJREF1TkRjM01qQXpJREF1TlRJeU16ZzBJREF1TkRRMk1UZzVRekF1TlRFNU5UYzFJREF1TkRRMU1URTNJREF1TlRFMk9EVTJJREF1TkRRek9ESTBJREF1TlRFME1qVXhJREF1TkRReU16SXlRekF1TlRFd05qVXhJREF1TkRNNU5qVTFJREF1TlRFeE5UZzBJREF1TkRRd09UZzVJREF1TlRBNU9EVXhJREF1TkRNMk9EVTFRekF1TlRBMk5URTRJREF1TkRJNU1qVTFJREF1TlRBMU56RTRJREF1TkRJek5USXlJREF1TkRrNE5qVXhJREF1TkRFM01qVTFRekF1TkRrME9ETTJJREF1TkRFME1pQXdMalE1TURNek1pQXdMalF4TWpFeU15QXdMalE0TlRVek1TQXdMalF4TVRJd05VTXdMalE0TURjeklEQXVOREV3TWpnM0lEQXVORGMxTnpjNElEQXVOREV3TlRVMklEQXVORGN4TVRBMUlEQXVOREV4T1RnNFF6QXVORFkyTkRNeElEQXVOREV6TkRJeElEQXVORFl5TVRjNUlEQXVOREUxT1RjMElEQXVORFU0TnpFM0lEQXVOREU1TkRJMFF6QXVORFUxTWpVMklEQXVOREl5T0RjMUlEQXVORFV5TmprZ01DNDBNamN4TVRrZ01DNDBOVEV5TkRJZ01DNDBNekUzT0RoRE1DNDBORGszT1RVZ01DNDBNelkwTlRjZ01DNDBORGsxTVNBd0xqUTBNVFF3T0NBd0xqUTFNRFF4TXlBd0xqUTBOakl4TWtNd0xqUTFNVE14TmlBd0xqUTFNVEF4TmlBd0xqUTFNek0zT1NBd0xqUTFOVFV5TmlBd0xqUTFOalF5TWlBd0xqUTFPVE0xTVVNd0xqUTFPVFEyTmlBd0xqUTJNekUzTlNBd0xqUTJNek01T0NBd0xqUTJOakU1T1NBd0xqUTJOemczTmlBd0xqUTJPREUxTjBNd0xqUTNNak0xTkNBd0xqUTNNREV4TmlBd0xqUTNOekkwTXlBd0xqUTNNRGsxSURBdU5EZ3lNVEU0SURBdU5EY3dOVGc1UXpBdU5EZzJOekUwSURBdU5EWTVPREkySURBdU5Ea3hNVGswSURBdU5EWTRORGd5SURBdU5EazFORFV4SURBdU5EWTJOVGc1UXpBdU5UQXdOalV4SURBdU5EWTBPVGc1SURBdU5UQXdOalV4SURBdU5EWTFNalUxSURBdU5UQTJNVEU0SURBdU5EWTNOemc1UXpBdU5UY3dPVFl5SURBdU5EazVOREE0SURBdU5qTTNOelkySURBdU5USTJPRFF5SURBdU56QTJNVEU0SURBdU5UUTVPVEl5UXpBdU56RTJNemcwSURBdU5UVXpNalUxSURBdU56RTJNalV4SURBdU5UUTVPVEl5SURBdU56RTJNalV4SURBdU5UVTRORFUxUXpBdU56RTFPREU0SURBdU5UWTBPVFEzSURBdU56RTBPVGN5SURBdU5UY3hOREEwSURBdU56RXpOekU0SURBdU5UYzNOemc0VERBdU56QTFNVGcwSURBdU5qUXhNemc0VERBdU5qZzVOekU0SURBdU56VTFNemc0V2swd0xqUTRNems0TkNBd0xqUTBNREExTlVNd0xqUTRNems0TkNBd0xqUTBNelkxTlNBd0xqUTNPRGt4T0NBd0xqUTBNekkxTlNBd0xqUTNOelU0TkNBd0xqUTBNRGs0T1VNd0xqUTNOakkxTVNBd0xqUXpPRGN5TWlBd0xqUTRNems0TkNBd0xqUXpORGs0T1NBd0xqUTRNems0TkNBd0xqUTBNREExTlZwTk1DNDNORFkyTlRFZ01DNDFNek16T0RoTU1DNDNOVEEyTlRFZ01DNDFNRE01TWpKRE1DNDNOak01T0RRZ01DNDFNVEUxTWpJZ01DNDNPRFkyTlRFZ01DNDFNakk1T0RnZ01DNDNPVEkyTlRFZ01DNDFNemd4T0RoRE1DNDNOemsxT0RRZ01DNDFORE0xTWpJZ01DNDNOVGc1TVRnZ01DNDFNelkwTlRVZ01DNDNORFkyTlRFZ01DNDFNek16T0RoYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzluUGlZamVHRTdQQzluUGlZamVHRTdQR1JsWm5NK0ppTjRZVHM4YkdsdVpXRnlSM0poWkdsbGJuUWdhV1E5SW5CaGFXNTBNRjlzYVc1bFlYSWlJSGd4UFNJdE1DNHlNRGN3TmpjaUlIa3hQU0l4TGpJd056QTJJaUI0TWowaU1TNHlNRGN3TmlJZ2VUSTlJaTB3TGpJd056QTNNaUlnWjNKaFpHbGxiblJWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaVBpWWplR0U3UEhOMGIzQWdjM1J2Y0MxamIyeHZjajBpSXpGQ05qWXdSaUl2UGlZamVHRTdQSE4wYjNBZ2IyWm1jMlYwUFNJeElpQnpkRzl3TFdOdmJHOXlQU0lqTmtOQlJUTkZJaTgrSmlONFlUczhMMnhwYm1WaGNrZHlZV1JwWlc1MFBpWWplR0U3UEdOc2FYQlFZWFJvSUdsa1BTSmpiR2x3TUNJK0ppTjRZVHM4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXdMams1T1RrNU5TSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE0Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMzM4IiB5PSIyMDMiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxvYmplY3QgbGFiZWw9IkFXUyBWUEMgKFZpcnR1YWwgUHJpdmF0ZSBDbG91ZCkiIGlyLnNvdXJjZVN0eWxlPSJyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj12cGM7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJaUJtYVd4c1BTSWpSVE5HUTBaRElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQwT0RVNU5DQXdMall5TUROSU1DNHlPVGt5TnpORE1DNHlNall5TURZZ01DNDJNakF6SURBdU1UY3dNelFnTUM0MU56RTFJREF1TVRZMk5qQTJJREF1TlRBME5ETXpRekF1TVRZMk5qQTJJREF1TlRBeE5qTXpJREF1TVRZMk5qQTJJREF1TkRrNE5ETXpJREF1TVRZMk5qQTJJREF1TkRrMU1qTXpRekF1TVRZMU5EY3hJREF1TkRZM05EQTRJREF1TVRjek9EQTNJREF1TkRRd01ESXhJREF1TVRrd01qVXhJREF1TkRFM05UUTJRekF1TWpBMk5qazFJREF1TXprMU1EY3hJREF1TWpNd01qYzJJREF1TXpjNE9ETTVJREF1TWpVM01UUWdNQzR6TnpFMVF6QXVNalUzTVRRZ01DNHpOamM1SURBdU1qVTNNVFFnTUM0ek5qUTBNek1nTUM0eU5UY3hOQ0F3TGpNMk1EZ3pNME13TGpJMU56Z3hNaUF3TGpNeU5Ea3pOeUF3TGpJMk9UQTVOQ0F3TGpJNU1EQTBOQ0F3TGpJNE9UVTJNeUF3TGpJMk1EVTBPVU13TGpNeE1EQXpNeUF3TGpJek1UQTFOQ0F3TGpNek9EYzNOQ0F3TGpJd09ESTNOeUF3TGpNM01qRTJOaUF3TGpFNU5UQTRPVU13TGpRd05UVTFPQ0F3TGpFNE1Ua2dNQzQwTkRJeE1EWWdNQzR4TnpnNE9TQXdMalEzTnpJd05pQXdMakU0TmpRek4wTXdMalV4TWpNd05pQXdMakU1TXprNE5DQXdMalUwTkRNNE55QXdMakl4TVRjMU1TQXdMalUyT1RRd05pQXdMakl6TnpWRE1DNDFPRFk0TlRVZ01DNHlOVFEzTnlBd0xqWXdNVEF6T0NBd0xqSTNOVEExTVNBd0xqWXhNVEkzTXlBd0xqSTVOek0yTjBNd0xqWXlOVGt3TWlBd0xqSTROVFl4TkNBd0xqWTBOREV3T0NBd0xqSTNPVEl4TmlBd0xqWTJNamczTXlBd0xqSTNPVEl6TTBNd0xqY3dNVFUwSURBdU1qYzVNak16SURBdU56UXlPRGN6SURBdU16QTJPRE16SURBdU56UTVOamN6SURBdU16WTRNME13TGpjNE1qVXpJREF1TXpjME9DQXdMamd4TWpFM015QXdMak01TWpNMUlEQXVPRE16TmpjeklEQXVOREU0TURNelREQXVPREV5TnpRZ01DNDBNelEwTXpORE1DNDNPVEkzTnpVZ01DNDBNVEUxT1RJZ01DNDNOalV5T1RjZ01DNHpPVFkyTkRjZ01DNDNNelV5TnpNZ01DNHpPVEl6UXpBdU56TXlNamN6SURBdU16a3hPREU1SURBdU56STVOVEkySURBdU16a3dNekkzSURBdU56STNORGtnTUM0ek9EZ3dOekpETUM0M01qVTBOVE1nTUM0ek9EVTRNVGNnTUM0M01qUXlORGNnTUM0ek9ESTVNelFnTUM0M01qUXdOek1nTUM0ek56azVRekF1TnpJeE1EQTJJREF1TXpJNE9ETXpJREF1TmpreE1UUWdNQzR6TURVNUlEQXVOall5T0RjeklEQXVNekExT1VNd0xqWTFNems1TnlBd0xqTXdOVGs0TWlBd0xqWTBOVEkySURBdU16QTRNVElnTUM0Mk16Y3pORGtnTUM0ek1USXhORFZETUM0Mk1qazBNemNnTUM0ek1UWXhOeUF3TGpZeU1qVTJOaUF3TGpNeU1UazNOQ0F3TGpZeE56STNNeUF3TGpNeU9URkRNQzQyTVRVNE5ERWdNQzR6TXpFd01Ea2dNQzQyTVRNNU1qSWdNQzR6TXpJME9Ua2dNQzQyTVRFM01UY2dNQzR6TXpNME1UTkRNQzQyTURrMU1UTWdNQzR6TXpRek1qZ2dNQzQyTURjeE1ETWdNQzR6TXpRMk16UWdNQzQyTURRM05DQXdMak16TkRORE1DNDJNREl6TmpZZ01DNHpNek01TXpjZ01DNDJNREF4TXpVZ01DNHpNekk1TkRFZ01DNDFPVGd5T0RFZ01DNHpNekUwTVRaRE1DNDFPVFkwTWpjZ01DNHpNams0T1NBd0xqVTVOVEF4T1NBd0xqTXlOemc1TWlBd0xqVTVOREl3TmlBd0xqTXlOVFl6TTBNd0xqVTROVEEzT1NBd0xqSTVPVGN4TkNBd0xqVTNNREkzTXlBd0xqSTNOakUyTWlBd0xqVTFNRGczTXlBd0xqSTFOamRETUM0MU1qazFOelFnTUM0eU16UTNPRGNnTUM0MU1ESXlPRFlnTUM0eU1UazJORElnTUM0ME56STBNaklnTUM0eU1UTXhOak5ETUM0ME5ESTFOVGtnTUM0eU1EWTJPRE1nTUM0ME1URTBORGNnTUM0eU1Ea3hOVFlnTUM0ek9ESTVPRElnTUM0eU1qQXlOekZETUM0ek5UUTFNVGNnTUM0eU16RXpPRGNnTUM0ek1qazVOak1nTUM0eU5UQTJOVElnTUM0ek1USXpPVE1nTUM0eU56VTJOVFJETUM0eU9UUTRNalFnTUM0ek1EQTJOVFlnTUM0eU9EVXdNVGtnTUM0ek16QXlPRFlnTUM0eU9EUXlNRFlnTUM0ek5qQTRNek5ETUM0eU9EUXlNalVnTUM0ek5qY3lNRE1nTUM0eU9EUTFPREVnTUM0ek56TTFOamdnTUM0eU9EVXlOek1nTUM0ek56azVRekF1TWpnMU5UazBJREF1TXpnek1EZ3lJREF1TWpnME56WXhJREF1TXpnMk1qY3pJREF1TWpneU9USTFJREF1TXpnNE9Ea3lRekF1TWpneE1Ea2dNQzR6T1RFMU1URWdNQzR5Tnpnek56UWdNQzR6T1RNek9ETWdNQzR5TnpVeU56TWdNQzR6T1RReE5qZERNQzR5TkRVd01EWWdNQzQwTURFMk16TWdNQzR4T1RNNU5DQXdMalF5TkRnek15QXdMakU1TXprMElEQXVORGsxTWpNelF6QXVNVGt6T0RBMklEQXVORGszTmpNeElEQXVNVGt6T0RBMklEQXVOVEF3TURNMUlEQXVNVGt6T1RRZ01DNDFNREkwTXpORE1DNHhPVFk0TnpNZ01DNDFOVFUzTmpjZ01DNHlOREUxTkNBd0xqVTVNell6TXlBd0xqTXdNRFl3TmlBd0xqVTVNell6TTBnd0xqUTROekkzTTB3d0xqUTROVGswSURBdU5qSXdNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJOekkwTlRFZ01DNDRNVFk0TURWRE1DNDFNVFF6TVRnZ01DNDRNVFk0TURVZ01DNDFNVEkwTlRFZ01DNDJNemt3TnpFZ01DNDFNVEkwTlRFZ01DNDJNemN6TXpoV01DNDBOelV3TnpGRE1DNDFNVEkwTkRJZ01DNDBOekl6TkRjZ01DNDFNVE15TmpnZ01DNDBOamsyT0RVZ01DNDFNVFE0TVRnZ01DNDBOamMwTkRWRE1DNDFNVFl6TmpjZ01DNDBOalV5TURRZ01DNDFNVGcxTmpZZ01DNDBOak0wT1RJZ01DNDFNakV4TVRnZ01DNDBOakkxTXpoTU1DNDJOamMzT0RVZ01DNDBNRGd5TnpGRE1DNDJOekE0TURRZ01DNDBNRGN5TURRZ01DNDJOelF3T1RnZ01DNDBNRGN5TURRZ01DNDJOemN4TVRnZ01DNDBNRGd5TnpGTU1DNDRNak0zT0RVZ01DNDBOakkxTXpoRE1DNDRNall6TXpjZ01DNDBOak0wT1RJZ01DNDRNamcxTXpVZ01DNDBOalV5TURRZ01DNDRNekF3T0RVZ01DNDBOamMwTkRWRE1DNDRNekUyTXpRZ01DNDBOamsyT0RVZ01DNDRNekkwTmlBd0xqUTNNak0wTnlBd0xqZ3pNalExTVNBd0xqUTNOVEEzTVZZd0xqWTBOek16T0VNd0xqZ3pNalExTVNBd0xqWTBPVEEzTVNBd0xqZ3pNRFU0TlNBd0xqZ3hOamd3TlNBd0xqWTNNalExTVNBd0xqZ3hOamd3TlZwTk1DNDFNemt4TVRnZ01DNDBPRFEwTURWV01DNDJNemN6TXpoRE1DNDFNemt4TVRnZ01DNDJORE0yTURVZ01DNDFOREE1T0RVZ01DNDNPVEF4TXpnZ01DNDJOekkwTlRFZ01DNDNPVEF4TXpoRE1DNDRNRE01TVRnZ01DNDNPVEF4TXpnZ01DNDRNRFUzT0RVZ01DNDJOVE15TURVZ01DNDRNRFUzT0RVZ01DNDJORGN6TXpoV01DNDBPRFEwTURWTU1DNDJOekkwTlRFZ01DNDBNelE1TXpoTU1DNDFNemt4TVRnZ01DNDBPRFEwTURWYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TmpjeU5ETTVJREF1TnpZMk9USTBRekF1TlRnM05qTTVJREF1TnpZMk9USTBJREF1TlRZMk9ETTVJREF1TmpVNU16STBJREF1TlRZMU56Y3pJREF1TmpVME56a3hRekF1TlRZMU5qUXhJREF1TmpVek9UazJJREF1TlRZMU5qUXhJREF1TmpVek1UZzFJREF1TlRZMU56Y3pJREF1TmpVeU16a3hWakF1TlRFME1qVTRRekF1TlRZMU56Y2dNQzQxTVRFMU9EY2dNQzQxTmpZMU5qa2dNQzQxTURnNU56Z2dNQzQxTmpnd05qY2dNQzQxTURZM05qZERNQzQxTmprMU5qVWdNQzQxTURRMU5UWWdNQzQxTnpFMk9USWdNQzQxTURJNE5EWWdNQzQxTnpReE56TWdNQzQxTURFNE5UaE1NQzQyTmpjMU1EWWdNQzQwTmpVd05UaERNQzQyTnpBMk56UWdNQzQwTmpNM09UWWdNQzQyTnpReU1EVWdNQzQwTmpNM09UWWdNQzQyTnpjek56TWdNQzQwTmpVd05UaE1NQzQzTnpBM01EWWdNQzQxTURFNE5UaERNQzQzTnpNeE9EY2dNQzQxTURJNE5EWWdNQzQzTnpVek1UUWdNQzQxTURRMU5UWWdNQzQzTnpZNE1USWdNQzQxTURZM05qZERNQzQzTnpnek1Ea2dNQzQxTURnNU56Z2dNQzQzTnpreE1Ea2dNQzQxTVRFMU9EY2dNQzQzTnpreE1EWWdNQzQxTVRReU5UaFdNQzQyTlRJek9URkRNQzQzTnpreE56SWdNQzQyTlRNeE9TQXdMamMzT1RFM01pQXdMalkxTXprNU1pQXdMamMzT1RFd05pQXdMalkxTkRjNU1VTXdMamMzT0RBek9TQXdMalkxT1RNeU5DQXdMamMxTnpJek9TQXdMamMyTmpreU5DQXdMalkzTWpRek9TQXdMamMyTmpreU5GcE5NQzQxT1RJME16a2dNQzQyTlRFd05UaERNQzQxT1RRMU56TWdNQzQyTmpFeE9URWdNQzQyTVRNMk16a2dNQzQzTkRBeU5UZ2dNQzQyTnpJME16a2dNQzQzTkRBeU5UaERNQzQzTXpFeU16a2dNQzQzTkRBeU5UZ2dNQzQzTlRBek1EWWdNQzQyTmpFek1qUWdNQzQzTlRJME16a2dNQzQyTlRFd05UaFdNQzQxTWpNek1qUk1NQzQyTnpJME16a2dNQzQwT1RFNE5UaE1NQzQxT1RJME16a2dNQzQxTWpNek1qUldNQzQyTlRFd05UaGFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEM5blBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWElpSUhneFBTSXRNQzR5TURjd05qY2lJSGt4UFNJeExqSXdOekEzSWlCNE1qMGlNUzR5TURjd055SWdlVEk5SWkwd0xqSXdOekEyTnlJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQaVlqZUdFN1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUl6UkVNamRCT0NJdlBpWWplR0U3UEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJalFURTJOa1pHSWk4K0ppTjRZVHM4TDJ4cGJtVmhja2R5WVdScFpXNTBQaVlqZUdFN1BHTnNhWEJRWVhSb0lHbGtQU0pqYkdsd01DSStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOWpiR2x3VUdGMGFENG1JM2hoT3p3dlpHVm1jejRtSTNoaE96d3ZjM1puUGc9PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0wO3NoYWRvdz0wO3N0cm9rZVdpZHRoPTE7IiBpZD0iMTUiPgogICAgICA8bXhDZWxsIHN0eWxlPSJpci5yZWY9ODFiM2U1NzUtYzY4NC00ZGQ5LWI4MzAtYjM3MGI1YjY5Nzg4O3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWxlZnQ7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMztzb3VyY2U9Y3VzdG9tO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXZwYzt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xO2NvbnRhaW5lcj0xO3BlcmltZXRlcj1yZWN0YW5nbGVQZXJpbWV0ZXI7cmVjdXJzaXZlUmVzaXplPTA7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEzIj4KICAgICAgICA8bXhHZW9tZXRyeSB4PSI3MjciIHk9IjI0IiB3aWR0aD0iMzkxIiBoZWlnaHQ9IjUzMCIgYXM9Imdlb21ldHJ5Ii8+CiAgICAgIDwvbXhDZWxsPgogICAgPC9vYmplY3Q+CiAgICA8bXhDZWxsIGlkPSI1MSIgc3R5bGU9ImlyLnJlZj01YjlkMGRiZC0yNmQzLTQzYjgtYTI3NC1hM2ZkOTNlODkyY2M7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2V4aXRYPTE7ZXhpdFk9MC41O2V4aXREeD0wO2V4aXREeT0wO3N0cm9rZUNvbG9yPSNCRkJGQkY7c3Ryb2tlV2lkdGg9MjtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c291cmNlUGVyaW1ldGVyU3BhY2luZz05OyIgZWRnZT0iMSIgcGFyZW50PSIxNSIgc291cmNlPSIyNyIgdGFyZ2V0PSIyOCIgdmFsdWU9IkFXUyBTMyAoU2ltcGxlIFN0b3JhZ2UgU2VydmljZSkgLSZndDsgQVdTIFNhZ2VNYWtlciI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNTQiIHN0eWxlPSJpci5yZWY9OGRiZWEwMzctMmVmMS00ZGUxLWEzZGItMzhiMDNlZDYzZGYxO2VkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0wLjU7ZXhpdFk9MDtleGl0RHg9MDtleGl0RHk9MDtlbnRyeVg9MC41Nzg7ZW50cnlZPTAuOTg5O2VudHJ5RHg9MDtlbnRyeUR5PTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7ZW50cnlQZXJpbWV0ZXI9MDsiIGVkZ2U9IjEiIHBhcmVudD0iMTUiIHNvdXJjZT0iMjciIHRhcmdldD0iMjkiIHZhbHVlPSJBV1MgUzMgKFNpbXBsZSBTdG9yYWdlIFNlcnZpY2UpIC0mZ3Q7IEFXUyBBdGhlbmEiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjI3IiB2YWx1ZT0iQVdTIFMzIChTaW1wbGUgU3RvcmFnZSBTZXJ2aWNlKSIgc3R5bGU9ImlyLnJlZj1lMWQ2MTc4NS0wNTQ4LTQwMGItODUzNS00MjRlMDg4MmM2NmU7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9czM7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y0dGMGFDQmtQU0pOTVNBd1NEQldNQzQ1T1RrNU9UVklNVll3V2lJZ1ptbHNiRDBpZFhKc0tDTndZV2x1ZERCZmJHbHVaV0Z5S1NJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU9ERTVNRFV4SURBdU5UTTBNVGc0UXpBdU9ERTFNVGcwSURBdU5URXpNalUxSURBdU56a3hORFV4SURBdU5EazRORFUxSURBdU56YzFNVGcwSURBdU5EZzNPVEl5UXpBdU56WTVPVGcwSURBdU5EZzBOVGc1SURBdU56VTFOekU0SURBdU5EYzVNalUxSURBdU56VTBOVEU0SURBdU5EYzBOVGc1UXpBdU56VTBORE0ySURBdU5EY3hNalVnTUM0M05UUTRPRFlnTUM0ME5qYzVNVGtnTUM0M05UVTROVEVnTUM0ME5qUTNNakpNTUM0M05qa3hPRFFnTUM0ek5qZzROVFpETUM0M056TXdOVEVnTUM0ek5EQTNNaklnTUM0M056WTNPRFFnTUM0ek1USTFPRGtnTUM0M09EQTJOVEVnTUM0eU9EUTBOVFpETUM0M09EUXhNVGdnTUM0eU5UZzFPRGtnTUM0M056RTNNVGdnTUM0eU5ERXlOVFlnTUM0M05UQTJOVEVnTUM0eU1qWTNNak5ETUM0M01EYzNNVGdnTUM0eE9UWTVPRGtnTUM0Mk5URTNNVGdnTUM0eE9EUTVPU0F3TGpZd01URTROQ0F3TGpFM05qY3lNME13TGpVek56Z3hNU0F3TGpFMk5qTTNOaUF3TGpRM016TTJOU0F3TGpFMk5ESTNJREF1TkRBNU5EVXhJREF1TVRjd05EVTJRekF1TXpVeE9UWTJJREF1TVRjME5qYzBJREF1TWprMU5UUTJJREF1TVRnNE1UZ3pJREF1TWpReU16ZzBJREF1TWpFd05EVTJRekF1TWpFek9EVXhJREF1TWpJek56ZzVJREF1TVRjMk5URTRJREF1TWpRME5UZzVJREF1TVRneE1UZzBJREF1TWpnd09UZzVRekF1TVRrME5URTRJREF1TXpnNU1qVTJJREF1TWpFd01qVXhJREF1TkRrM01qVTFJREF1TWpJME56ZzBJREF1TmpBMU16ZzRRekF1TWpNeE5EVXhJREF1TmpVME9EVTFJREF1TWpNNE1URTRJREF1TnpBME16SXhJREF1TWpRME56ZzBJREF1TnpVek56ZzRRekF1TWpRMU9EWWdNQzQzTmpNME1pQXdMakkwT1RRMklEQXVOemN5TlRrNElEQXVNalUxTWpFNUlEQXVOemd3TXprMFF6QXVNall3T1RjNElEQXVOemc0TVRrZ01DNHlOamcyT1RNZ01DNDNPVFF6TWpnZ01DNHlOemMxT0RRZ01DNDNPVGd4T0RoRE1DNHpNVGc1TVRnZ01DNDRNakExT0RnZ01DNHpOekF4TVRnZ01DNDRNalk1T0RnZ01DNDBNVFl5TlRFZ01DNDRNekV5TlRSRE1DNDBOemMxT0RNZ01DNDRNelkzT1RRZ01DNDFNemt6T0RJZ01DNDRNelF3TlRnZ01DNDFPVGs1T0RRZ01DNDRNak14TWpGRE1DNDJNemd6T0RRZ01DNDRNVFl3TlRRZ01DNDNNRGs0TlRFZ01DNDRNRFEwTlRRZ01DNDNNVFU1T0RRZ01DNDNOVFkwTlRSRE1DNDNNak0xT0RRZ01DNDJPVFk1T0RnZ01DNDNNekU1T0RRZ01DNDJNemMxTWpFZ01DNDNNems1T0RRZ01DNDFOemd4T0RoTU1DNDNOREk1TVRnZ01DNDFOakF3TlRWRE1DNDNOalEyTlRFZ01DNDFOalV5TlRVZ01DNDRNalkyTlRFZ01DNDFOell6TWpJZ01DNDRNVGt3TlRFZ01DNDFNelF4T0RoYVRUQXVORGd3TmpVeElEQXVNVGt6TXpnNVF6QXVOVFl3TmpVeElEQXVNVGt6TXpnNUlEQXVOalV5TWpVeElEQXVNakF5TkRVMklEQXVOekl6T1RnMElEQXVNalF4T1RJelF6QXVOek0xTURVeElEQXVNalE0TURVMklEQXVOell3TnpnMElEQXVNall4TnpnNUlEQXVOelV6TURVeElEQXVNamM0TURVMlF6QXVOelExTXpFNElEQXVNamswTXpJeklEQXVOekl4TXpFNElEQXVNekF5TkRVMklEQXVOekEyTmpVeElEQXVNekE0TXpJeVF6QXVOamcxTnpBNElEQXVNekUyTURVNUlEQXVOalkwTVRjZ01DNHpNakl3TnpnZ01DNDJOREl5TlRFZ01DNHpNall6TWpKRE1DNDFORGN3TnpRZ01DNHpORFV4TnpZZ01DNDBORGt6TWprZ01DNHpORGN5TURjZ01DNHpOVE0wTlRFZ01DNHpNekl6TWpKRE1DNHpNVEF4TlRnZ01DNHpNamM0TlRnZ01DNHlOamd3TkRRZ01DNHpNVFUxTWpJZ01DNHlNamt4T0RRZ01DNHlPVFU1TWpORE1DNHlNVGsxT0RRZ01DNHlPVEEwTlRZZ01DNHlNRE0zTVRnZ01DNHlPREExT0RrZ01DNHlNRGd4TVRnZ01DNHlOamMxTWpORE1DNHlNVEUyTURNZ01DNHlOakExTURJZ01DNHlNVGN3TnpRZ01DNHlOVFEyTmlBd0xqSXlNemcxTVNBd0xqSTFNRGN5TTBNd0xqSTFNekV6TnlBd0xqSXpNVGc0T1NBd0xqSTROVGN3TXlBd0xqSXhPRGN5TnlBd0xqTXhPVGcxTVNBd0xqSXhNVGt5TTBNd0xqTTNNalV3TnlBd0xqRTVPVEk0TWlBd0xqUXlOalVnTUM0eE9UTXdOVGtnTUM0ME9EQTJOVEVnTUM0eE9UTXpPRGxXTUM0eE9UTXpPRGxhVFRBdU5qZzVOekU0SURBdU56VTFNemc0UXpBdU5qZzNOekU0SURBdU56Y3dPVGc0SURBdU5qWXhPVGcwSURBdU56YzROekl4SURBdU5qUTVOekU0SURBdU56Z3pNVEl4UXpBdU5qSTBNalV4SURBdU56a3hOalFnTUM0MU9UYzVPRElnTUM0M09UYzFNemNnTUM0MU56RXpNVGdnTUM0NE1EQTNNakZETUM0MU1USXhOVFlnTUM0NE1EZzFPRGNnTUM0ME5USXlNVE1nTUM0NE1EZzFPRGNnTUM0ek9UTXdOVEVnTUM0NE1EQTNNakZETUM0ek5UVTVPVFlnTUM0M09UYzRORFlnTUM0ek1UazRNVElnTUM0M09EZ3dNekVnTUM0eU9EWXpPRFFnTUM0M056RTNPRGhETUM0eU9ERTRNellnTUM0M05qazRNVEVnTUM0eU56YzVNeUF3TGpjMk5qWXdOU0F3TGpJM05URXdNeUF3TGpjMk1qVXpRekF1TWpjeU1qYzNJREF1TnpVNE5EVTJJREF1TWpjd05qUXpJREF1TnpVek5qY3pJREF1TWpjd016ZzBJREF1TnpRNE56SXhRekF1TWpVM01EVXhJREF1TmpReU9UZzRJREF1TWpReE9EVXhJREF1TlRNM01qVTFJREF1TWpJM05UZzBJREF1TkRNeE5USXlUREF1TWpFeU1URTRJREF1TXpFMk9EVTJRekF1TWpReU5ESTVJREF1TXpNek5UZzNJREF1TWpjMU16STVJREF1TXpRMU1USTBJREF1TXpBNU5EVXhJREF1TXpVd09UZzVRekF1TXpRMU9UazRJREF1TXpVNE5ESTNJREF1TXpnek1ESXlJREF1TXpZek1qZ3pJREF1TkRJd01qVXhJREF1TXpZMU5USXlRekF1TkRrek16RTFJREF1TXpjd056VTRJREF1TlRZMk56UTVJREF1TXpZMk5qZ3hJREF1TmpNNE56ZzBJREF1TXpVek16ZzVRekF1TmpjM01UWTNJREF1TXpRM09EWTRJREF1TnpFME1qUTJJREF1TXpNMU5EazBJREF1TnpRNE1qVXhJREF1TXpFMk9EVTJUREF1TnpFNU9UZzBJREF1TlRJMk1UZzRRekF1TmpVeU5ERTRJREF1TlRBek9USTRJREF1TlRnMk5EQTJJREF1TkRjM01qQXpJREF1TlRJeU16ZzBJREF1TkRRMk1UZzVRekF1TlRFNU5UYzFJREF1TkRRMU1URTNJREF1TlRFMk9EVTJJREF1TkRRek9ESTBJREF1TlRFME1qVXhJREF1TkRReU16SXlRekF1TlRFd05qVXhJREF1TkRNNU5qVTFJREF1TlRFeE5UZzBJREF1TkRRd09UZzVJREF1TlRBNU9EVXhJREF1TkRNMk9EVTFRekF1TlRBMk5URTRJREF1TkRJNU1qVTFJREF1TlRBMU56RTRJREF1TkRJek5USXlJREF1TkRrNE5qVXhJREF1TkRFM01qVTFRekF1TkRrME9ETTJJREF1TkRFME1pQXdMalE1TURNek1pQXdMalF4TWpFeU15QXdMalE0TlRVek1TQXdMalF4TVRJd05VTXdMalE0TURjeklEQXVOREV3TWpnM0lEQXVORGMxTnpjNElEQXVOREV3TlRVMklEQXVORGN4TVRBMUlEQXVOREV4T1RnNFF6QXVORFkyTkRNeElEQXVOREV6TkRJeElEQXVORFl5TVRjNUlEQXVOREUxT1RjMElEQXVORFU0TnpFM0lEQXVOREU1TkRJMFF6QXVORFUxTWpVMklEQXVOREl5T0RjMUlEQXVORFV5TmprZ01DNDBNamN4TVRrZ01DNDBOVEV5TkRJZ01DNDBNekUzT0RoRE1DNDBORGszT1RVZ01DNDBNelkwTlRjZ01DNDBORGsxTVNBd0xqUTBNVFF3T0NBd0xqUTFNRFF4TXlBd0xqUTBOakl4TWtNd0xqUTFNVE14TmlBd0xqUTFNVEF4TmlBd0xqUTFNek0zT1NBd0xqUTFOVFV5TmlBd0xqUTFOalF5TWlBd0xqUTFPVE0xTVVNd0xqUTFPVFEyTmlBd0xqUTJNekUzTlNBd0xqUTJNek01T0NBd0xqUTJOakU1T1NBd0xqUTJOemczTmlBd0xqUTJPREUxTjBNd0xqUTNNak0xTkNBd0xqUTNNREV4TmlBd0xqUTNOekkwTXlBd0xqUTNNRGsxSURBdU5EZ3lNVEU0SURBdU5EY3dOVGc1UXpBdU5EZzJOekUwSURBdU5EWTVPREkySURBdU5Ea3hNVGswSURBdU5EWTRORGd5SURBdU5EazFORFV4SURBdU5EWTJOVGc1UXpBdU5UQXdOalV4SURBdU5EWTBPVGc1SURBdU5UQXdOalV4SURBdU5EWTFNalUxSURBdU5UQTJNVEU0SURBdU5EWTNOemc1UXpBdU5UY3dPVFl5SURBdU5EazVOREE0SURBdU5qTTNOelkySURBdU5USTJPRFF5SURBdU56QTJNVEU0SURBdU5UUTVPVEl5UXpBdU56RTJNemcwSURBdU5UVXpNalUxSURBdU56RTJNalV4SURBdU5UUTVPVEl5SURBdU56RTJNalV4SURBdU5UVTRORFUxUXpBdU56RTFPREU0SURBdU5UWTBPVFEzSURBdU56RTBPVGN5SURBdU5UY3hOREEwSURBdU56RXpOekU0SURBdU5UYzNOemc0VERBdU56QTFNVGcwSURBdU5qUXhNemc0VERBdU5qZzVOekU0SURBdU56VTFNemc0V2swd0xqUTRNems0TkNBd0xqUTBNREExTlVNd0xqUTRNems0TkNBd0xqUTBNelkxTlNBd0xqUTNPRGt4T0NBd0xqUTBNekkxTlNBd0xqUTNOelU0TkNBd0xqUTBNRGs0T1VNd0xqUTNOakkxTVNBd0xqUXpPRGN5TWlBd0xqUTRNems0TkNBd0xqUXpORGs0T1NBd0xqUTRNems0TkNBd0xqUTBNREExTlZwTk1DNDNORFkyTlRFZ01DNDFNek16T0RoTU1DNDNOVEEyTlRFZ01DNDFNRE01TWpKRE1DNDNOak01T0RRZ01DNDFNVEUxTWpJZ01DNDNPRFkyTlRFZ01DNDFNakk1T0RnZ01DNDNPVEkyTlRFZ01DNDFNemd4T0RoRE1DNDNOemsxT0RRZ01DNDFORE0xTWpJZ01DNDNOVGc1TVRnZ01DNDFNelkwTlRVZ01DNDNORFkyTlRFZ01DNDFNek16T0RoYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzluUGlZamVHRTdQQzluUGlZamVHRTdQR1JsWm5NK0ppTjRZVHM4YkdsdVpXRnlSM0poWkdsbGJuUWdhV1E5SW5CaGFXNTBNRjlzYVc1bFlYSWlJSGd4UFNJdE1DNHlNRGN3TmpjaUlIa3hQU0l4TGpJd056QTJJaUI0TWowaU1TNHlNRGN3TmlJZ2VUSTlJaTB3TGpJd056QTNNaUlnWjNKaFpHbGxiblJWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaVBpWWplR0U3UEhOMGIzQWdjM1J2Y0MxamIyeHZjajBpSXpGQ05qWXdSaUl2UGlZamVHRTdQSE4wYjNBZ2IyWm1jMlYwUFNJeElpQnpkRzl3TFdOdmJHOXlQU0lqTmtOQlJUTkZJaTgrSmlONFlUczhMMnhwYm1WaGNrZHlZV1JwWlc1MFBpWWplR0U3UEdOc2FYQlFZWFJvSUdsa1BTSmpiR2x3TUNJK0ppTjRZVHM4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXdMams1T1RrNU5TSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE1Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMjciIHk9IjIyOS41IiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI1MiIgc3R5bGU9ImlyLnJlZj1jZmQ1ZWEzMC04MzZmLTQ4NmQtYTcwNS1jMTYyMDNkODc4ZGQ7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2V4aXRYPTA7ZXhpdFk9MC43NTtleGl0RHg9MDtleGl0RHk9MDtlbnRyeVg9MC45MjI7ZW50cnlZPTAuNzgzO2VudHJ5RHg9MDtlbnRyeUR5PTA7ZW50cnlQZXJpbWV0ZXI9MDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTsiIGVkZ2U9IjEiIHBhcmVudD0iMTUiIHNvdXJjZT0iMjgiIHRhcmdldD0iMjciIHZhbHVlPSJBV1MgU2FnZU1ha2VyIC0mZ3Q7IEFXUyBTMyAoU2ltcGxlIFN0b3JhZ2UgU2VydmljZSkiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjI4IiB2YWx1ZT0iQVdTIFNhZ2VNYWtlciIgc3R5bGU9ImlyLnJlZj05YzMxYWQwZi0wZDdmLTQ3M2YtODhjMC1kYzIxOWQ2MjJhMWE7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9Q0QtU0FHRU1BS0VSO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3WHpFMU16WmZNalEwTmpZaUlITjBlV3hsUFNKdFlYTnJMWFI1Y0dVNllXeHdhR0VpSUcxaGMydFZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpSUhnOUlqQWlJSGs5SWpBaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlQaVlqZUdFN1BHTnBjbU5zWlNCamVEMGlNQzQxSWlCamVUMGlNQzQxSWlCeVBTSXdMalVpSUdacGJHdzlJbUpzWVdOcklpOCtKaU40WVRzOEwyMWhjMnMrSmlONFlUczhaeUJ0WVhOclBTSjFjbXdvSTIxaGMyc3dYekUxTXpaZk1qUTBOallwSWo0bUkzaGhPenh3WVhSb0lHUTlJazB4SURCSU1GWXdMams1T1RrNU9VZ3hWakJhSWlCbWFXeHNQU0oxY213b0kzQmhhVzUwTUY5c2FXNWxZWEpmTVRVek5sOHlORFEyTmlraUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVTRNekUzTVNBd0xqZ3pOamcwT1VNd0xqVTRNRGMzT0NBd0xqZ3pOamcwT1NBd0xqVTNPRFF5T1NBd0xqZ3pOakl3TkNBd0xqVTNOak0zTVNBd0xqZ3pORGs0TTB3d0xqUTVPVGszTVNBd0xqYzRPVEkwT1V3d0xqUXlNelUzTVNBd0xqZ3pORGs0TTBNd0xqUXlNVFUwTkNBd0xqZ3pOakUxTXlBd0xqUXhPVEkwTlNBd0xqZ3pOamMyT1NBd0xqUXhOamt3TkNBd0xqZ3pOamMyT1VNd0xqUXhORFUyTkNBd0xqZ3pOamMyT1NBd0xqUXhNakkyTlNBd0xqZ3pOakUxTXlBd0xqUXhNREl6T0NBd0xqZ3pORGs0TTB3d0xqSTFNek13TkNBd0xqY3pPVEkwT1VNd0xqSTFNVE00TXlBd0xqY3pPREEwT0NBd0xqSTBPVGM1T1NBd0xqY3pOak0zT0NBd0xqSTBPRGN3TWlBd0xqY3pORE01TlVNd0xqSTBOell3TmlBd0xqY3pNalF4TWlBd0xqSTBOekF6TXlBd0xqY3pNREU0TWlBd0xqSTBOekF6TnlBd0xqY3lOemt4TmxZd0xqWXpNVGt4Tmt3d0xqRTNNek13TkNBd0xqVTVNRFEwT1VNd0xqRTNNVEkwTkNBd0xqVTRPVEk1TWlBd0xqRTJPVFV5T1NBd0xqVTROell3T0NBd0xqRTJPRE16TlNBd0xqVTROVFUyT1VNd0xqRTJOekUwSURBdU5UZ3pOVE14SURBdU1UWTJOVEE0SURBdU5UZ3hNakV5SURBdU1UWTJOVEEwSURBdU5UYzRPRFE1VmpBdU5ESXhNalZETUM0eE5qWTFNRGdnTUM0ME1UZzRPRGNnTUM0eE5qY3hOQ0F3TGpReE5qVTJPQ0F3TGpFMk9ETXpOU0F3TGpReE5EVXpRekF1TVRZNU5USTVJREF1TkRFeU5Ea3hJREF1TVRjeE1qUTBJREF1TkRFd09EQTNJREF1TVRjek16QTBJREF1TkRBNU5qVk1NQzR5TkRZMk16Y2dNQzR6TmpneE9ETldNQzR5TnpJeE9ETkRNQzR5TkRZMk1TQXdMakkyT1RnNU5TQXdMakkwTnpFM01pQXdMakkyTnpZek9DQXdMakkwT0RJM0lEQXVNalkxTmpJNVF6QXVNalE1TXpZM0lEQXVNall6TmpJeElEQXVNalV3T1RZeklEQXVNall4T1RJNUlEQXVNalV5T1RBMElEQXVNall3TnpFMlREQXVOREE1TnpBMElEQXVNVFkxTVRFMlF6QXVOREV4TnpNeElEQXVNVFl6T1RRMklEQXVOREUwTURNeElEQXVNVFl6TXpNZ01DNDBNVFl6TnpFZ01DNHhOak16TTBNd0xqUXhPRGN4TWlBd0xqRTJNek16SURBdU5ESXhNREV4SURBdU1UWXpPVFEySURBdU5ESXpNRE00SURBdU1UWTFNVEUyVERBdU5EazVORE00SURBdU1qRXdPRFZNTUM0MU56VTRNemdnTUM0eE5qVXhNVFpETUM0MU56YzROalVnTUM0eE5qTTVORFlnTUM0MU9EQXhOalFnTUM0eE5qTXpNeUF3TGpVNE1qVXdOU0F3TGpFMk16TXpRekF1TlRnME9EUTFJREF1TVRZek16TWdNQzQxT0RjeE5EUWdNQzR4TmpNNU5EWWdNQzQxT0RreE56RWdNQzR4TmpVeE1UWk1NQzQzTkRZMk16Z2dNQzR5TmpBNE5VTXdMamMwT0RVNE5TQXdMakkyTWpBek5DQXdMamMxTURFNU5TQXdMakkyTXpZNU9DQXdMamMxTVRNeE5TQXdMakkyTlRZNE1rTXdMamMxTWpRek5pQXdMakkyTnpZMk5pQXdMamMxTXpBeU9TQXdMakkyT1Rrd05DQXdMamMxTXpBek9DQXdMakkzTWpFNE0xWXdMak0yT0RFNE0wd3dMamd5TmpZek9TQXdMalF3T1RZMVF6QXVPREk0TmprNElEQXVOREV3T0RBM0lEQXVPRE13TkRFeklEQXVOREV5TkRreElEQXVPRE14TmpBNElEQXVOREUwTlRORE1DNDRNekk0TURNZ01DNDBNVFkxTmpnZ01DNDRNek0wTXpRZ01DNDBNVGc0T0RjZ01DNDRNek0wTXprZ01DNDBNakV5TlZZd0xqVTNPRGcwT1VNd0xqZ3pNelF6TkNBd0xqVTRNVEl4TWlBd0xqZ3pNamd3TXlBd0xqVTRNelV6TVNBd0xqZ3pNVFl3T0NBd0xqVTROVFUyT1VNd0xqZ3pNRFF4TXlBd0xqVTROell3T0NBd0xqZ3lPRFk1T0NBd0xqVTRPVEk1TWlBd0xqZ3lOall6T1NBd0xqVTVNRFEwT1V3d0xqYzFNek13TlNBd0xqWXpNVGt4TmxZd0xqY3lOemt4TmtNd0xqYzFNek14T1NBd0xqY3pNREl4TnlBd0xqYzFNamN6TmlBd0xqY3pNalE0TXlBd0xqYzFNVFl4TlNBd0xqY3pORFE1TWtNd0xqYzFNRFE1TXlBd0xqY3pOalV3TVNBd0xqYzBPRGczTVNBd0xqY3pPREU0TmlBd0xqYzBOamt3TlNBd0xqY3pPVE00TTB3d0xqVTVNREV3TlNBd0xqZ3pORGs0TTBNd0xqVTROems1TVNBd0xqZ3pOakU0TmlBd0xqVTROVFl3TkNBd0xqZ3pOamd5T0NBd0xqVTRNekUzTVNBd0xqZ3pOamcwT1ZZd0xqZ3pOamcwT1ZwTk1DNDFNVE14TnpFZ01DNDNOall4T0ROTU1DNDFPRE14TnpFZ01DNDRNRGM1TVRaTU1DNDNNalkyTXpnZ01DNDNNakF3TkRsV01DNDJNalF4T0RORE1DNDNNalkyTkRJZ01DNDJNakU0TWlBd0xqY3lOekkzTkNBd0xqWXhPVFV3TVNBd0xqY3lPRFEyT1NBd0xqWXhOelEyTTBNd0xqY3lPVFkyTkNBd0xqWXhOVFF5TlNBd0xqY3pNVE0zT1NBd0xqWXhNemMwSURBdU56TXpORE00SURBdU5qRXlOVGd6VERBdU56a3lOVEExSURBdU5UYzRPVGd6VERBdU56UXlPVEExSURBdU5UVXhOalE1UXpBdU56TTJNamdnTUM0MU5UY3pOQ0F3TGpjeU56a3dPU0F3TGpVMk1EVTVNeUF3TGpjeE9URTRJREF1TlRZd09EWTRRekF1TnpFd05EVXlJREF1TlRZeE1UUTBJREF1TnpBeE9Ea3hJREF1TlRVNE5ESTJJREF1TmprME9USXhJREF1TlRVek1UWTFRekF1TmpnM09UVWdNQzQxTkRjNU1EVWdNQzQyT0RJNU9EZ2dNQzQxTkRBME1UZ2dNQzQyT0RBNE5Ua2dNQzQxTXpFNU5EbERNQzQyTnpnM016RWdNQzQxTWpNME56a2dNQzQyTnprMU5qTWdNQzQxTVRRMU16WWdNQzQyT0RNeU1UZ2dNQzQxTURZMk1EVkRNQzQyT0RZNE56TWdNQzQwT1RnMk56UWdNQzQyT1RNeE16RWdNQzQwT1RJeU16RWdNQzQzTURBNU5USWdNQzQwT0Rnek5EZERNQzQzTURnM056UWdNQzQwT0RRME5qTWdNQzQzTVRjMk9Ea2dNQzQwT0RNek56RWdNQzQzTWpZeU1UY2dNQzQwT0RVeU5UTkRNQzQzTXpRM05EUWdNQzQwT0RjeE16UWdNQzQzTkRJek56SWdNQzQwT1RFNE56WWdNQzQzTkRjNE16TWdNQzQwT1RnMk9URkRNQzQzTlRNeU9UUWdNQzQxTURVMU1EWWdNQzQzTlRZeU5pQXdMalV4TXprNE15QXdMamMxTmpJek9DQXdMalV5TWpjeE5rTXdMamMxTmpNMk9TQXdMalV5TkRVNE1TQXdMamMxTmpNMk9TQXdMalV5TmpRMU1pQXdMamMxTmpJek9DQXdMalV5T0RNeE5rd3dMamd3TnpFM01pQXdMalUxTmpNeE5sWXdMalF5T0RrNE0wd3dMamN6TXpNd05TQXdMak00TnpVeE5rTXdMamN6TVRJME5pQXdMak00TmpNMU9TQXdMamN5T1RVek1TQXdMak00TkRZM05DQXdMamN5T0RNek5pQXdMak00TWpZek5rTXdMamN5TnpFME1TQXdMak00TURVNU9DQXdMamN5TmpVd09TQXdMak0zT0RJM09TQXdMamN5TmpVd05TQXdMak0zTlRreE5sWXdMak0wTURBMVNEQXVOamc1TnpBMVF6QXVOamcyTlRjM0lEQXVNelE0TkRrNUlEQXVOamd3TlRjM0lEQXVNelUxTlRjNUlEQXVOamN5TnpVMklEQXVNell3TURVeFF6QXVOalkwT1RNMElEQXVNelkwTlRJMElEQXVOalUxTnprZ01DNHpOall4TURNZ01DNDJORFk1TWpFZ01DNHpOalExTVRSRE1DNDJNemd3TlRNZ01DNHpOakk1TWpVZ01DNDJNekF3TWpVZ01DNHpOVGd5TmpnZ01DNDJNalF5TkRRZ01DNHpOVEV6TlRsRE1DNDJNVGcwTmpJZ01DNHpORFEwTkRrZ01DNDJNVFV5T1RRZ01DNHpNelUzTWpZZ01DNDJNVFV5T1RRZ01DNHpNalkzTVRaRE1DNDJNVFV5T1RRZ01DNHpNVGMzTURjZ01DNDJNVGcwTmpJZ01DNHpNRGc1T0RRZ01DNDJNalF5TkRRZ01DNHpNREl3TnpSRE1DNDJNekF3TWpVZ01DNHlPVFV4TmpRZ01DNDJNemd3TlRNZ01DNHlPVEExTURjZ01DNDJORFk1TWpFZ01DNHlPRGc1TVRoRE1DNDJOVFUzT1NBd0xqSTROek15T1NBd0xqWTJORGt6TkNBd0xqSTRPRGt3T1NBd0xqWTNNamMxTmlBd0xqSTVNek00TVVNd0xqWTRNRFUzTnlBd0xqSTVOemcxTkNBd0xqWTROalUzTnlBd0xqTXdORGt6TkNBd0xqWTRPVGN3TlNBd0xqTXhNek00TTBnd0xqY3lOall6T0ZZd0xqSTRNREExVERBdU5UZ3pNRE00SURBdU1Ua3lNVGd6VERBdU5URXpNekExSURBdU1qTXpPVEUyVmpBdU16Z3dOVGd6VERBdU5UZzNORE00SURBdU5ESXpOVEUyUXpBdU5UazBNekF4SURBdU5ERTRNelVnTUM0Mk1ESTNNRGdnTUM0ME1UVTJOVE1nTUM0Mk1URXlPVFlnTUM0ME1UVTROakZETUM0Mk1UazRPRE1nTUM0ME1UWXdOamtnTUM0Mk1qZ3hORGtnTUM0ME1Ua3hOekVnTUM0Mk16UTNOVFFnTUM0ME1qUTJOak5ETUM0Mk5ERXpOVGtnTUM0ME16QXhOVFlnTUM0Mk5EVTVNVFlnTUM0ME16YzNNVGdnTUM0Mk5EYzJPRFlnTUM0ME5EWXhNalJETUM0Mk5EazBOVGNnTUM0ME5UUTFNamtnTUM0Mk5EZ3pNemNnTUM0ME5qTXlPRGNnTUM0Mk5EUTFNRGtnTUM0ME56QTVOemRETUM0Mk5EQTJPQ0F3TGpRM09EWTJOeUF3TGpZek5ETTJPQ0F3TGpRNE5EZ3pPU0F3TGpZeU5qVTVOQ0F3TGpRNE9EUTVORU13TGpZeE9EZ3hPU0F3TGpRNU1qRTBPQ0F3TGpZeE1EQXpPU0F3TGpRNU16QTNJREF1TmpBeE5qYzFJREF1TkRreE1URXhRekF1TlRrek16RXhJREF1TkRnNU1UVXlJREF1TlRnMU9EVTBJREF1TkRnME5ESTNJREF1TlRnd05URXhJREF1TkRjM04wTXdMalUzTlRFMk9DQXdMalEzTURrM015QXdMalUzTWpJMU15QXdMalEyTWpZMElEQXVOVGN5TWpNNElEQXVORFUwTURWRE1DNDFOekl5TWpjZ01DNDBOVEV6TmpJZ01DNDFOekkwT1RVZ01DNDBORGcyT0RFZ01DNDFOek13TXpnZ01DNDBORFl3TlV3d0xqUTVNek13TlNBd0xqUXdNREExUXpBdU5Ea3hNamc1SURBdU16azRPRGcySURBdU5EZzVOakUwSURBdU16azNNakUySURBdU5EZzRORFEwSURBdU16azFNakEwUXpBdU5EZzNNamMxSURBdU16a3pNVGt5SURBdU5EZzJOalV5SURBdU16a3dPVEVnTUM0ME9EWTJNemdnTUM0ek9EZzFPRE5XTUM0eU16TTVNVFpNTUM0ME1UWTNOekVnTUM0eE9USXhPRE5NTUM0ek5UTXhOekVnTUM0eU16QTROVll3TGpNeU5EazRNMGd3TGpNeU5qVXdORll3TGpJME56RXhOa3d3TGpJM016TXdOQ0F3TGpJNE1EQTFWakF1TXpZNE5UZ3pUREF1TXpNNU9UY3hJREF1TkRBMk16RTJUREF1TkRBMk5qTTRJREF1TXpZNE5UZ3pWakF1TXpBd01EVklNQzQwTXpNek1EUldNQzR6TnpVNU1UWkRNQzQwTXpNeklEQXVNemM0TWpjNUlEQXVORE15TmpZNUlEQXVNemd3TlRrNElEQXVORE14TkRjMElEQXVNemd5TmpNMlF6QXVORE13TWpjNUlEQXVNemcwTmpjMElEQXVOREk0TlRZMElEQXVNemcyTXpVNUlEQXVOREkyTlRBMElEQXVNemczTlRFMlREQXVNelV6TVRjeElEQXVOREk0T1RnelZqQXVORGt5TkRWTU1DNDBNalkyTXpnZ01DNDFOREEwTkRsRE1DNDBNamcxTVRVZ01DNDFOREUyTlRRZ01DNDBNekF3TmpFZ01DNDFORE16TVRFZ01DNDBNekV4TXpJZ01DNDFORFV5TmpoRE1DNDBNekl5TURRZ01DNDFORGN5TWpRZ01DNDBNekkzTmpjZ01DNDFORGswTVRrZ01DNDBNekkzTnpFZ01DNDFOVEUyTkRsV01DNDFPVFkwTkRsTU1DNDBPRFl4TURVZ01DNDFOalE1T0ROV01DNDFNRGcwTlV3d0xqUXhOakV3TkNBd0xqUTJOamN4Tmt3d0xqUXlPVFF6T0NBd0xqUTBNemM0TTB3d0xqVXdOall6T0NBd0xqUTRPVEkxUXpBdU5UQTROakEwSURBdU5Ea3dORFEySURBdU5URXdNakkySURBdU5Ea3lNVE14SURBdU5URXhNelEzSURBdU5EazBNVFJETUM0MU1USTBOamtnTUM0ME9UWXhOU0F3TGpVeE16QTFNU0F3TGpRNU9EUXhOU0F3TGpVeE16QXpPQ0F3TGpVd01EY3hObFl3TGpZM05EQTBPVWd3TGpVM05ESXpPRU13TGpVM056TTJJREF1TmpZMU5qY2dNQzQxT0RNek1qZ2dNQzQyTlRnMk5UVWdNQzQxT1RFd09UZ2dNQzQyTlRReU1qbERNQzQxT1RnNE5qY2dNQzQyTkRrNE1ETWdNQzQyTURjNU5EWWdNQzQyTkRneU5Ea2dNQzQyTVRZM05EVWdNQzQyTkRrNE16ZERNQzQyTWpVMU5EVWdNQzQyTlRFME1qWWdNQzQyTXpNMU1EY2dNQzQyTlRZd05UWWdNQzQyTXpreU16a2dNQzQyTmpJNU1UbERNQzQyTkRRNU56RWdNQzQyTmprM09ESWdNQzQyTkRneE1Ea2dNQzQyTnpnME5ERWdNQzQyTkRneE1EVWdNQzQyT0Rjek9ETkRNQzQyTkRjMU5Ea2dNQzQyT1RZd01ERWdNQzQyTkRReE1qTWdNQzQzTURReE9EVWdNQzQyTXpnek56VWdNQzQzTVRBMk0wTXdMall6TWpZeU5pQXdMamN4TnpBM05DQXdMall5TkRnNE5pQXdMamN5TVRRd09TQXdMall4TmpNNE55QXdMamN5TWprME0wTXdMall3TnpnNE9DQXdMamN5TkRRM055QXdMalU1T1RFeU1TQXdMamN5TXpFeU1pQXdMalU1TVRRNE1pQXdMamN4T1RBNU5FTXdMalU0TXpnME15QXdMamN4TlRBMk5TQXdMalUzTnpjM01pQXdMamN3T0RVNU5pQXdMalUzTkRJek9DQXdMamN3TURjeE5rZ3dMalV4TWprd05Vd3dMalV4TXpFM01TQXdMamMyTmpFNE0xcE5NQzR6TmpFd016Z2dNQzQzTnpNek9ETk1NQzQwTVRZM056RWdNQzQ0TURjek9ETk1NQzQwT0RZM056RWdNQzQzTmpVMk5EbFdNQzQxT1RVNU1UWk1NQzR6TXpjM01EUWdNQzQyT0RNMk5EbE1NQzR6TWpRek56RWdNQzQyTmpBMU9ETk1NQzQwTURZMk16Z2dNQzQyTVRJd05EbFdNQzQxTlRnM01UWk1NQzR6TXprNU56RWdNQzQxTVRVeE1UWk1NQzR5TmpVek1EUWdNQzQxTlRZNU9ETk1NQzR5TlRFNU56RWdNQzQxTXpNMk5Vd3dMak15Tmprd05DQXdMalE1TVRZMVZqQXVOREk0T1RnelREQXVNall3TWpNM0lEQXVNemt4TWpWTU1DNHhPVE0xTnpFZ01DNDBNamc1T0ROV01DNDBOemMxTVRaTU1DNHlOVEEyTXpjZ01DNDBORFF3TlV3d0xqSTJNemszTVNBd0xqUTJOams0TTB3d0xqRTVNek13TkNBd0xqVXdPRFExVmpBdU5UY3dPVGd6VERBdU1qVTVPVGN4SURBdU5qQTROekUyVERBdU16STNORE00SURBdU5UWTROekUyVERBdU16UXdOemN4SURBdU5Ua3hOalE1VERBdU1qY3pNekEwSURBdU5qTXhOalE1VmpBdU56SXdNRFE1VERBdU16TXpNekEwSURBdU56VTNNalE1VERBdU5EQXlPVEEwSURBdU56RTJNekUyVERBdU5EQXpOekEwSURBdU56RTNOVEUyVERBdU5EQTJPVEEwSURBdU56RTFOalE1VERBdU5ESXdNak00SURBdU56TTROVGd6VERBdU16WXhNRE00SURBdU56Y3pNemd6V2swd0xqWXhNREl6T0NBd0xqWTNORFU0TTBNd0xqWXdOemt6T0NBd0xqWTNORFUxTmlBd0xqWXdOVFk0TXlBd0xqWTNOVEl4TkNBd0xqWXdNemMxT0NBd0xqWTNOalEzTTBNd0xqWXdNVGd6TXlBd0xqWTNOemN6TVNBd0xqWXdNRE15TlNBd0xqWTNPVFV6TXlBd0xqVTVPVFF5TnlBd0xqWTRNVFkxUXpBdU5UazROVEk0SURBdU5qZ3pOelk0SURBdU5UazRNamM1SURBdU5qZzJNVEEwSURBdU5UazROekV5SURBdU5qZzRNell6UXpBdU5UazVNVFEwSURBdU5qa3dOakl5SURBdU5qQXdNak00SURBdU5qa3lOekF4SURBdU5qQXhPRFUxSURBdU5qazBNek0zUXpBdU5qQXpORGN5SURBdU5qazFPVGN6SURBdU5qQTFOVE00SURBdU5qazNNRGt4SURBdU5qQTNOemt5SURBdU5qazNOVFE1UXpBdU5qRXdNRFEySURBdU5qazRNREE0SURBdU5qRXlNemcxSURBdU5qazNOemcySURBdU5qRTBOVEV6SURBdU5qazJPVEV5UXpBdU5qRTJOalFnTUM0Mk9UWXdNemdnTUM0Mk1UZzBOaUF3TGpZNU5EVTFNU0F3TGpZeE9UYzBJREF1TmpreU5qUXhRekF1TmpJeE1ESXhJREF1Tmprd056TXhJREF1TmpJeE56QTFJREF1TmpnNE5EZ3pJREF1TmpJeE56QTFJREF1TmpnMk1UZ3pRekF1TmpJeE5qQXhJREF1Tmpnek1qRXhJREF1TmpJd016UTNJREF1Tmpnd016azNJREF1TmpFNE1qQTRJREF1TmpjNE16TXlRekF1TmpFMk1EWTVJREF1TmpjMk1qWTNJREF1TmpFek1qRXhJREF1TmpjMU1URTBJREF1TmpFd01qTTRJREF1TmpjMU1URTJWakF1TmpjME5UZ3pXazB3TGpjeE56azNNaUF3TGpVeE1EVTRNME13TGpjeE5UWTNOeUF3TGpVeE1EVTRNeUF3TGpjeE16UXpOU0F3TGpVeE1USTJNeUF3TGpjeE1UVXlOeUF3TGpVeE1qVXpPRU13TGpjd09UWXhPU0F3TGpVeE16Z3hNaUF3TGpjd09ERXpNeUF3TGpVeE5UWXlOQ0F3TGpjd056STFOU0F3TGpVeE56YzBORU13TGpjd05qTTNOeUF3TGpVeE9UZzJNeUF3TGpjd05qRTBOeUF3TGpVeU1qRTVOaUF3TGpjd05qVTVOU0F3TGpVeU5EUTBOa013TGpjd056QTBNaUF3TGpVeU5qWTVOaUF3TGpjd09ERTBOeUF3TGpVeU9EYzJNeUF3TGpjd09UYzJPU0F3TGpVek1ETTROVU13TGpjeE1UTTVNaUF3TGpVek1qQXdPQ0F3TGpjeE16UTFPQ0F3TGpVek16RXhNaUF3TGpjeE5UY3dPU0F3TGpVek16VTJRekF1TnpFM09UVTVJREF1TlRNME1EQTRJREF1TnpJd01qa3hJREF1TlRNek56YzRJREF1TnpJeU5ERXhJREF1TlRNeU9VTXdMamN5TkRVeklEQXVOVE15TURJeUlEQXVOekkyTXpReUlEQXVOVE13TlRNMUlEQXVOekkzTmpFM0lEQXVOVEk0TmpJM1F6QXVOekk0T0RreElEQXVOVEkyTnpJZ01DNDNNamsxTnpJZ01DNDFNalEwTnpjZ01DNDNNamsxTnpJZ01DNDFNakl4T0RORE1DNDNNamswTXpRZ01DNDFNVGt5SURBdU56STRNVFV5SURBdU5URTJNemcwSURBdU56STFPVGt4SURBdU5URTBNekl6UXpBdU56SXpPRE14SURBdU5URXlNall5SURBdU56SXdPVFU0SURBdU5URXhNVEV6SURBdU56RTNPVGN5SURBdU5URXhNVEUyVmpBdU5URXdOVGd6V2swd0xqWXhNREl6T0NBd0xqUTBNVGt4TmtNd0xqWXdOemt6T0NBd0xqUTBNVGc1SURBdU5qQTFOamd6SURBdU5EUXlOVFE0SURBdU5qQXpOelU0SURBdU5EUXpPREEyUXpBdU5qQXhPRE16SURBdU5EUTFNRFkwSURBdU5qQXdNekkxSURBdU5EUTJPRFkzSURBdU5UazVOREkzSURBdU5EUTRPVGcwUXpBdU5UazROVEk0SURBdU5EVXhNVEF4SURBdU5UazRNamM1SURBdU5EVXpORE00SURBdU5UazROekV5SURBdU5EVTFOamsyUXpBdU5UazVNVFEwSURBdU5EVTNPVFUxSURBdU5qQXdNak00SURBdU5EWXdNRE0xSURBdU5qQXhPRFUxSURBdU5EWXhOamRETUM0Mk1ETTBOeklnTUM0ME5qTXpNRFlnTUM0Mk1EVTFNemdnTUM0ME5qUTBNalFnTUM0Mk1EYzNPVElnTUM0ME5qUTRPRE5ETUM0Mk1UQXdORFlnTUM0ME5qVXpOREVnTUM0Mk1USXpPRFVnTUM0ME5qVXhNVGtnTUM0Mk1UUTFNVE1nTUM0ME5qUXlORFZETUM0Mk1UWTJOQ0F3TGpRMk16TTNNU0F3TGpZeE9EUTJJREF1TkRZeE9EZzFJREF1TmpFNU56UWdNQzQwTlRrNU56UkRNQzQyTWpFd01qRWdNQzQwTlRnd05qUWdNQzQyTWpFM01EVWdNQzQwTlRVNE1UWWdNQzQyTWpFM01EVWdNQzQwTlRNMU1UWkRNQzQyTWpFMk1ERWdNQzQwTlRBMU5EVWdNQzQyTWpBek5EY2dNQzQwTkRjM015QXdMall4T0RJd09DQXdMalEwTlRZMk5VTXdMall4TmpBMk9TQXdMalEwTXpZd01TQXdMall4TXpJeE1TQXdMalEwTWpRME9DQXdMall4TURJek9DQXdMalEwTWpRMVZqQXVORFF4T1RFMldrMHdMalkxTXpNd05TQXdMak14TlRFeE5rTXdMalkxTVRBeE1TQXdMak14TlRFeE5pQXdMalkwT0RjMk9DQXdMak14TlRjNU55QXdMalkwTmpnMklEQXVNekUzTURjeFF6QXVOalEwT1RVeklEQXVNekU0TXpRMklEQXVOalF6TkRZMklEQXVNekl3TVRVNElEQXVOalF5TlRnNElEQXVNekl5TWpjM1F6QXVOalF4TnpFZ01DNHpNalF6T1RjZ01DNDJOREUwT0NBd0xqTXlOamN5T1NBd0xqWTBNVGt5T0NBd0xqTXlPRGszT1VNd0xqWTBNak0zTlNBd0xqTXpNVEl6SURBdU5qUXpORGdnTUM0ek16TXlPVFlnTUM0Mk5EVXhNRElnTUM0ek16UTVNVGxETUM0Mk5EWTNNalVnTUM0ek16WTFOREVnTUM0Mk5EZzNPVElnTUM0ek16YzJORFlnTUM0Mk5URXdORElnTUM0ek16Z3dPVE5ETUM0Mk5UTXlPVElnTUM0ek16ZzFOREVnTUM0Mk5UVTJNalFnTUM0ek16Z3pNVEVnTUM0Mk5UYzNORFFnTUM0ek16YzBNek5ETUM0Mk5UazROalFnTUM0ek16WTFOVFVnTUM0Mk5qRTJOelVnTUM0ek16VXdOamtnTUM0Mk5qSTVOU0F3TGpNek16RTJNVU13TGpZMk5ESXlOU0F3TGpNek1USTFNeUF3TGpZMk5Ea3dOU0F3TGpNeU9UQXhNU0F3TGpZMk5Ea3dOU0F3TGpNeU5qY3hOa013TGpZMk5Ea3lNeUF3TGpNeU5URTRPQ0F3TGpZMk5EWXpOU0F3TGpNeU16WTNNaUF3TGpZMk5EQTFPQ0F3TGpNeU1qSTFOa013TGpZMk16UTRNaUF3TGpNeU1EZzBNU0F3TGpZMk1qWXlPQ0F3TGpNeE9UVTFOU0F3TGpZMk1UVTBOeUF3TGpNeE9EUTNORU13TGpZMk1EUTJOaUF3TGpNeE56TTVNeUF3TGpZMU9URTRNU0F3TGpNeE5qVTBJREF1TmpVM056WTFJREF1TXpFMU9UWXpRekF1TmpVMk16VWdNQzR6TVRVek9EWWdNQzQyTlRRNE16TWdNQzR6TVRVd09UZ2dNQzQyTlRNek1EVWdNQzR6TVRVeE1UWldNQzR6TVRVeE1UWmFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWEpmTVRVek5sOHlORFEyTmlJZ2VERTlJaTB3TGpJd056QTJOeUlnZVRFOUlqRXVNakEzTURjaUlIZ3lQU0l4TGpJd056QTNJaUI1TWowaUxUQXVNakEzTURZM0lpQm5jbUZrYVdWdWRGVnVhWFJ6UFNKMWMyVnlVM0JoWTJWUGJsVnpaU0krSmlONFlUczhjM1J2Y0NCemRHOXdMV052Ykc5eVBTSWpNRFUxUmpSRklpOCtKaU40WVRzOGMzUnZjQ0J2Wm1aelpYUTlJakVpSUhOMGIzQXRZMjlzYjNJOUlpTTFOa013UVRjaUx6NG1JM2hoT3p3dmJHbHVaV0Z5UjNKaFpHbGxiblErSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE1Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMjI1IiB5PSIyMjUiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjU1IiBzdHlsZT0iaXIucmVmPTFjNTJhMmZkLTMxOGQtNGMwMS1hNjQ4LWRjNjUwODg0YTU0MztlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZXhpdFg9MTtleGl0WT0wLjU7ZXhpdER4PTA7ZXhpdER5PTA7ZW50cnlYPS0wLjA0NDtlbnRyeVk9MC41Nzg7ZW50cnlEeD0wO2VudHJ5RHk9MDtlbnRyeVBlcmltZXRlcj0wO3N0cm9rZUNvbG9yPSNCRkJGQkY7c3Ryb2tlV2lkdGg9MjtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c291cmNlUGVyaW1ldGVyU3BhY2luZz05OyIgZWRnZT0iMSIgcGFyZW50PSIxNSIgc291cmNlPSIyOSIgdGFyZ2V0PSIzMCIgdmFsdWU9IkFXUyBBdGhlbmEgLSZndDsgQVdTIFF1aWNrU2lnaHQiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjI5IiB2YWx1ZT0iQVdTIEF0aGVuYSIgc3R5bGU9ImlyLnJlZj05NmJkZGZkMi1jNTZkLTQyMWItOWI3Yi1jNTJlZjBmYjNlYTg7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9YXRoZW5hO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TVRVd01UY2dNQzQzTWpVMU5UZE1NQzQzTlRNNU5TQXdMalkyTkRBNU1VTXdMamM0TmpBMU5pQXdMall4TlRreE55QXdMamd3TkRRNU1pQXdMalUxT1Rrek5pQXdMamd3TnpJNU5DQXdMalV3TWpFeE1rTXdMamd4TURBNU5pQXdMalEwTkRJNE9DQXdMamM1TnpFMU9TQXdMak00TmpjNE55QXdMamMyT1RnMk1TQXdMak16TlRjek5VTXdMamMwTWpVMk1pQXdMakk0TkRZNE15QXdMamN3TVRreU5pQXdMakkwTVRrNU15QXdMalkxTWpJNE1TQXdMakl4TWpJeE1rTXdMall3TWpZek5pQXdMakU0TWpRek1pQXdMalUwTlRnME1TQXdMakUyTmpZM055QXdMalE0TnprME9TQXdMakUyTmpZeU5rTXdMalF5TnpjMk9DQXdMakUyTmprME9TQXdMak0yT0RnNE5pQXdMakU0TkRFMU1pQXdMak14TnprNU55QXdMakl4TmpJM09VTXdMakkyTnpFd09DQXdMakkwT0RRd05pQXdMakl5TmpJMU5DQXdMakk1TkRFMk55QXdMakl3TURBNE1TQXdMak0wT0RNMU9Vd3dMakl5TkRBNE1pQXdMak0xT1RneU5VTXdMakkxTWpnMU5pQXdMakk1T1Rrek5TQXdMak13TVRFeE1TQXdMakkxTVRVNE9DQXdMak0yTURrME55QXdMakl5TWpkRE1DNDBNakEzT0RJZ01DNHhPVE00TVRFZ01DNDBPRGcyTlRNZ01DNHhPRFl3T1RNZ01DNDFOVE0wTkRjZ01DNHlNREE0TURoRE1DNDJNVGd5TkRJZ01DNHlNVFUxTWpNZ01DNDJOell4TWpFZ01DNHlOVEU0TURFZ01DNDNNVGMyTURnZ01DNHpNRE0zUXpBdU56VTVNRGsySURBdU16VTFOaUF3TGpjNE1UY3pOQ0F3TGpReU1EQTBPQ0F3TGpjNE1UZ3hOeUF3TGpRNE5qUTVNa013TGpjNE1UazJPU0F3TGpVME1qWTBNaUF3TGpjMk5UZ3dNeUF3TGpVNU56WXlOaUF3TGpjek5USTRNeUF3TGpZME5EYzFPRXd3TGpZNE5EYzFJREF1TlRrME1Ea3hRekF1TmprM09EazRJREF1TlRZM016WXhJREF1TnpBMU5EYzRJREF1TlRNNE1qTTVJREF1TnpBM01ESTVJREF1TlRBNE5EbERNQzQzTURnMU56a2dNQzQwTnpnM05ESWdNQzQzTURRd05qa2dNQzQwTkRnNU9Ea2dNQzQyT1RNM056RWdNQzQwTWpFd016ZERNQzQyT0RNME56TWdNQzR6T1RNd09EVWdNQzQyTmpjMk1ESWdNQzR6TmpjMU1UY2dNQzQyTkRjeE1qSWdNQzR6TkRVNE9EVkRNQzQyTWpZMk5ESWdNQzR6TWpReU5UUWdNQzQyTURFNU9DQXdMak13TnpBd09TQXdMalUzTkRZek15QXdMakk1TlRFNU9FTXdMalUwTnpJNE5pQXdMakk0TXpNNE9DQXdMalV4TnpneU15QXdMakkzTnpJMU55QXdMalE0T0RBek5TQXdMakkzTnpFM09VTXdMalExT0RJME5pQXdMakkzTnpFd01TQXdMalF5T0RjMU1pQXdMakk0TXpBM055QXdMalF3TVRNME15QXdMakk1TkRjME5VTXdMak0zTXprek5TQXdMak13TmpReE1pQXdMak0wT1RFNE15QXdMak15TXpVeU9DQXdMak15T0RVNUlEQXVNelExTURVeVF6QXVNekEzT1RrM0lEQXVNelkyTlRjMklEQXVNamt4T1RreklEQXVNemt5TURZeElEQXVNamd4TlRRNElEQXVOREU1T1RVNFNEQXVNVGt6TkRFMVZqQXVORFEyTmpJMVNEQXVNamMwTURneVF6QXVNamN4TVRRMUlEQXVORFU1TnpZM0lEQXVNalk1TkRreUlEQXVORGN6TVRZeklEQXVNalk1TVRRNElEQXVORGcyTmpJMVNEQXVNVFkyTnpRNFZqQXVOVEV6TWpreFNEQXVNamN3TURneVF6QXVNamN4TVRRM0lEQXVOVEkyT0RReElEQXVNamN6TmpBMElEQXVOVFF3TWpRMUlEQXVNamMzTkRFMUlEQXVOVFV6TWpreFNEQXVNVGswT0RneFZqQXVOVGM1T1RVNFNEQXVNamczTURFMVF6QXVNams1TVRJeklEQXVOakE0TWpNMUlEQXVNekUzTURRZ01DNDJNek0yTlRFZ01DNHpNemsyTURRZ01DNDJOVFExTlRkRE1DNHpOakl4TmpnZ01DNDJOelUwTmpNZ01DNHpPRGc0TnpVZ01DNDJPVEV6T1RNZ01DNDBNVGM1T1RNZ01DNDNNREV6TVRKRE1DNDBORGN4TVNBd0xqY3hNVEl6TWlBd0xqUTNOems0TnlBd0xqY3hORGt5SURBdU5UQTROakl4SURBdU56RXlNVE0zUXpBdU5UTTVNalUySURBdU56QTVNelV6SURBdU5UWTRPVFl6SURBdU56QXdNVFl5SURBdU5UazFPREUySURBdU5qZzFNVFU0VERBdU5qUTBOelVnTUM0M016UXdPVEZETUM0MU56azVPVGtnTUM0M056VXdOek1nTUM0MU1ERTNPREVnTUM0M09Ea3dPRGtnTUM0ME1qWTRNamtnTUM0M056TXhOREpETUM0ek5URTROellnTUM0M05UY3hPVFFnTUM0eU9EWXhOQ0F3TGpjeE1qVTFJREF1TWpRek5qZ3lJREF1TmpRNE56VTRUREF1TWpJeE5UUTRJREF1TmpZek5UVTRRekF1TWpZNE5ETTNJREF1TnpNME1ERWdNQzR6TkRFek1qUWdNQzQzT0RNd01Ua2dNQzQwTWpReU5qRWdNQzQzT1RrNE5qRkRNQzQxTURjeE9UY2dNQzQ0TVRZM01ETWdNQzQxT1RNME1qZ2dNQzQ0TURBd01EWWdNQzQyTmpRd09ETWdNQzQzTlRNME1qUk1NQzQzTWpVMU5TQXdMamd4TkRnNVF6QXVOek0zTXprMklEQXVPREkyTnpVMElEQXVOelV6TkRjZ01DNDRNek0wTWpjZ01DNDNOekF5TXpZZ01DNDRNek0wTXpsRE1DNDNPRGN3TURJZ01DNDRNek0wTlRJZ01DNDRNRE13T0RZZ01DNDRNalk0TURNZ01DNDRNVFE1TlNBd0xqZ3hORGsxTjBNd0xqZ3lOamd4TkNBd0xqZ3dNekV4TVNBd0xqZ3pNelE0TmlBd0xqYzROekF6TnlBd0xqZ3pNelE1T1NBd0xqYzNNREkzTVVNd0xqZ3pNelV4TVNBd0xqYzFNelV3TlNBd0xqZ3lOamcyTXlBd0xqY3pOelF5TVNBd0xqZ3hOVEF4TnlBd0xqY3lOVFUxTjFZd0xqY3lOVFUxTjFwTk1DNDBPRGc0T0RJZ01DNDJPRFl6TlRoRE1DNDBOVEEyTmpVZ01DNDJPRFl6TlRnZ01DNDBNVE16TURjZ01DNDJOelV3TWpNZ01DNHpPREUxTXpJZ01DNDJOVE0zT0RoRE1DNHpORGszTlRjZ01DNDJNekkxTlRNZ01DNHpNalE1T1RVZ01DNDJNREl6TnpJZ01DNHpNVEF6TnpZZ01DNDFOamN3TmpKRE1DNHlPVFUzTlRjZ01DNDFNekUzTlRFZ01DNHlPVEU1TXpnZ01DNDBPVEk0T1RnZ01DNHlPVGswTURRZ01DNDBOVFUwTVRoRE1DNHpNRFk0TmprZ01DNDBNVGM1TXpjZ01DNHpNalV5T0RNZ01DNHpPRE0xTVRNZ01DNHpOVEl6TVRZZ01DNHpOVFkwT1RoRE1DNHpOemt6TkRrZ01DNHpNamswT0RRZ01DNDBNVE0zT0RjZ01DNHpNVEV3T1RRZ01DNDBOVEV5TnpNZ01DNHpNRE0yTlRWRE1DNDBPRGczTlRrZ01DNHlPVFl5TVRVZ01DNDFNamMyTURrZ01DNHpNREF3TmlBd0xqVTJNamt4SURBdU16RTBOekEwUXpBdU5UazRNakVnTUM0ek1qa3pORGNnTUM0Mk1qZ3pOelVnTUM0ek5UUXhNeUF3TGpZME9UVTRPQ0F3TGpNNE5Ua3hPVU13TGpZM01EZ3dNU0F3TGpReE56Y3dPQ0F3TGpZNE1qRXdPU0F3TGpRMU5UQTNOU0F3TGpZNE1qQTRNeUF3TGpRNU16STVNa013TGpZNE1UazNOeUF3TGpVME5EUTROaUF3TGpZMk1UVTROQ0F3TGpVNU16VTFNaUF3TGpZeU5UTTNNU0F3TGpZeU9UYzBRekF1TlRnNU1UVTRJREF1TmpZMU9USTRJREF1TlRRd01EYzRJREF1TmpnMk1qZzNJREF1TkRnNE9EZ3lJREF1TmpnMk16VTRXazB3TGpjNU5UVTFJREF1TnprMU9ESTBRekF1TnpnNE5qUXhJREF1T0RBeU5EZzRJREF1TnpjNU5ERTJJREF1T0RBMk1qRXlJREF1TnpZNU9ERTNJREF1T0RBMk1qRXlRekF1TnpZd01qRTNJREF1T0RBMk1qRXlJREF1TnpVd09Ua3lJREF1T0RBeU5EZzRJREF1TnpRME1EZ3pJREF1TnprMU9ESTBUREF1TmpFNE5EZ3pJREF1Tmpjd01qSTBRekF1TmpNNE5ERXhJREF1TmpVMU5EYzJJREF1TmpVMU5qZ2dNQzQyTXpjME5DQXdMalkyT1RVMUlEQXVOakUyT0RreFREQXVOemsxTmpneklEQXVOelF6TmpreFF6QXVOems1TURjNElEQXVOelEzTURZeUlEQXVPREF4TnpjeUlEQXVOelV4TURjeElEQXVPREF6TmpFZ01DNDNOVFUwT0RkRE1DNDRNRFUwTkRnZ01DNDNOVGs1TURRZ01DNDRNRFl6T1RVZ01DNDNOalEyTkNBd0xqZ3dOak01TlNBd0xqYzJPVFF5TkVNd0xqZ3dOak01TlNBd0xqYzNOREl3T0NBd0xqZ3dOVFEwT0NBd0xqYzNPRGswTkNBd0xqZ3dNell4SURBdU56Z3pNell4UXpBdU9EQXhOemN5SURBdU56ZzNOemMzSURBdU56azVNRGM0SURBdU56a3hOemcySURBdU56azFOamd6SURBdU56azFNVFUzVERBdU56azFOVFVnTUM0M09UVTRNalJhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVOakV4TnpjMUlEQXVOVEV5TmpFNVF6QXVOakEyTVRFeUlEQXVOVEF3TmpneUlEQXVOVGszTkRneElEQXVORGt3TXprNUlEQXVOVGcyTnpBNElEQXVORGd5TnpVeVREQXVOVGsxTlRBNElEQXVOREUzT0RFNVZqQXVOREUyTURnMVZqQXVOREUwTWpFNVF6QXVOVGsxTlRBNElEQXVOREV6TlRVeUlEQXVOVGsxTlRBNElEQXVOREV5T0RnMUlEQXVOVGsxTlRBNElEQXVOREV5TXpVeVF6QXVOVGsxTlRBNElEQXVNemd3TnpVeUlEQXVOVEkxT1RBNElEQXVNelk1TURFNUlEQXVORGd5TURReElEQXVNelk1TURFNVF6QXVORE00TVRjMElEQXVNelk1TURFNUlEQXVNelk0TnpBNElEQXVNemd3TnpVeUlEQXVNelk0TnpBNElEQXVOREV5TXpVeVF6QXVNelk0TmpRMklEQXVOREV5T1RjeklEQXVNelk0TmpRMklEQXVOREV6TlRrNElEQXVNelk0TnpBNElEQXVOREUwTWpFNVZqQXVOREUyTURnMVF6QXVNelk0TmpNMElEQXVOREUyTmpZeElEQXVNelk0TmpNMElEQXVOREUzTWpReklEQXVNelk0TnpBNElEQXVOREUzT0RFNVF6QXVNelk0TnpBNElEQXVOREUzT0RFNUlEQXVNelk0TnpBNElEQXVOREUzT0RFNUlEQXVNelk0TnpBNElEQXVOREUzT0RFNVREQXVNemt3T1RjMElEQXVOVGd6T0RFNFF6QXVNemt5TnpBNElEQXVOakUyT0RnMUlEQXVORGN5TkRReElEQXVOakUzT0RFNElEQXVORGd4TmpReElEQXVOakUzT0RFNFF6QXVORGs0T1RRZ01DNDJNVGM1TWpFZ01DNDFNVFl4T1RnZ01DNDJNVFl4TXpJZ01DNDFNek14TURnZ01DNDJNVEkwT0RWRE1DNDFNemczTWpZZ01DNDJNVEV4TmprZ01DNDFORFF5TlNBd0xqWXdPVFEzTmlBd0xqVTBPVFkwTVNBd0xqWXdOelF4T0VNd0xqVTJOREUzTlNBd0xqWXdNVFk0TlNBd0xqVTNNVGMzTkNBd0xqVTVOREE0TlNBd0xqVTNNak13T0NBd0xqVTRNemd4T0V3d0xqVTNPVEkwTVNBd0xqVXpNVGsxTWtNd0xqVTRNell5TXlBd0xqVXpNamt3TVNBd0xqVTRPREE1TVNBd0xqVXpNek01TWlBd0xqVTVNalUzTkNBd0xqVXpNelF4T0VNd0xqVTVOVGt4T1NBd0xqVXpNemt3TVNBd0xqVTVPVE16TWlBd0xqVXpNek0zTWlBd0xqWXdNak0zTkNBd0xqVXpNVGc1T0VNd0xqWXdOVFF4TlNBd0xqVXpNRFF5TlNBd0xqWXdOemswTmlBd0xqVXlPREEzTlNBd0xqWXdPVFkwTVNBd0xqVXlOVEUxTWtNd0xqWXhNRGcwT1NBd0xqVXlNek15TmlBd0xqWXhNVFkyTXlBd0xqVXlNVEkyT0NBd0xqWXhNakF6SURBdU5URTVNVEZETUM0Mk1USXpPVGNnTUM0MU1UWTVOVElnTUM0Mk1USXpNU0F3TGpVeE5EYzBNU0F3TGpZeE1UYzNOU0F3TGpVeE1qWXhPVll3TGpVeE1qWXhPVnBOTUM0MU5UYzJOREVnTUM0ME9UY3lPRFZETUM0MU5EQTFOelFnTUM0ME9UQTNOVElnTUM0MU1UazVNRGdnTUM0ME9ERTRNVGtnTUM0MU1EQXpNRGdnTUM0ME56SXpOVEpETUM0ME9Ua3hPREVnTUM0ME5qa3dNellnTUM0ME9UY3hOak1nTUM0ME5qWXdPVFFnTUM0ME9UUTBOelVnTUM0ME5qTTROVU13TGpRNU1UYzROeUF3TGpRMk1UWXdOU0F3TGpRNE9EVXpNaUF3TGpRMk1ERTBOQ0F3TGpRNE5UQTJPQ0F3TGpRMU9UWXlOME13TGpRNE1UWXdOU0F3TGpRMU9URXhNU0F3TGpRM09EQTJOU0F3TGpRMU9UVTFPQ0F3TGpRM05EZ3pPU0F3TGpRMk1Ea3lRekF1TkRjeE5qRXpJREF1TkRZeU1qZ3lJREF1TkRZNE9ESTBJREF1TkRZME5UQTJJREF1TkRZMk56YzRJREF1TkRZM016UTVRekF1TkRZME56TXpJREF1TkRjd01Ua3lJREF1TkRZek5URWdNQzQwTnpNMU5ETWdNQzQwTmpNeU5ETWdNQzQwTnpjd016VkRNQzQwTmpJNU56Y2dNQzQwT0RBMU1qY2dNQzQwTmpNMk56Y2dNQzQwT0RRd01qUWdNQzQwTmpVeU5qZ2dNQzQwT0RjeE5EVkRNQzQwTmpZNE5UZ2dNQzQwT1RBeU5qVWdNQzQwTmpreU56Y2dNQzQwT1RJNE9EWWdNQzQwTnpJeU5pQXdMalE1TkRjeU1rTXdMalEzTlRJME1pQXdMalE1TmpVMU9DQXdMalEzT0RZM01pQXdMalE1TnpVek55QXdMalE0TWpFM05DQXdMalE1TnpVMU1rTXdMalE0TkRNMk5TQXdMalE1TnpVMk5pQXdMalE0TmpVek9DQXdMalE1TnpFMU9TQXdMalE0T0RVM05DQXdMalE1TmpNMU1rTXdMalV3T1RnMU9TQXdMalV3TmprM015QXdMalV6TVRjeE5TQXdMalV4TmpReElEQXVOVFUwTURReElEQXVOVEkwTmpFNFREQXVOVFEyTnpBNElEQXVOVGM1TlRVeVF6QXVOVFEwTnpnMElEQXVOVGd3T0NBd0xqVTBNamN5TnlBd0xqVTRNVGd5T1NBd0xqVTBNRFUzTkNBd0xqVTRNall4T0VNd0xqVXpOakl6SURBdU5UZzBNak14SURBdU5UTXhOemMwSURBdU5UZzFOVEl6SURBdU5USTNNalF4SURBdU5UZzJORGcxUXpBdU5URXlNelE1SURBdU5UZzVOekV6SURBdU5EazNNVFExSURBdU5Ua3hNamM0SURBdU5EZ3hPVEE0SURBdU5Ua3hNVFV5UXpBdU5EVTVPRFk1SURBdU5Ua3lORFF4SURBdU5ETTNPRE01SURBdU5UZzRORFkxSURBdU5ERTNOalF4SURBdU5UYzVOVFV5VERBdU16azRPVGMwSURBdU5EUXdOelV5UXpBdU5EVXpNekkwSURBdU5EVTFOVEEzSURBdU5URXdOakkxSURBdU5EVTFOVEEzSURBdU5UWTBPVGMwSURBdU5EUXdOelV5VERBdU5UVTNOalF4SURBdU5EazNNamcxV2swd0xqUTRNakUzTkNBd0xqUXlOVEUxTWtNd0xqUTFNelUxTkNBd0xqUXlOalUyT0NBd0xqUXlORGsxSURBdU5ESXlNREkzSURBdU16azRNVGMwSURBdU5ERXhPREU1UXpBdU5ESTBORGsxSURBdU16azVPREl4SURBdU5EVXpNamMwSURBdU16azBNakF5SURBdU5EZ3lNVGMwSURBdU16azFOREU1UXpBdU5URXhNRGMxSURBdU16azBNakF5SURBdU5UTTVPRFUwSURBdU16azVPREl4SURBdU5UWTJNVGMwSURBdU5ERXhPREU1UXpBdU5UTTVOREF6SURBdU5ESXlNRFF6SURBdU5URXdOemsySURBdU5ESTJOVGd6SURBdU5EZ3lNVGMwSURBdU5ESTFNVFV5VmpBdU5ESTFNVFV5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZaejRtSTNoaE96d3ZaejRtSTNoaE96eGtaV1p6UGlZamVHRTdQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p3WVdsdWREQmZiR2x1WldGeUlpQjRNVDBpTFRBdU1qQTNNRFkzSWlCNU1UMGlNUzR5TURjeE1TSWdlREk5SWpFdU1qQTNNVFVpSUhreVBTSXRNQzR5TURjeE1EY2lJR2R5WVdScFpXNTBWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWo0bUkzaGhPenh6ZEc5d0lITjBiM0F0WTI5c2IzSTlJaU0wUkRJM1FUZ2lMejRtSTNoaE96eHpkRzl3SUc5bVpuTmxkRDBpTVNJZ2MzUnZjQzFqYjJ4dmNqMGlJMEV4TmpaR1JpSXZQaVlqZUdFN1BDOXNhVzVsWVhKSGNtRmthV1Z1ZEQ0bUkzaGhPenhqYkdsd1VHRjBhQ0JwWkQwaVkyeHBjREFpUGlZamVHRTdQSEpsWTNRZ2QybGtkR2c5SWpFaUlHaGxhV2RvZEQwaU1TSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE1Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMjMiIHk9IjQ5IiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIzMCIgdmFsdWU9IkFXUyBRdWlja1NpZ2h0IiBzdHlsZT0iaXIucmVmPWNiY2VmZjk2LWUxNWMtNDFkYS1hNWE5LTc3N2VjMjEyOWMzODtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj1DRC1RVUlDS1NJR0hUO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQSEJoZEdnZ1pEMGlUVEVnTUVnd1ZqRklNVll3V2lJZ1ptbHNiRDBpZFhKc0tDTndZV2x1ZERCZmJHbHVaV0Z5S1NJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU56azBPRFkxSURBdU16WTJOalU1U0RBdU56a3pNalkxVmpBdU56a3pNekkyU0RBdU1qQTJOVGs0VmpBdU56TTRNalU1U0RBdU1qQTBPVGs0UXpBdU1UazJOREU0SURBdU56TTRNVEF5SURBdU1UZzNPVE15SURBdU56TTJORE15SURBdU1UYzVPVE15SURBdU56TXpNekkyVmpBdU9EQTJOalU1UXpBdU1UYzVPVE15SURBdU9ERXdNVGsySURBdU1UZ3hNek0ySURBdU9ERXpOVGczSURBdU1UZ3pPRE0zSURBdU9ERTJNRGczUXpBdU1UZzJNek0zSURBdU9ERTROVGc0SURBdU1UZzVOekk1SURBdU9ERTVPVGt6SURBdU1Ua3pNalkxSURBdU9ERTVPVGt6U0RBdU9EQTJOVGs0UXpBdU9ERXdNVE0wSURBdU9ERTVPVGt6SURBdU9ERXpOVEkySURBdU9ERTROVGc0SURBdU9ERTJNREkySURBdU9ERTJNRGczUXpBdU9ERTROVEkzSURBdU9ERXpOVGczSURBdU9ERTVPVE15SURBdU9ERXdNVGsySURBdU9ERTVPVE15SURBdU9EQTJOalU1VmpBdU16WXlNVEkyUXpBdU9ERXhPVEl6SURBdU16WTFNVFUxSURBdU9EQXpOREkzSURBdU16WTJOamt4SURBdU56azBPRFkxSURBdU16WTJOalU1VmpBdU16WTJOalU1V2swd0xqZ3dOalU1T0NBd0xqRTNPVGs1TTBnd0xqRTVNekkyTlVNd0xqRTRPVGN5T1NBd0xqRTNPVGs1TXlBd0xqRTROak16TnlBd0xqRTRNVE01TnlBd0xqRTRNemd6TnlBd0xqRTRNemc1T0VNd0xqRTRNVE16TmlBd0xqRTROak01T0NBd0xqRTNPVGt6TWlBd0xqRTRPVGM1SURBdU1UYzVPVE15SURBdU1Ua3pNekkyVmpBdU5UazVPVGt6UXpBdU1UZzNPVFFnTUM0MU9UWTVOalFnTUM0eE9UWTBNellnTUM0MU9UVTBNamdnTUM0eU1EUTVPVGdnTUM0MU9UVTBOVGxJTUM0eU1EWTFPVGhXTUM0eU1EWTJOVGxJTUM0M09UTXlOalZXTUM0eU1qTXhPVE5JTUM0M09UUTROalZETUM0NE1ETTBNelFnTUM0eU1qTXdOemtnTUM0NE1URTVORFVnTUM0eU1qUTJNVGdnTUM0NE1UazVNeklnTUM0eU1qYzNNalpXTUM0eE9UTXpNalpETUM0NE1UazVNeklnTUM0eE9EazNPU0F3TGpneE9EVXlOeUF3TGpFNE5qTTVPQ0F3TGpneE5qQXlOaUF3TGpFNE16ZzVPRU13TGpneE16VXlOaUF3TGpFNE1UTTVOeUF3TGpneE1ERXpOQ0F3TGpFM09UazVNeUF3TGpnd05qVTVPQ0F3TGpFM09UazVNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDNPVFEzT0RnZ01DNHlORE13TkRKRE1DNDNPREV3TXpJZ01DNHlORE13TkRJZ01DNDNOamM0TXprZ01DNHlORGcxTURjZ01DNDNOVGd4TVRJZ01DNHlOVGd5TXpORE1DNDNORGd6T0RVZ01DNHlOamM1TmlBd0xqYzBNamt5TVNBd0xqSTRNVEUxTXlBd0xqYzBNamt5TVNBd0xqSTVORGt3T1VNd0xqYzBNamM0SURBdU16QXlPRGt5SURBdU56UTBOallnTUM0ek1UQTNPREVnTUM0M05EZ3pPRGNnTUM0ek1UYzROREpNTUM0MU1qVXpNakVnTUM0MU5EUTFNRGxETUM0MU1qRTBPRFFnTUM0MU5ESTBPVEVnTUM0MU1UYzBNRGNnTUM0MU5EQTVOamdnTUM0MU1UTXhPRGNnTUM0MU16azVOelZXTUM0ME16UTJOREpETUM0MU1qSTFNVGtnTUM0ME16SXhOVE1nTUM0MU16QTVOamNnTUM0ME1qY3hNREVnTUM0MU16YzFOellnTUM0ME1qQXdOVGxETUM0MU5EUXhPRFVnTUM0ME1UTXdNVGNnTUM0MU5EZzJPVEVnTUM0ME1EUXlOallnTUM0MU5UQTFPRFFnTUM0ek9UUTNPVFZETUM0MU5USTBOemNnTUM0ek9EVXpNalVnTUM0MU5URTJPREVnTUM0ek56VTFNVFFnTUM0MU5EZ3lPRFlnTUM0ek5qWTBOekpETUM0MU5EUTRPVElnTUM0ek5UYzBNekVnTUM0MU16a3dNelFnTUM0ek5EazFNaUF3TGpVek1UTTNOaUF3TGpNME16WXpOa013TGpVeU16Y3hPQ0F3TGpNek56YzFNU0F3TGpVeE5EVTJOaUF3TGpNek5ERXlPQ0F3TGpVd05EazFOU0F3TGpNek16RTNOVU13TGpRNU5UTTBOU0F3TGpNek1qSXlNeUF3TGpRNE5UWTFPU0F3TGpNek16azRJREF1TkRjMk9UazJJREF1TXpNNE1qUTNRekF1TkRZNE16TXlJREF1TXpReU5URTBJREF1TkRZeE1ETTFJREF1TXpRNU1USXhJREF1TkRVMU9UTXlJREF1TXpVM016SXhRekF1TkRVd09ESTVJREF1TXpZMU5USWdNQzQwTkRneE1qTWdNQzR6TnpRNU9EUWdNQzQwTkRneE1qRWdNQzR6T0RRMk5ESkRNQzQwTkRnd09EVWdNQzR6T1RBek56SWdNQzQwTkRrd056Z2dNQzR6T1RZd05qTWdNQzQwTlRFd05UUWdNQzQwTURFME5ESk1NQzR5TWprME5UUWdNQzQyTWpFd05ESkRNQzR5TVRrME56UWdNQzQyTVRVM01EUWdNQzR5TURnd01pQXdMall4TXpjNE5pQXdMakU1TmpnME5pQXdMall4TlRVNE1rTXdMakU0TlRZM01pQXdMall4TnpNM055QXdMakUzTlRNNU5TQXdMall5TWpjNE55QXdMakUyTnpVNU1TQXdMall6TURrNE0wTXdMakUxT1RjNE5pQXdMall6T1RFM09DQXdMakUxTkRnNE5DQXdMalkwT1Rjd055QXdMakUxTXpZek5pQXdMalkyTURrMU5VTXdMakUxTWpNNE9DQXdMalkzTWpJd015QXdMakUxTkRnMk15QXdMalk0TXpVMUlEQXVNVFl3TmpneElEQXVOamt6TWpVM1F6QXVNVFkyTlNBd0xqY3dNamsyTkNBd0xqRTNOVE0wTVNBd0xqY3hNRFE1TlNBd0xqRTROVGcwT1NBd0xqY3hORFk1TjBNd0xqRTVOak0xT0NBd0xqY3hPRGc1T0NBd0xqSXdOemsxTkNBd0xqY3hPVFV6TnlBd0xqSXhPRGcyTVNBd0xqY3hOalV4TjBNd0xqSXlPVGMyT0NBd0xqY3hNelE1TmlBd0xqSXpPVE00TXlBd0xqY3dOams0TWlBd0xqSTBOakl6TXlBd0xqWTVOemszTkVNd0xqSTFNekE0TkNBd0xqWTRPRGsyTmlBd0xqSTFOamM1TVNBd0xqWTNOemsxT1NBd0xqSTFOamM0TnlBd0xqWTJOalkwTWtNd0xqSTFOalk0TWlBd0xqWTFOekU1TnlBd0xqSTFNemsxT1NBd0xqWTBOemsyTmlBd0xqSTBPRGt5SURBdU5qTTVPVGMxVERBdU5EWTJOalUwSURBdU5ESTBOVEE1UXpBdU5EY3lOVEUxSURBdU5ESTVORE00SURBdU5EYzVORFlnTUM0ME16STVNVEVnTUM0ME9EWTVNakVnTUM0ME16UTJOREpXTUM0MU16azVOelZETUM0ME56WTBPRE1nTUM0MU5ESTNPVE1nTUM0ME5qY3hPVFFnTUM0MU5EZzRNVGdnTUM0ME5qQXpOalVnTUM0MU5UY3hPVGxETUM0ME5UTTFNellnTUM0MU5qVTFPREVnTUM0ME5EazFNVE1nTUM0MU56VTRPVFlnTUM0ME5EZzROaklnTUM0MU9EWTJPRGRETUM0ME5EZ3lNVElnTUM0MU9UYzBOemtnTUM0ME5UQTVOamNnTUM0Mk1EZ3lNRElnTUM0ME5UWTNOQ0F3TGpZeE56TTBNME13TGpRMk1qVXhNaUF3TGpZeU5qUTROQ0F3TGpRM01UQXhJREF1TmpNek5UZ3lJREF1TkRneE1ETTBJREF1TmpNM05qTXpRekF1TkRreE1EVTNJREF1TmpReE5qZzBJREF1TlRBeU1TQXdMalkwTWpRNE5DQXdMalV4TWpZd015QXdMall6T1RreU1VTXdMalV5TXpFd05pQXdMall6TnpNMU9DQXdMalV6TWpVek9DQXdMall6TVRVMklEQXVOVE01TlRZNUlEQXVOakl6TXpRM1F6QXVOVFEyTlRrNUlEQXVOakUxTVRNMElEQXVOVFV3T0RjeUlEQXVOakEwT1RJZ01DNDFOVEUzT0RVZ01DNDFPVFF4TkRkRE1DNDFOVEkyT1RjZ01DNDFPRE16TnpRZ01DNDFOVEF5TURNZ01DNDFOekkxT0RjZ01DNDFORFEyTlRRZ01DNDFOak16TURsTU1DNDNOalk1TWpFZ01DNHpNemM1TnpWRE1DNDNOek0yTkRnZ01DNHpOREkwTURjZ01DNDNPREV6TVRZZ01DNHpORFV5TURjZ01DNDNPRGt6TVRZZ01DNHpORFl4TlRGRE1DNDNPVGN6TVRZZ01DNHpORGN3T1RZZ01DNDRNRFUwTWpZZ01DNHpORFl4TlRrZ01DNDRNVE1nTUM0ek5ETTBNVFpETUM0NE1qQTFOelFnTUM0ek5EQTJOek1nTUM0NE1qYzBNRElnTUM0ek16WXhPVGtnTUM0NE16STVORElnTUM0ek16QXpOVEZETUM0NE16ZzBPREVnTUM0ek1qUTFNRElnTUM0NE5ESTFOemtnTUM0ek1UYzBOREVnTUM0NE5EUTVNRGNnTUM0ek1EazNNME13TGpnME56SXpOaUF3TGpNd01qQXhPQ0F3TGpnME56Y3pNU0F3TGpJNU16ZzNJREF1T0RRMk16VTFJREF1TWpnMU9UTXpRekF1T0RRME9UYzRJREF1TWpjM09UazJJREF1T0RReE56WTJJREF1TWpjd05Ea2dNQzQ0TXpZNU56Y2dNQzR5TmpRd01UUkRNQzQ0TXpJeE9EY2dNQzR5TlRjMU16Y2dNQzQ0TWpVNU5URWdNQzR5TlRJeU5qZ2dNQzQ0TVRnM05qVWdNQzR5TkRnMk1qZERNQzQ0TVRFMU56a2dNQzR5TkRRNU9EY2dNQzQ0TURNMk5ETWdNQzR5TkRNd056UWdNQzQzT1RVMU9EY2dNQzR5TkRNd05ESklNQzQzT1RRM09EaGFUVEF1TWpBME9USWdNQzQyT1RFM01EbERNQzR4T1RrNU5qZ2dNQzQyT1RFMk9ESWdNQzR4T1RVeE16VWdNQzQyT1RBeE9TQXdMakU1TVRBek1TQXdMalk0TnpReVF6QXVNVGcyT1RJMklEQXVOamcwTmpRNUlEQXVNVGd6TnpNMElEQXVOamd3TnpJMUlEQXVNVGd4T0RVM0lEQXVOamMyTVRRelF6QXVNVGM1T1RnZ01DNDJOekUxTmlBd0xqRTNPVFV3TXlBd0xqWTJOalV5TkNBd0xqRTRNRFE0TlNBd0xqWTJNVFkzTVVNd0xqRTRNVFEyTnlBd0xqWTFOamd4TnlBd0xqRTRNemcyTlNBd0xqWTFNak0yTXlBd0xqRTROek0zTmlBd0xqWTBPRGczTVVNd0xqRTVNRGc0TnlBd0xqWTBOVE0zT0NBd0xqRTVOVE0xTkNBd0xqWTBNekF3TkNBd0xqSXdNREl4TWlBd0xqWTBNakEwT0VNd0xqSXdOVEEzTVNBd0xqWTBNVEE1TVNBd0xqSXhNREV3TkNBd0xqWTBNVFU1TlNBd0xqSXhORFkzTnlBd0xqWTBNelE1TmtNd0xqSXhPVEkwT1NBd0xqWTBOVE01T0NBd0xqSXlNekUxTnlBd0xqWTBPRFl4SURBdU1qSTFPVEExSURBdU5qVXlOek5ETUM0eU1qZzJOVFFnTUM0Mk5UWTRORGtnTUM0eU16QXhNaUF3TGpZMk1UWTVJREF1TWpNd01USWdNQzQyTmpZMk5ESkRNQzR5TXpBeE1pQXdMalkyT1RrME5TQXdMakl5T1RRMk9DQXdMalkzTXpJeE5pQXdMakl5T0RJZ01DNDJOell5TmpaRE1DNHlNalk1TXpJZ01DNDJOemt6TVRZZ01DNHlNalV3TnpNZ01DNDJPREl3T0RVZ01DNHlNakkzTXpFZ01DNDJPRFEwTVRSRE1DNHlNakF6T1NBd0xqWTROamMwTkNBd0xqSXhOell4TVNBd0xqWTRPRFU0TnlBd0xqSXhORFUxTkNBd0xqWTRPVGd6T1VNd0xqSXhNVFE1TnlBd0xqWTVNVEE1TVNBd0xqSXdPREl5TXlBd0xqWTVNVGN5TmlBd0xqSXdORGt5SURBdU5qa3hOekE1VmpBdU5qa3hOekE1V2swd0xqUTNORGM0TnlBd0xqTTROVEEwTWtNd0xqUTNORGN3T1NBd0xqTTRNREE0TlNBd0xqUTNOakV3TWlBd0xqTTNOVEl4TmlBd0xqUTNPRGM1SURBdU16Y3hNRFV4UXpBdU5EZ3hORGM1SURBdU16WTJPRGcySURBdU5EZzFNelF5SURBdU16WXpOakV5SURBdU5EZzVPRGt4SURBdU16WXhOalF5UXpBdU5EazBORFF4SURBdU16VTVOamN5SURBdU5EazVORGN5SURBdU16VTVNRGsySURBdU5UQTBNelE1SURBdU16VTVPVGcxUXpBdU5UQTVNakkySURBdU16WXdPRGMxSURBdU5URXpOek1nTUM0ek5qTXhPVEVnTUM0MU1UY3lPVEVnTUM0ek5qWTJORU13TGpVeU1EZzFNaUF3TGpNM01EQTRPU0F3TGpVeU16TXhJREF1TXpjME5URTJJREF1TlRJME16VTFJREF1TXpjNU16WXpRekF1TlRJMU16azVJREF1TXpnME1qQTVJREF1TlRJME9UZzBJREF1TXpnNU1qVTJJREF1TlRJek1UWWdNQzR6T1RNNE5qWkRNQzQxTWpFek16Y2dNQzR6T1RnME56WWdNQzQxTVRneE9EY2dNQzQwTURJME5ERWdNQzQxTVRReE1TQXdMalF3TlRJMk1VTXdMalV4TURBek15QXdMalF3T0RBNE1TQXdMalV3TlRJeE1TQXdMalF3T1RZeU9TQXdMalV3TURJMU5DQXdMalF3T1Rjd09WWXdMalF3T1Rjd09VTXdMalE1TXpZd05pQXdMalF3T1Rjd09TQXdMalE0TnpJeklEQXVOREEzTURZNElEQXVORGd5TlRJNUlEQXVOREF5TXpZM1F6QXVORGMzT0RJNElEQXVNemszTmpZMklEQXVORGMxTVRnM0lEQXVNemt4TWprZ01DNDBOelV4T0RjZ01DNHpPRFEyTkRKTU1DNDBOelEzT0RjZ01DNHpPRFV3TkRKYVRUQXVORGs1T0RVMElEQXVOakUwT1RBNVF6QXVORGswT0RjZ01DNDJNVFE1TXpVZ01DNDBPRGs1T1NBd0xqWXhNelE0TXlBd0xqUTROVGd6TVNBd0xqWXhNRGN6TmtNd0xqUTRNVFkzTXlBd0xqWXdOems0T1NBd0xqUTNPRFF5TWlBd0xqWXdOREEzSURBdU5EYzJORGtnTUM0MU9UazBOelpETUM0ME56UTFOVGtnTUM0MU9UUTRPREVnTUM0ME56UXdNek1nTUM0MU9EazRNVGNnTUM0ME56UTVPQ0F3TGpVNE5Ea3lORU13TGpRM05Ua3lOaUF3TGpVNE1EQXpJREF1TkRjNE16QXlJREF1TlRjMU5USTNJREF1TkRneE9EQTRJREF1TlRjeE9UZzBRekF1TkRnMU16RXpJREF1TlRZNE5EUXlJREF1TkRnNU56a3hJREF1TlRZMk1ERTRJREF1TkRrME5qYzBJREF1TlRZMU1ESkRNQzQwT1RrMU5UY2dNQzQxTmpRd01qRWdNQzQxTURRMk1qWWdNQzQxTmpRME9UUWdNQzQxTURreU5ERWdNQzQxTmpZek56ZERNQzQxTVRNNE5UWWdNQzQxTmpneU5Ua2dNQzQxTVRjNE1Ea2dNQzQxTnpFME5qZ2dNQzQxTWpBMklEQXVOVGMxTlRrNFF6QXVOVEl6TXprZ01DNDFOemszTWpjZ01DNDFNalE0T1RRZ01DNDFPRFExT1RFZ01DNDFNalE1TWpFZ01DNDFPRGsxTnpWV01DNDFPRGsxTnpWRE1DNDFNalE1TXpnZ01DNDFPVEk0T0RVZ01DNDFNalF6TURRZ01DNDFPVFl4TmpVZ01DNDFNak13TlRRZ01DNDFPVGt5TWpsRE1DNDFNakU0TURNZ01DNDJNREl5T1RNZ01DNDFNVGs1TmpJZ01DNDJNRFV3T0RFZ01DNDFNVGMyTXpRZ01DNDJNRGMwTXpSRE1DNDFNVFV6TURZZ01DNDJNRGszT0RZZ01DNDFNVEkxTXpnZ01DNDJNVEUyTlRjZ01DNDFNRGswT0RjZ01DNDJNVEk1TkVNd0xqVXdOalF6TnlBd0xqWXhOREl5TWlBd0xqVXdNekUyTXlBd0xqWXhORGc1TVNBd0xqUTVPVGcxTkNBd0xqWXhORGt3T1ZZd0xqWXhORGt3T1ZwTk1DNDNPVFEzT0RnZ01DNHpNVGs1TnpWRE1DNDNPRGs0TURRZ01DNHpNakF3TURJZ01DNDNPRFE1TWpRZ01DNHpNVGcxTkRrZ01DNDNPREEzTmpVZ01DNHpNVFU0TURKRE1DNDNOelkyTURZZ01DNHpNVE13TlRVZ01DNDNOek16TlRZZ01DNHpNRGt4TXpjZ01DNDNOekUwTWpRZ01DNHpNRFExTkRKRE1DNDNOamswT1RJZ01DNHlPVGs1TkRnZ01DNDNOamc1TmpjZ01DNHlPVFE0T0RRZ01DNDNOams1TVRNZ01DNHlPRGs1T1VNd0xqYzNNRGcySURBdU1qZzFNRGszSURBdU56Y3pNak0ySURBdU1qZ3dOVGswSURBdU56YzJOelF4SURBdU1qYzNNRFV4UXpBdU56Z3dNalEzSURBdU1qY3pOVEE0SURBdU56ZzBOekkwSURBdU1qY3hNRGcwSURBdU56ZzVOakEzSURBdU1qY3dNRGcyUXpBdU56azBORGt4SURBdU1qWTVNRGc0SURBdU56azVOVFlnTUM0eU5qazFOaUF3TGpnd05ERTNOU0F3TGpJM01UUTBNME13TGpnd09EYzRPU0F3TGpJM016TXlOaUF3TGpneE1qYzBNaUF3TGpJM05qVXpOU0F3TGpneE5UVXpNeUF3TGpJNE1EWTJORU13TGpneE9ETXlOQ0F3TGpJNE5EYzVOQ0F3TGpneE9UZ3lPQ0F3TGpJNE9UWTFPQ0F3TGpneE9UZzFOQ0F3TGpJNU5EWTBNbFl3TGpJNU5EWTBNa013TGpneE9UZzFOU0F3TGpNd01UTXhOU0F3TGpneE56SXlNaUF3TGpNd056Y3hPQ0F3TGpneE1qVXlPU0F3TGpNeE1qUTJNa013TGpnd056Z3pOU0F3TGpNeE56SXdOU0F3TGpnd01UUTJJREF1TXpFNU9UQTFJREF1TnprME56ZzRJREF1TXpFNU9UYzFWakF1TXpFNU9UYzFXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p3dlp6NG1JM2hoT3p4a1pXWnpQaVlqZUdFN1BHeHBibVZoY2tkeVlXUnBaVzUwSUdsa1BTSndZV2x1ZERCZmJHbHVaV0Z5SWlCNE1UMGlMVEF1TWpBM01EWTNJaUI1TVQwaU1TNHlNRGN3TnlJZ2VESTlJakV1TWpBM01EY2lJSGt5UFNJdE1DNHlNRGN3TmpjaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajRtSTNoaE96eHpkRzl3SUhOMGIzQXRZMjlzYjNJOUlpTTBSREkzUVRnaUx6NG1JM2hoT3p4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUkwRXhOalpHUmlJdlBpWWplR0U3UEM5c2FXNWxZWEpIY21Ga2FXVnVkRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtzaGFkb3c9MDtzdHJva2VXaWR0aD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjE1Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iMjI1IiB5PSI0NCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNDIiIHN0eWxlPSJpci5yZWY9YTFjOTc0MTYtNjI1Yi00YzEwLWEyMDctNWE0MzVjY2YzMzU2O2VkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0wLjU7ZXhpdFk9MDtleGl0RHg9MDtleGl0RHk9MDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtlbnRyeVg9MC4xMjI7ZW50cnlZPTAuODY3O2VudHJ5RHg9MDtlbnRyeUR5PTA7ZW50cnlQZXJpbWV0ZXI9MDsiIGVkZ2U9IjEiIHBhcmVudD0iMTMiIHNvdXJjZT0iNDAiIHRhcmdldD0iMjAiIHZhbHVlPSJBV1MgRUxCIChFbGFzdGljIExvYWQgQmFsYW5jZXIpIC0mZ3Q7IEFXUyBFQzIgKEVsYXN0aWMgQ29tcHV0ZSBDbG91ZCkiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ij4KICAgICAgICA8QXJyYXkgYXM9InBvaW50cyI+CiAgICAgICAgICA8bXhQb2ludCB4PSI2MiIgeT0iMTI2Ii8+CiAgICAgICAgPC9BcnJheT4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI0MyIgc3R5bGU9ImlyLnJlZj0wNjEyYmI2OS03NTdjLTRhMGUtOWJmYi00NDM1ZTViZmY2MGI7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2V4aXRYPTAuNTtleGl0WT0xO2V4aXREeD0wO2V4aXREeT0wO2VudHJ5WD0wO2VudHJ5WT0wLjU7ZW50cnlEeD0wO2VudHJ5RHk9MDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTsiIGVkZ2U9IjEiIHBhcmVudD0iMTMiIHNvdXJjZT0iNDAiIHRhcmdldD0iMjEiIHZhbHVlPSJBV1MgRUxCIChFbGFzdGljIExvYWQgQmFsYW5jZXIpIC0mZ3Q7IEFXUyBFQzIgKEVsYXN0aWMgQ29tcHV0ZSBDbG91ZCkiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ij4KICAgICAgICA8QXJyYXkgYXM9InBvaW50cyI+CiAgICAgICAgICA8bXhQb2ludCB4PSIxNiIgeT0iNDkxIi8+CiAgICAgICAgPC9BcnJheT4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI0MCIgdmFsdWU9IkFXUyBFTEIgKEVsYXN0aWMgTG9hZCBCYWxhbmNlcikiIHN0eWxlPSJyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj1sb2FkLWJhbGFuY2VyO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyTmpBME56UWdNQzQxTVRNeU4wTXdMalkyTXpneU5DQXdMalV6TXpnek5pQXdMalkzTkRjNU5DQXdMalUxTWpNNE9DQXdMalk1TVRJZ01DNDFOalV5TXpSRE1DNDNNRGMyTURjZ01DNDFOemd3T0NBd0xqY3lPREkwT0NBd0xqVTROREk0SURBdU56UTVNREUzSURBdU5UZ3lOa013TGpjMk9UYzROeUF3TGpVNE1Ea3hPU0F3TGpjNE9URTJNeUF3TGpVM01UUTRNaUF3TGpnd016STVJREF1TlRVMk1UWTFRekF1T0RFM05ERTRJREF1TlRRd09EUTRJREF1T0RJMU1qWXlJREF1TlRJd056YzBJREF1T0RJMU1qWXlJREF1TkRrNU9UTTJRekF1T0RJMU1qWXlJREF1TkRjNU1EazVJREF1T0RFM05ERTRJREF1TkRVNU1ESTFJREF1T0RBek1qa2dNQzQwTkRNM01EaERNQzQzT0RreE5qTWdNQzQwTWpnek9URWdNQzQzTmprM09EY2dNQzQwTVRnNU5UTWdNQzQzTkRrd01UY2dNQzQwTVRjeU56TkRNQzQzTWpneU5EZ2dNQzQwTVRVMU9USWdNQzQzTURjMk1EY2dNQzQwTWpFM09USWdNQzQyT1RFeUlEQXVORE0wTmpNNFF6QXVOamMwTnprMElEQXVORFEzTkRnMUlEQXVOall6T0RJMElEQXVORFkyTURNMklEQXVOall3TkRjMElEQXVORGcyTmpBelNEQXVOVFl4TURBNFF6QXVOVFU1TkRZMUlEQXVORFl5TURVMElEQXVOVFV6TVRJeklEQXVORE00TURRMUlEQXVOVFF5TXpReElEQXVOREUxT1RNMlREQXVOall5TXpReElEQXVNekUwTkRZNVF6QXVOamMzTURZMklEQXVNekkyTVRJeklEQXVOamsxTXpFeElEQXVNek15TkRNMElEQXVOekUwTURrZ01DNHpNekl6TjBNd0xqY3pNamcyT1NBd0xqTXpNak13TnlBd0xqYzFNVEEzSURBdU16STFPRGN4SURBdU56WTFOekUySURBdU16RTBNVEU0UXpBdU56Z3dNell4SURBdU16QXlNelkwSURBdU56a3dOVGcwSURBdU1qZzFPVGc0SURBdU56azBOekV5SURBdU1qWTNOalk0UXpBdU56azRPRFFnTUM0eU5Ea3pORGdnTUM0M09UWTJNamtnTUM0eU16QXhOeUF3TGpjNE9EUTBJREF1TWpFek1qY3hRekF1Tnpnd01qVWdNQzR4T1RZek56SWdNQzQzTmpZMU5qZ2dNQzR4T0RJM05USWdNQzQzTkRrMk16RWdNQzR4TnpRMk5FTXdMamN6TWpZNU5TQXdMakUyTmpVeU9TQXdMamN4TXpVd055QXdMakUyTkRRd05TQXdMalk1TlRJd05pQXdMakUyT0RZeE4wTXdMalkzTmprd05pQXdMakUzTWpneU9TQXdMalkyTURVM055QXdMakU0TXpFeU55QXdMalkwT0RnNUlEQXVNVGszT0RJM1F6QXVOak0zTWpBMElEQXVNakV5TlRJMklEQXVOak13T0RVeUlEQXVNak13TnpVM0lEQXVOak13T0RjMElEQXVNalE1TlRNMlF6QXVOak13TnpFNElEQXVNalkxTmpNMklEQXVOak0xTXpZZ01DNHlPREUwTVRjZ01DNDJORFF5TURnZ01DNHlPVFE0TmpsTU1DNDFNamd5TURnZ01DNHpPVEkyTURORE1DNDFNRFV4TnpjZ01DNHpOVGd3T1RnZ01DNDBOekUyTlRnZ01DNHpNekU1TVRjZ01DNDBNekkyTURNZ01DNHpNVGM1TWpkRE1DNHpPVE0xTkRnZ01DNHpNRE01TXpnZ01DNHpOVEV3TWprZ01DNHpNREk0T0RFZ01DNHpNVEV6TWpnZ01DNHpNVFE1TVRSRE1DNHlOekUyTWpjZ01DNHpNalk1TkRjZ01DNHlNelk0TkRrZ01DNHpOVEUwTXpFZ01DNHlNVEl4TXpNZ01DNHpPRFEzTkRsRE1DNHhPRGMwTVRZZ01DNDBNVGd3TmpjZ01DNHhOelF3TnpJZ01DNDBOVGcwTlRFZ01DNHhOelF3TnpJZ01DNDBPVGs1TXpaRE1DNHhOelF3TnpJZ01DNDFOREUwTWpFZ01DNHhPRGMwTVRZZ01DNDFPREU0TURZZ01DNHlNVEl4TXpNZ01DNDJNVFV4TWpSRE1DNHlNelk0TkRrZ01DNDJORGcwTkRFZ01DNHlOekUyTWpjZ01DNDJOekk1TWpZZ01DNHpNVEV6TWpnZ01DNDJPRFE1TlRoRE1DNHpOVEV3TWprZ01DNDJPVFk1T1RFZ01DNHpPVE0xTkRnZ01DNDJPVFU1TXpVZ01DNDBNekkyTURNZ01DNDJPREU1TkRWRE1DNDBOekUyTlRnZ01DNDJOamM1TlRVZ01DNDFNRFV4TnpjZ01DNDJOREUzTnpRZ01DNDFNamd5TURnZ01DNDJNRGN5TjB3d0xqWTBOREl3T0NBd0xqY3dOVEF3TTBNd0xqWXpOVE0ySURBdU56RTRORFUxSURBdU5qTXdOekU0SURBdU56TTBNak0zSURBdU5qTXdPRGMwSURBdU56VXdNek0zUXpBdU5qTXdPRFkzSURBdU56WTVNRGdnTUM0Mk16Y3lNVGtnTUM0M09EY3lOekVnTUM0Mk5EZzRPVEVnTUM0NE1ERTVNelpETUM0Mk5qQTFOalFnTUM0NE1UWTJNREVnTUM0Mk56WTROamNnTUM0NE1qWTROekVnTUM0Mk9UVXhNelFnTUM0NE16RXdOamhETUM0M01UTTBNREVnTUM0NE16VXlOalVnTUM0M016STFOVElnTUM0NE16TXhOQ0F3TGpjME9UUTFOU0F3TGpneU5UQTBRekF1TnpZMk16VTRJREF1T0RFMk9UUXhJREF1Tnpnd01ERXlJREF1T0RBek16UTJJREF1TnpnNE1UZzJJREF1TnpnMk5EYzVRekF1TnprMk16WWdNQzQzTmprMk1USWdNQzQzT1RnMU5qa2dNQzQzTlRBME56RWdNQzQzT1RRME5UTWdNQzQzTXpJeE9EVkRNQzQzT1RBek16WWdNQzQzTVRNNE9Ua2dNQzQzT0RBeE16Y2dNQzQyT1RjMU5USWdNQzQzTmpVMU1qUWdNQzQyT0RVNE1UUkRNQzQzTlRBNU1URWdNQzQyTnpRd056Y2dNQzQzTXpJM05EY2dNQzQyTmpjMk5EWWdNQzQzTVRRd01EUWdNQzQyTmpjMU56RkRNQzQyT1RVeU5qRWdNQzQyTmpjME9UWWdNQzQyTnpjd05EY2dNQzQyTnpNM09ETWdNQzQyTmpJek5ERWdNQzQyT0RVME1ETk1NQzQxTkRJek5ERWdNQzQxT0RNNU16WkRNQzQxTlRNeE1qTWdNQzQxTmpFNE1qZ2dNQzQxTlRrME5qVWdNQzQxTXpjNE1Ua2dNQzQxTmpFd01EZ2dNQzQxTVRNeU4wZ3dMalkyTURRM05GcE5NQzQzTkRJd056UWdNQzQwTkRNMk5qbERNQzQzTlRNeU1Ea2dNQzQwTkRNMk5ETWdNQzQzTmpReElEQXVORFEyT1RJeElEQXVOemN6TXpjeElEQXVORFV6TURnM1F6QXVOemd5TmpReElEQXVORFU1TWpVMElEQXVOemc1T0RjMElEQXVORFk0TURNeUlEQXVOemswTVRVeklEQXVORGM0TXpFeFF6QXVOems0TkRNeUlEQXVORGc0TlRrZ01DNDNPVGsxTmpVZ01DNDBPVGs1TURnZ01DNDNPVGMwTURrZ01DNDFNVEE0TXpGRE1DNDNPVFV5TlRNZ01DNDFNakUzTlRVZ01DNDNPRGs1TURVZ01DNDFNekUzT1RNZ01DNDNPREl3TkRFZ01DNDFNemsyTnpWRE1DNDNOelF4TnpnZ01DNDFORGMxTlRnZ01DNDNOalF4TlRJZ01DNDFOVEk1TXlBd0xqYzFNekl6TkNBd0xqVTFOVEV4TWtNd0xqYzBNak14TmlBd0xqVTFOekk1TkNBd0xqY3pNRGs1TlNBd0xqVTFOakU0TnlBd0xqY3lNRGN3TmlBd0xqVTFNVGt6TTBNd0xqY3hNRFF4TnlBd0xqVTBOelkzT0NBd0xqY3dNVFl5TWlBd0xqVTBNRFEyTmlBd0xqWTVOVFF6TXlBd0xqVXpNVEl4UXpBdU5qZzVNalEwSURBdU5USXhPVFUwSURBdU5qZzFPVFF4SURBdU5URXhNRGNnTUM0Mk9EVTVOREVnTUM0ME9UazVNelpETUM0Mk9EVTVOREVnTUM0ME9EVXdNellnTUM0Mk9URTROVEVnTUM0ME56QTNORFVnTUM0M01ESXpOelFnTUM0ME5qQXhPVGRETUM0M01USTRPVGNnTUM0ME5EazJORGdnTUM0M01qY3hOelVnTUM0ME5ETTNNRFVnTUM0M05ESXdOelFnTUM0ME5ETTJOamxXTUM0ME5ETTJOamxhVFRBdU56RTBNelF4SURBdU1Ua3pNalk1UXpBdU56STFORGNnTUM0eE9UTXlOamtnTUM0M016WXpORGdnTUM0eE9UWTFOamtnTUM0M05EVTJNREVnTUM0eU1ESTNOVEpETUM0M05UUTROVFFnTUM0eU1EZzVNelFnTUM0M05qSXdOallnTUM0eU1UYzNNaklnTUM0M05qWXpNalVnTUM0eU1qZ3dNRE5ETUM0M056QTFPRE1nTUM0eU16Z3lPRFVnTUM0M056RTJPVGdnTUM0eU5EazFPVGdnTUM0M05qazFNamNnTUM0eU5qQTFNVE5ETUM0M05qY3pOVFVnTUM0eU56RTBNamdnTUM0M05qRTVPVGNnTUM0eU9ERTBOVE1nTUM0M05UUXhNamdnTUM0eU9Ea3pNakpETUM0M05EWXlOVGtnTUM0eU9UY3hPVElnTUM0M016WXlNek1nTUM0ek1ESTFOU0F3TGpjeU5UTXhPQ0F3TGpNd05EY3lNVU13TGpjeE5EUXdNeUF3TGpNd05qZzVNeUF3TGpjd016QTVJREF1TXpBMU56YzRJREF1TmpreU9EQTVJREF1TXpBeE5USkRNQzQyT0RJMU1qY2dNQzR5T1RjeU5qRWdNQzQyTnpNM05DQXdMakk1TURBME9TQXdMalkyTnpVMU55QXdMakk0TURjNU5rTXdMalkyTVRNM05DQXdMakkzTVRVME15QXdMalkxT0RBM05DQXdMakkyTURZMk5DQXdMalkxT0RBM05DQXdMakkwT1RVek5rTXdMalkxT0RBM05DQXdMakl6TkRZeE15QXdMalkyTkRBd01pQXdMakl5TURNd01TQXdMalkzTkRVMU5DQXdMakl3T1RjME9VTXdMalk0TlRFd055QXdMakU1T1RFNU55QXdMalk1T1RReE9DQXdMakU1TXpJMk9TQXdMamN4TkRNME1TQXdMakU1TXpJMk9WcE5NQzQzTVRRek5ERWdNQzQyT1RReU1ETkRNQzQzTWpVME56VWdNQzQyT1RReU1ETWdNQzQzTXpZek5Ua2dNQzQyT1RjMU1EY2dNQzQzTkRVMk1UVWdNQzQzTURNMk9UVkRNQzQzTlRRNE56RWdNQzQzTURrNE9EUWdNQzQzTmpJd09ETWdNQzQzTVRnMk56a2dNQzQzTmpZek16Y2dNQzQzTWpnNU5qbERNQzQzTnpBMU9USWdNQzQzTXpreU5UZ2dNQzQzTnpFMk9UZ2dNQzQzTlRBMU56Z2dNQzQzTmprMU1UY2dNQzQzTmpFME9UWkRNQzQzTmpjek16VWdNQzQzTnpJME1UVWdNQzQzTmpFNU5qTWdNQzQzT0RJME5DQXdMamMxTkRBNElEQXVOemt3TXpBMFF6QXVOelEyTVRrNElEQXVOems0TVRZM0lEQXVOek0yTVRZZ01DNDRNRE0xTVRZZ01DNDNNalV5TXpZZ01DNDRNRFUyTnpKRE1DNDNNVFF6TVRNZ01DNDRNRGM0TWpnZ01DNDNNREk1T1RVZ01DNDRNRFkyT1RRZ01DNDJPVEkzTVRZZ01DNDRNREkwTVRWRE1DNDJPREkwTXpjZ01DNDNPVGd4TXpZZ01DNDJOek0yTlRrZ01DNDNPVEE1TURRZ01DNDJOamMwT1RJZ01DNDNPREUyTXpORE1DNDJOakV6TWpZZ01DNDNOekl6TmpJZ01DNDJOVGd3TkRnZ01DNDNOakUwTnpFZ01DNDJOVGd3TnpRZ01DNDNOVEF6TXpkRE1DNDJOVGd4TVNBd0xqY3pOVFF6TnlBd0xqWTJOREExTXlBd0xqY3lNVEUxT1NBd0xqWTNORFl3TWlBd0xqY3hNRFl6TmtNd0xqWTROVEUxSURBdU56QXdNVEV6SURBdU5qazVORFF4SURBdU5qazBNakF6SURBdU56RTBNelF4SURBdU5qazBNakF6V2swd0xqTTJPREl3T0NBd0xqWTJOall3TTBNd0xqTXpOVEkwTkNBd0xqWTJOall3TXlBd0xqTXdNekF5TVNBd0xqWTFOamd5T0NBd0xqSTNOVFl4TXlBd0xqWXpPRFV4TlVNd0xqSTBPREl3TlNBd0xqWXlNREl3TVNBd0xqSXlOamcwTWlBd0xqVTVOREUzTVNBd0xqSXhOREl5T0NBd0xqVTJNemN4TjBNd0xqSXdNVFl4TXlBd0xqVXpNekkyTXlBd0xqRTVPRE14TXlBd0xqUTVPVGMxTVNBd0xqSXdORGMwTkNBd0xqUTJOelF5TVVNd0xqSXhNVEUzTkNBd0xqUXpOVEE1TVNBd0xqSXlOekEwT0NBd0xqUXdOVE01TkNBd0xqSTFNRE0xTnlBd0xqTTRNakE0TlVNd0xqSTNNelkyTlNBd0xqTTFPRGMzTmlBd0xqTXdNek0yTXlBd0xqTTBNamt3TXlBd0xqTXpOVFk1TXlBd0xqTXpOalEzTWtNd0xqTTJPREF5TXlBd0xqTXpNREEwTVNBd0xqUXdNVFV6TkNBd0xqTXpNek0wTVNBd0xqUXpNVGs0T0NBd0xqTTBOVGsxTmtNd0xqUTJNalEwTXlBd0xqTTFPRFUzTVNBd0xqUTRPRFEzTWlBd0xqTTNPVGt6TXlBd0xqVXdOamM0TmlBd0xqUXdOek0wTVVNd0xqVXlOVEVnTUM0ME16UTNORGtnTUM0MU16UTROelFnTUM0ME5qWTVOek1nTUM0MU16UTROelFnTUM0ME9UazVNelpETUM0MU16UTRNRFFnTUM0MU5EUXhNVGNnTUM0MU1UY3lNaklnTUM0MU9EWTBOamtnTUM0ME9EVTVPREVnTUM0Mk1UYzNNVU13TGpRMU5EYzBJREF1TmpRNE9UVXhJREF1TkRFeU16ZzVJREF1TmpZMk5UTXpJREF1TXpZNE1qQTRJREF1TmpZMk5qQXpWakF1TmpZMk5qQXpXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p3dlp6NG1JM2hoT3p3dlp6NG1JM2hoT3p4a1pXWnpQaVlqZUdFN1BHeHBibVZoY2tkeVlXUnBaVzUwSUdsa1BTSndZV2x1ZERCZmJHbHVaV0Z5SWlCNE1UMGlMVEF1TWpBM01pSWdlVEU5SWpFdU1qQTNNaUlnZURJOUlqRXVNakEzTURjaUlIa3lQU0l0TUM0eU1EY3dOamNpSUdkeVlXUnBaVzUwVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElqNG1JM2hoT3p4emRHOXdJSE4wYjNBdFkyOXNiM0k5SWlORE9EVXhNVUlpTHo0bUkzaGhPenh6ZEc5d0lHOW1abk5sZEQwaU1TSWdjM1J2Y0MxamIyeHZjajBpSTBaR09Ua3dNQ0l2UGlZamVHRTdQQzlzYVc1bFlYSkhjbUZrYVdWdWRENG1JM2hoT3p4amJHbHdVR0YwYUNCcFpEMGlZMnhwY0RBaVBpWWplR0U3UEhKbFkzUWdkMmxrZEdnOUlqRWlJR2hsYVdkb2REMGlNU0lnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p3dlkyeHBjRkJoZEdnK0ppTjRZVHM4TDJSbFpuTStKaU40WVRzOEwzTjJaejQ9O3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7c2hhZG93PTA7c3Ryb2tlV2lkdGg9MTtpci5yZWY9ZmNkZGM5MmEtZjQzMi00Y2Y1LWIyODgtNGIzZmZjYjI1Zjc3OyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjEzIj4KICAgICAgPG14R2VvbWV0cnkgeD0iNDYiIHk9IjIyNiIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNDkiIHN0eWxlPSJpci5yZWY9ZGFlOWUxNWUtZjM3OS00ODg4LTgzZWMtNjIzZTAzZmE3ZGJmO2VkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0xO2V4aXRZPTAuNTtleGl0RHg9MDtleGl0RHk9MDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtlbnRyeVg9MC4xNTY7ZW50cnlZPTAuODY3O2VudHJ5RHg9MDtlbnRyeUR5PTA7ZW50cnlQZXJpbWV0ZXI9MDsiIGVkZ2U9IjEiIHBhcmVudD0iMTMiIHNvdXJjZT0iMjYiIHRhcmdldD0iMjkiIHZhbHVlPSJBV1MgUzMgKFNpbXBsZSBTdG9yYWdlIFNlcnZpY2UpIC0mZ3Q7IEFXUyBBdGhlbmEiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ij4KICAgICAgICA8QXJyYXkgYXM9InBvaW50cyI+CiAgICAgICAgICA8bXhQb2ludCB4PSI2NjMiIHk9IjE0MCIvPgogICAgICAgIDwvQXJyYXk+CiAgICAgIDwvbXhHZW9tZXRyeT4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNTAiIHN0eWxlPSJpci5yZWY9M2QzOTY4M2UtOWRmYS00ZjYyLThiM2YtMzY5ZmFmNjM0YzNmO2VkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0xO2V4aXRZPTAuNzU7ZXhpdER4PTA7ZXhpdER5PTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7IiBlZGdlPSIxIiBwYXJlbnQ9IjEzIiBzb3VyY2U9IjI2IiB0YXJnZXQ9IjI3IiB2YWx1ZT0iQVdTIFMzIChTaW1wbGUgU3RvcmFnZSBTZXJ2aWNlKSAtJmd0OyBBV1MgUzMgKFNpbXBsZSBTdG9yYWdlIFNlcnZpY2UpIj4KICAgICAgPG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI0NCIgdmFsdWU9IkFXUyBFTEIgKEVsYXN0aWMgTG9hZCBCYWxhbmNlcikgLSZndDsgQVdTIERpcmVjdCBDb25uZWN0IiBzdHlsZT0iZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2V4aXRYPTA7ZXhpdFk9MC41O2V4aXREeD0wO2V4aXREeT0wO2VudHJ5WD0wLjk3ODtlbnRyeVk9MC4zNzg7ZW50cnlEeD0wO2VudHJ5RHk9MDtlbnRyeVBlcmltZXRlcj0wO3N0cm9rZUNvbG9yPSNCRkJGQkY7c3Ryb2tlV2lkdGg9MjtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c291cmNlUGVyaW1ldGVyU3BhY2luZz05O2lyLnJlZj0wOTVlYTY0Ny1hMWU4LTRiMzktYThkYi0xZGQ0YWQyMjU0Yzg7aXIuYXNzZXRzPVByb3RlY3RlZCBIZWFsdGggSW5mb3JtYXRpb247IiBlZGdlPSIxIiBwYXJlbnQ9IjEyIiBzb3VyY2U9IjQwIiB0YXJnZXQ9IjExIj4KICAgICAgPG14R2VvbWV0cnkgeD0iMC41NTM1IiB5PSItMzgiIHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiPgogICAgICAgIDxteFBvaW50IGFzPSJvZmZzZXQiLz4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI0MSIgdmFsdWU9IkRJQ09NIC8gRElNU0UiIHN0eWxlPSJlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZXhpdFg9MTtleGl0WT0wLjU7ZXhpdER4PTA7ZXhpdER5PTA7ZW50cnlYPTAuMDU2O2VudHJ5WT0wLjYyMjtlbnRyeUR4PTA7ZW50cnlEeT0wO2VudHJ5UGVyaW1ldGVyPTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7aXIucmVmPWE3NWMyYzc1LWI4ZGYtNDY2ZS05YWVlLWRhMDI2MGU0N2RmYztpci5hc3NldHM9UHJvdGVjdGVkIEhlYWx0aCBJbmZvcm1hdGlvbjsiIGVkZ2U9IjEiIHBhcmVudD0iMTIiIHNvdXJjZT0iMTEiIHRhcmdldD0iNDAiPgogICAgICA8bXhHZW9tZXRyeSB4PSIwLjIzMTkiIHk9Ii0yNiIgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSI+CiAgICAgICAgPG14UG9pbnQgYXM9Im9mZnNldCIvPgogICAgICA8L214R2VvbWV0cnk+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjM0IiBzdHlsZT0iZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2V4aXRYPTE7ZXhpdFk9MC41O2V4aXREeD0wO2V4aXREeT0wO2V4aXRQZXJpbWV0ZXI9MDtlbnRyeVg9MDtlbnRyeVk9MC41O2VudHJ5RHg9MDtlbnRyeUR5PTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7IiBlZGdlPSIxIiBwYXJlbnQ9IjEiIHNvdXJjZT0iMTAiIHRhcmdldD0iMTEiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ij4KICAgICAgICA8QXJyYXkgYXM9InBvaW50cyI+CiAgICAgICAgICA8bXhQb2ludCB4PSI4MiIgeT0iMjMyIi8+CiAgICAgICAgPC9BcnJheT4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSIzOCIgc3R5bGU9ImVkZ2VTdHlsZT1ub25lO2N1cnZlZD0xO2h0bWw9MTtpci5zeW5jaHJvbml6ZWQ9MTtleGl0WD0wO2V4aXRZPTAuNzU7ZXhpdER4PTA7ZXhpdER5PTA7ZW50cnlYPTAuODU1O2VudHJ5WT0wLjg1NTtlbnRyeUR4PTA7ZW50cnlEeT0wO2VudHJ5UGVyaW1ldGVyPTA7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7IiBlZGdlPSIxIiBwYXJlbnQ9IjEiIHNvdXJjZT0iMTEiIHRhcmdldD0iMTAiPgogICAgICA8bXhHZW9tZXRyeSByZWxhdGl2ZT0iMSIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICA8L3Jvb3Q+CjwvbXhHcmFwaE1vZGVsPgo=</schema>
  </diagram>
  <trustZones>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="60"/>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="100"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="AWS ELB (Elastic Load Balancer) -&gt; AWS EC2 (Elastic Compute Cloud)" ref="0612bb69-757c-4a0e-9bfb-4435e5bff60b" source="848a1653-2ab9-4044-8b45-d217f3a55f16" target="3a50e3db-0b7e-44fb-95f7-283d08cc6a13">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS ELB (Elastic Load Balancer) -&gt; AWS Direct Connect" ref="095ea647-a1e8-4b39-a8db-1dd4ad2254c8" source="848a1653-2ab9-4044-8b45-d217f3a55f16" target="906594f1-9090-4dcd-b104-6f2e3c3eee3f">
      <assets>
        <asset name="Protected Health Information"/>
      </assets>
      <tags/>
    </dataflow>
    <dataflow name="AWS Athena -&gt; AWS QuickSight" ref="1c52a2fd-318d-4c01-a648-dc650884a543" source="48fd997e-94df-44b0-a52b-7465db8cb4f1" target="08e7108d-8ece-40e5-a958-b2093f161f3f">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS S3 (Simple Storage Service) -&gt; AWS S3 (Simple Storage Service)" ref="3d39683e-9dfa-4f62-8b3f-369faf634c3f" source="2feedd5b-82ba-43ab-ba6d-7c3ad77bdf22" target="948bc350-736c-43e6-9618-39e4caf2ebdd">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS S3 (Simple Storage Service) -&gt; AWS SageMaker" ref="5b9d0dbd-26d3-43b8-a274-a3fd93e892cc" source="948bc350-736c-43e6-9618-39e4caf2ebdd" target="099eebef-ac91-4a49-80a1-e9fdbeb4314d">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS S3 (Simple Storage Service) -&gt; AWS Athena" ref="8dbea037-2ef1-4de1-a3db-38b03ed63df1" source="948bc350-736c-43e6-9618-39e4caf2ebdd" target="48fd997e-94df-44b0-a52b-7465db8cb4f1">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS ELB (Elastic Load Balancer) -&gt; AWS EC2 (Elastic Compute Cloud)" ref="a1c97416-625b-4c10-a207-5a435ccf3356" source="848a1653-2ab9-4044-8b45-d217f3a55f16" target="bc2ca3bc-2df2-487e-8f75-d29acd857f31">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="DICOM / DIMSE" ref="a75c2c75-b8df-466e-9aee-da0260e47dfc" source="906594f1-9090-4dcd-b104-6f2e3c3eee3f" target="848a1653-2ab9-4044-8b45-d217f3a55f16">
      <assets>
        <asset name="Protected Health Information"/>
      </assets>
      <tags/>
    </dataflow>
    <dataflow name="AWS SageMaker -&gt; AWS S3 (Simple Storage Service)" ref="cfd5ea30-836f-486d-a705-c16203d878dd" source="099eebef-ac91-4a49-80a1-e9fdbeb4314d" target="948bc350-736c-43e6-9618-39e4caf2ebdd">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS S3 (Simple Storage Service) -&gt; AWS Athena" ref="dae9e15e-f379-4888-83ec-623e03fa7dbf" source="2feedd5b-82ba-43ab-ba6d-7c3ad77bdf22" target="48fd997e-94df-44b0-a52b-7465db8cb4f1">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="Applied_Standards" value=""/>
    <customField ref="Business.Criticality" value=""/>
    <customField ref="Business.Owner" value=""/>
    <customField ref="Business.Unit" value=""/>
    <customField ref="Compliance_Email" value="cdalrymple@iriusrisk.com"/>
    <customField ref="Pentest.Requierd" value="No"/>
  </customFields>
  <components>
    <component uuid="1e0d0966-1f3c-479c-ae65-7ef36b693d9a" diagramComponentId="98126a9a-3d9c-446e-9ae0-fb812d736bd4" ref="aa214693-6a81-415a-b4fc-0768870a3f9b" name="AWS Account Environment" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="amazon-web-services-environment">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-Logging-3.3" name="Audit logs are accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The audit logs are not encrypted and they can be accessed by attackers and obtain sensitive data
                        in clear text.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.354">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.5" name="Brute force attempts on the Amazon management console cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The failure connection attempts (brute force) must be audited and monitored and the
                        correspondent personnel must be alerted and informed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.12" name="Changes in the network configuration cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The changes in the network configurations (NACLs, route and gateway tables) are not detected
                        because the monitorization and alerts of the network configuration are not configured to detect
                        these changes.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.4" name="Changes in the security configurations can be not detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Monitoring and alerting for security configurations are not configured and changes cannot be
                        detected.&amp;nbsp;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.10" name="Changes in the security groups cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the security groups must be audited and monitored and the correspondent
                        personnel must approve these changes. If the situation is not the correct, attackers can access
                        to security systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.819">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="cloudwatch-misconfig" name="Cloudwatch is misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.121">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.3" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Login to the console without using the Multi-factor Authentication (MFA) and they are not
                        detected. The connection without the MFA must be audited and monitored, the correct security
                        group must be informed and they must validate this connection.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.820">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-SECURITY-ALERTS" name="Misconfigured Security contact details" state="0" impact="100" issueId="" issueLink="">
          <desc>The security contact details for the Azure subscription are not properly configured.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Access &amp;quot;Azure Security Center&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the &amp;quot;Recommendations&amp;quot; tab choose &amp;quot;Provide security
                            contact details&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all fields are filled.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.751">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.121">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.1" name="Non-auditable API calls in all regions" state="0" impact="100" issueId="" issueLink="">
          <desc>The API call to the resources is not audited and the actions are not recorded into the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.353">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.8" name="Non-centrality audit logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The audit logs are not stored in a central system. Therefore, the audit logs cannot be
                        exploited correctly by the security personnel.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.749">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-ACCESS-ROOT-01" name="The Root Account is mis-configured" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator account is not configured. The security question to recover or reset the
                        password and the authentication method are not configured.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-1.21" name="The access keys are generated when the setup of the users is started" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The system doesn't require additional steps to create access keys, the access keys are
                        generating when the process to create an user is starting. The problem is that these keys can be
                        in use somewhere in the organization and maybe these keys are not necessary for the user.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.749">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.122">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EXPIRATION-DATE" name="The password expiration is not established" state="0" impact="100" issueId="" issueLink="">
          <desc>The password expiration is not configured and users are not obliged to change their passwords.
                        Not change frequently the passwords gives facilities to attackers to obtain them.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.9" name="The security policies are exposed in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The security policies are not configured and the security configurations are exposed for the
                        attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.7" name="Unaudited connections with the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The connections with the applications and with the databases cannot be audited and not
                        detected.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.9" name="Unaudited resources changes" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the applications and in the databases and these changes are not detected and
                        not audited.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.12" name="Apply an AWS Managed Config Rule for EIPs attached to EC2 instances within VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources. You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Description": "Checks whether all EIP addresses allocated to a VPC are attached to 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    EC2 instances or in-use ENIs.", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ConfigRuleName": "eip-attached", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Source": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Owner": "AWS", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "SourceIdentifier": "EIP_ATTACHED" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Scope": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ComplianceResourceTypes": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "AWS::EC2::EIP" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ] 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe config rules" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/describe-config-rules.html"/>
            <reference name="Put config rule" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/put-config-rule.html"/>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for a Config Rule that checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'EIP_ATTACHED']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.3-2.4" name="Apply an IAM Role for Amazon EC2 Tier" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      } 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="2.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Web tier EC2 instances, check if and which IAM instance profile they have attached, and note the name of the instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-instances --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Reservations[*].Instances[*].{IamInstanceProfile:IamInstanceProfile, InstanceId:InstanceId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.1-2.2" name="Apply IAM Policy for EC2 IAM Roles for tier" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles defined with AWS Identity Access Management. An IAM policy is a document that formally states one or more permissions using the following structure:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Actions: what actions are allowed (each AWS service has its own set of actions)&lt;/li&gt; 
  &lt;li&gt;Resources: which resources will be affected by the action&lt;/li&gt; 
  &lt;li&gt;Effect: what effect will be when the subject (user/group/roles) requests access Policies are documents that are created using JSON. A policy consists of one or more statements, each of which describes one set of permissions.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;b&gt;Remediation&lt;/b&gt;: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Using the Amazon unified command line interface: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM managed policy for Web tier instances, and note the policy ARN:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-policy --policy-name &amp;lt;iam_policy_name&amp;gt; --policy-document file://policy 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the IAM policy created to the Web tier IAM role:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --rolename &amp;lt;web_tier_iam_role&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="Get policy version" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy-version.html"/>
            <reference name="List attached role policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-attached-role-policies.html"/>
          </references>
          <standards>
            <standard ref="2.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="2.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check managed policies attached to the IAM role, and note the policies ARN:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-attached-role-policies --role-name &amp;lt;web_tier_iam_role&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the version of the IAM policies attached to the IAM role:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --query "Policy.DefaultVersionId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the document policy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;iam_policy_arn&amp;gt; --version-id &amp;lt;iam_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.8" name="Apply RBAC with pre-defined policies added into groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Instead of defining permissions for individual IAM users, it's usually more convenient to create groups that relate to job functions (administrators, developers, accounting, etc.), define the relevant permissions for each group, and then assign IAM users to those groups. All the users in an IAM group inherit the permissions assigned to the group. That way, you can make changes for everyone in a group in just one place. As people move around in your company, you can simply change what IAM group their IAM user belongs to. This method is know as Role Based Access Control (RBAC). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Remove privilege granted directly to a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;For each user complete the following:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select the user.&lt;/li&gt; 
   &lt;li&gt;Click on the Permissions tab.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Managed Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Detach Policy&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Inline Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Remove Policy&amp;quot;.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ol&gt;Create a Group and add a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select Groups and click Create New Group.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Group Name box, type the name of the group and click Next Step.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of policies, select the check box for each policy that you want to apply to all members of the group. Click Next Step.&lt;/li&gt; 
  &lt;li&gt;Click Create Group.&lt;/li&gt; 
  &lt;li&gt;Click the new Group and select the &amp;quot;Users&amp;quot; tab.&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Add Users to Group&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Select the users and click &amp;quot;Add Users&amp;quot;.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.15" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.15" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Run the following to determine if they have policies directly attached:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-attached-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.10" name="Apply setting MFA for sensitive API calls" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>To the extent that it is practical consider enforcing MFA access for sensitive API calls. For example, you can require that a user has authenticated with an MFA device in order to be allowed to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS environment are protected with an extra layer of security thus helping to prevent accidental or malicious damage. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;The following is an example of how to create a policy that enforces MFA to terminate EC2 instances: 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select "Policies".&lt;/li&gt; 
  &lt;li&gt;Select "Create Policy".&lt;/li&gt; 
  &lt;li&gt;Select "Create your own policy".&lt;/li&gt; 
  &lt;li&gt;Provide a policy name and description.&lt;/li&gt; 
  &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;i&gt; {&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Version": "2012-10-17",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Statement": [{&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Effect": "Allow",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Action": [&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:StopInstances",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:TerminateInstances"&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; ],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Resource": ["*"],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; }]&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt;}&lt;/i&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click "Create policy".&lt;/li&gt; 
  &lt;li&gt;The policy may now be added to a group by following the outlines in "Use RBAC with pre-defined policies added into groups or roles".&lt;/li&gt; 
 &lt;/ul&gt; &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring MFA-Protected API Access" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure-api-require.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.5" name="Avoid API keys for root account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt; 
  &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt; 
  &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt; 
  &lt;li&gt;Click on Access Keys.&lt;/li&gt; 
  &lt;li&gt;Under the Status column if there are any Keys which are "Active".&lt;/li&gt; 
  &lt;li&gt;Click on "Make Inactive" and click "Delete".&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.3" name="Avoid publishing CloudTrail logs publicly" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Since cloudtrail logs capture all API calls for the AWS account they should be stored in an S3 bucket that is not accessible to the public. Applying the correct bucket policy helps ensure the confidentiality of the data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with s3 update privileges).&lt;/li&gt; 
  &lt;li&gt;Select s3 from the services list.&lt;/li&gt; 
  &lt;li&gt;Right-click on the bucket you have used for "cloudtrail" and click "Properties".&lt;/li&gt; 
  &lt;li&gt;In the Properties pane, click the Permissions tab.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the row that grants permission to "Everyone" or "Any Authenticated User".&lt;/li&gt; 
  &lt;li&gt;Uncheck all the permissions granted to Everyone or Any Authenticated User.&lt;/li&gt; 
  &lt;li&gt;Click Save to save the ACL.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If the Edit bucket policy button is present, click it.&lt;/li&gt; 
  &lt;li&gt;Remove any Statement having an Effect set to Allow and a Principal set to *.&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain the bucket name of the cloudtrail:&amp;nbsp;aws cloudtrail describe-trails
                            --query 'trailList[*].S3BucketName'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;AllUsers&amp;quot; is not granted access to the bucket:&amp;nbsp;aws
                            s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Authenticated Users&amp;quot; is not granted access to the
                            bucket: aws s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated Users`]'&lt;/li&gt;
                            &lt;li&gt;Validate the bucket policy does not grant access to all:&amp;nbsp;aws s3api
                            get-bucket-policy --bucket &amp;lt;bucket_name&amp;gt;&lt;/li&gt;
                            &lt;li&gt;Check that the above command does not provide a principal of *, with EFFECT set to
                            ALLOW.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.5-2.6" name="Configure AutoScaling Group Launch Configuration for Tier to use a customer created IAM Role" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  *Note: references to Web tier are also applicable to App tier. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the Web tier IAM instance profile :&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="2.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if your Web tier autoscaling group is using a launch configuration with an IAM instance profile configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query "LaunchConfigurations[*].IamInstanceProfile" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM1" name="Configure contact email and telephone details on AWS accounts" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.&lt;/p&gt;&lt;p&gt;An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing ).&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, next to Account Settings, choose Edit.&lt;/li&gt;&lt;li&gt;Next to the field that you need to update, choose Edit.&lt;/li&gt;&lt;li&gt;After you have entered your changes, choose Save changes.&lt;/li&gt;&lt;li&gt;After you have made your changes, choose Done.&lt;/li&gt;&lt;li&gt;To edit your contact information, under Contact Information, choose Edit.&lt;/li&gt;&lt;li&gt;For the fields that you want to change, type your updated information, and then choose Update.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing )&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, review and verify the current details.&lt;/li&gt;&lt;li&gt;Under Contact Information, review and verify the current details.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.11" name="Configure password expiration" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Change access keys regularly, and make sure that all IAM users in your account do as well. That way, if an access key is compromised without your knowledge, you limit how long the credentials can be used to access your resources. Credential reports can be used to determine how long access keys have been active for. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;Select the user you wish to rotate the key for.&lt;/li&gt; 
  &lt;li&gt;Under access keys click &amp;quot;Create Access Key&amp;quot; (do not touch the existing key yet).&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Download credentials&amp;quot; or &amp;quot;Show credentials&amp;quot; so that you have a record of them.&lt;/li&gt; 
  &lt;li&gt;Update any applications with the new credentials and test (we recommend to leave a few days or a week for testing).&lt;/li&gt; 
  &lt;li&gt;Once complete complete 1-4 above and for the key which needs rotating click &amp;quot;Make Inactive | Delete&amp;quot; and click &amp;quot;Deactive&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Once you are confident you will no longer need the key (wait several more days) repeat 1-4 and select &amp;quot;Delete&amp;quot; for the inactive key.&lt;/li&gt; 
 &lt;/ol&gt; 
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.14" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Check the access keys created time: aws iam get-credential-report --query
                            'Content' --output text | base64 -D | awk -F, '{print $1,$9,$10,$14,$15}'&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each access_key_1_active and access_key_9_active that is set to True ensure
                            the created date is within the last 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.1" name="Configure the security challenge questions within the AWS Account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When an AWS account is initially created it is configured with a top level account known as the &amp;quot;root&amp;quot; account that has full administration access to all resources. In the event that the password or MFA device associated with this account is lost AWS support may recover it by asking you to answer the security questions. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;For each question:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select an appropriate question.&lt;/li&gt; 
   &lt;li&gt;Enter an appropriate answer.&lt;/li&gt; 
   &lt;li&gt;Follow the above process for all 3 questions.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Click Update when complete.&lt;/li&gt; 
  &lt;li&gt;We recommend to store the questions and answers in a secure location such as a safe where they can be used in case recovery is required.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Confirm whether questions and answers have been saved.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.7" name="Create a Cloudwatch Alarm and its action for the &quot;VPC Flow Logs&quot; metric filter" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt;
   A Cloudwatch alarm watches a single metric over a time period you specify, and performs one or more actions based on the value of the metric relative to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   The Cloudwatch Alarm will trigger a notification being sent to the administrators every time the "REJECT packets" specified threshold is reached. The alarm should be created for the "VPC Flow Logs" metric, and the action should have a SNS topic configured.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch alarm for the VPC Flow Logs metric, and configure an Alarm Action:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws cloudwatch put-metric-alarm --alarm-name &amp;lt;vpc_flow_log_alarm_name&amp;gt; --alarm-actions &amp;lt;sns_topic_arn&amp;gt; --metric-name &amp;lt;vpc_flow_log_metric_name&amp;gt; --namespace LogMetrics --statistic &amp;lt;desired_statistic&amp;gt; --period &amp;lt;desired_period&amp;gt; --evaluation-periods &amp;lt;desired_evaluation_periods&amp;gt; --threshold &amp;lt;desired_threshold&amp;gt; --comparison-operator &amp;lt;desired_operator&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe alarms" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/describe-alarms.html"/>
            <reference name="Put metric alarm" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/put-metric-alarm.html"/>
          </references>
          <standards>
            <standard ref="4.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Cloudwatch alarms configured for the VPC Flow Logs metric, and check if an Alarm Action is configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch describe-alarms --query "MetricAlarms[?MetricName =='&amp;lt;vpc_flow_log_metric_name&amp;gt;'].{MetricName:MetricName,AlarmActions:AlarmActions,AlarmName:AlarmName}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.6" name="Create a log metric filter for the Cloudwatch group assigned to the &quot;VPC Flow Logs&quot;" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Description:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  This recommendation builds upon the Foundation benchmark recommendation: "Ensure VPC Flow Logging is Enabled in all Applicable Regions"&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  VPC flow logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data is stored using Amazon CloudWatch Logs. VPC flow logs can capture accepted traffic, rejected traffic, or all traffic.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Metric filters can be used to express how the service would extract metric observations from ingested events and transform them to data points in a CloudWatch metric. Metric filters are assigned to log groups, and all of the filters assigned to a log group are applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A metric filter should be created for counting how many IP packets are rejected in the VPC flow logs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a metric filter for the Cloudwatch Log group assigned to the "VPC Flow Logs":&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs put-metric-filter --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; --filter-name &amp;lt;vpc_flow_log_filter_name&amp;gt; --filter-pattern "{ $.errorCode =\"AccessDenied\" }" --metric-transformations metricName= &amp;lt;vpc_flow_log_metric_name&amp;gt;,metricNamespace=LogMetrics,metricValue=1 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-metric-filters.html"/>
            <reference name="Filter log events" url="https://docs.aws.amazon.com/cli/latest/reference/logs/filter-log-events.html"/>
            <reference name="Put metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-metric-filter.html"/>
          </references>
          <standards>
            <standard ref="4.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface to check if the log metric filter: 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws logs describe-metric-filters --region &amp;lt;application_region&amp;gt; --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.7" name="Create an IAM group for administration purposes" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM group is a collection of IAM users. You can use groups to specify permissions for a collection of users, which can make those permissions easier to manage for those users. For example, you could have a group called Admins and give that group the types of permissions that administrators typically need. Any user in that group automatically has the permissions that are assigned to the group. If a new user joins your organization and should have administrator privileges, you can assign the appropriate permissions by adding the user to that group. Similarly, if a person changes jobs in your organization, instead of editing that user's permissions, you can remove him or her from the old groups and add him or her to the appropriate new groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new IAM group for administration purposes:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-group --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attach the Admin policy to the administration IAM group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam attach-group-policy --policy-arn &amp;lt;admin_policy_arn&amp;gt; --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The name of the IAM admin group name should be known prior to auditing this recommendation. For a sample admin policy arn see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Attach group policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-group-policy.html"/>
            <reference name="Create groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-group.html"/>
            <reference name="List groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-groups.html"/>
          </references>
          <standards>
            <standard ref="2.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM groups created for administration purposes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-groups --query "Groups[?GroupName == '&amp;lt;iam_admin_group_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.8" name="Create an IAM policy that allows admin privileges for all services used" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  A policy is a document that formally states one or more permissions.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Managed policies are standalone policies that you can attach to multiple users, groups, and roles in your AWS account. Managed policies apply only to identities (users, groups, and roles) - not resources. You must ensure that you have an IAM managed policy created with admin permissions for all the AWS services used by the application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create an IAM managed admin policy for all AWS services used:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-policy --policy-name &amp;lt;admin_policy_name&amp;gt; --policy-document file://policy 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  The admin policy should be defined prior to auditing and remediating this recommendation. For a sample admin policy see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="2.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM admin policies and note the policy ARN and DefaultVersionId:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-policies --query "Policies[?PolicyName == '&amp;lt;admin_policy_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the policy exists, check the policy document:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;admin_policy_arn&amp;gt; --version-id &amp;lt;admin_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.20" name="Create an IAM role for managing incidents with AWS" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>WS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br /&gt;Using the Amazon unified command line interface, create an IAM role for managing incidents with AWS: 
&lt;br /&gt; 
&lt;br /&gt;Create a trust relationship policy document that allows &amp;lt;iam_user&amp;gt; to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json: 
&lt;br /&gt; 
&lt;br /&gt;{ 
&lt;br /&gt;&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, 
&lt;br /&gt;&amp;quot;Statement&amp;quot;: [{ 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Principal&amp;quot;: { 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;AWS&amp;quot;: &amp;quot;&amp;lt;iam_user&amp;gt;&amp;quot; 
&lt;br /&gt;&amp;nbsp; }, 
&lt;br /&gt;&amp;nbsp; &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot; 
&lt;br /&gt;&amp;nbsp; }] 
&lt;br /&gt;} 
&lt;br /&gt; 
&lt;br /&gt;Create the IAM role using the above trust policy: 
&lt;br /&gt; 
&lt;br /&gt;aws iam create-role --role-name &amp;lt;aws_support_iam_role&amp;gt; --assume-role-policy-document file:///tmp/TrustPolicy.json 
&lt;br /&gt; 
&lt;br /&gt;Attach 'AWSSupportAccess' managed policy to the created IAM role: 
&lt;br /&gt; 
&lt;br /&gt;aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --role-name &amp;lt;aws_support_iam_role&amp;gt; 
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: list entities for policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html"/>
            <reference name="Amazon docs: managed policies and inline policies" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.17" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the &amp;quot;Arn&amp;quot; element value: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-policies --query &amp;quot;Policies[?PolicyName == 'AWSSupportAccess']&amp;quot; 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;Check if the 'AWSSupportAccess' is attached to any IAM user, group or role: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-entities-for-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; 
            &lt;span style=" , Arial;"&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-3" name="Create AWS Organizations change alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;organizations_changes&amp;gt;` --metric-transformations metricName= `&amp;lt;organizations_changes&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = "AcceptHandshake") || ($.eventName = "AttachPolicy") || ($.eventName = "CreateAccount") || ($.eventName = "CreateOrganizationalUnit") || ($.eventName = "CreatePolicy") || ($.eventName = "DeclineHandshake") || ($.eventName = "DeleteOrganization") || ($.eventName = "DeleteOrganizationalUnit") || ($.eventName = "DeletePolicy") || ($.eventName = "DetachPolicy") || ($.eventName = "DisablePolicyType") || ($.eventName = "EnablePolicyType") || ($.eventName = "InviteAccountToOrganization") || ($.eventName = "LeaveOrganization") || ($.eventName = "MoveAccount") || ($.eventName = "RemoveAccountFromOrganization") || ($.eventName = "UpdatePolicy") || ($.eventName = "UpdateOrganizationalUnit")) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;organizations_changes&amp;gt;` --metric-name `&amp;lt;organizations_changes&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.15" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.15" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.8" name="Create billing alerts to identify unusual spend" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By setting billing alarms you can monitor your AWS spend and be alerted if it exceeds certain thresholds thus protecting you from accruing unnecessary charges. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the Receive Billing Alerts check box.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Choose Save preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia). The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, under "Metrics", choose "Billing".&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of billing metrics, select the check box next to Currency USD, for the metric named EstimatedCharges. Define the alarm as follows:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you want the alarm to trigger as soon as you go over the free tier, set "When my total AWS charges for the month exceed" to $.01. This means that you'll receive a notification as soon as you incur a charge. Otherwise, set it to the amount you want to trigger the alarm, and you will be notified when you go over that amount.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose the "New list" link next to the "send a notification to" box.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;When prompted, enter your email address or choose your Amazon SNS notification from the drop down.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose "Create Alarm".&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;In the "Confirm new email addresses" dialog box, confirm the email address or choose "I will do it later". If you don't confirm the email address now, the alarm remains in the Pending confirmation status until you do so, and does not send an alert. To view the status of your alarm, choose "Alarms" in the navigation panel.&lt;/li&gt; 
 &lt;/ol&gt; &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management
                            console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the &amp;quot;Receive Billing Alerts&amp;quot; check box is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia).
                            The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, under &amp;quot;Alarms&amp;quot;, check for one called
                            &amp;quot;Billing&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on the alert if it exists and select the checkbox in the first column.&lt;/li&gt;
                            &lt;li&gt;In the preview pane check that the &amp;quot;EstimatedCharges&amp;quot; threshold
                            is set to the correct value and that the &amp;quot;Actions&amp;quot; is send an alarm to a
                            valid email address.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.4" name="Create cloudtrail configuration changes alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is changes to
                        cloudtrail. Since cloudtrail is the actual utility logging API calls it's security is paramount
                        to ensuring that this continues. Therefore alerting on changes to cloudtrail activity can
                        prevent a malicious user switching off the logging in order to carry out untracked activities.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&amp;nbsp;&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;aws
                        logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) ||
                        ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName =
                            DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.4-5.5" name="Create Cloudwatch Log Group for tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS CloudWatch Log groups define groups of log streams that share the same retention, monitoring, and access control settings. Each log stream has to belong to one log group.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch log group for the Web tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs create-log-group --log-group-name &amp;lt;web_tier_log_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/create-log-group.html"/>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs describe-log-groups --query "logGroups[?logGroupName =='&amp;lt;web_tier_log_group&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.706">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.6" name="Create IAM Policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is management IAM policy changes. IAM manages authorization and authentication controls with AWS and therefore it is vital that unauthorized changes are detected. Enabling monitoring of these changes ensures that these policies remain intact and as desired. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for IAM policy changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P utUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr eatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)| |($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs erPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above:aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt; &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource
                            = kms.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.3" name="Create management console login alerts when MFA is not used" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is login on the
                        console without MFA. Since logging on at the console should be restricted to only those users
                        with an active MFA this alert will highlight those with password only access. This helps to
                        capture weaker login procedures (password only) as they occur.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login without MFA: aws logs
                        put-metric-filter --log-group-name &amp;lt;cloudwatch-logs-group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{
                        $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot; }'&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot;
                            }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.5" name="Create management console login failure alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is management
                        console login failures. The management console is the AWS account GUI where administration
                        activity is performed and is therefore a primary target for brute force attempts. To identify
                        these attempts alerts for login failures should be enabled as this can highlight suspicious
                        activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login failures: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = ConsoleLogin)
                        &amp;amp;&amp;amp; ($.errorMessage = &amp;quot;Failed authentication&amp;quot;) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = ConsoleLogin) &amp;amp;&amp;amp; ($.errorMessage = \&amp;quot;Failed
                            authentication\&amp;quot;) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-2" name="Create network gateways change alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;network_gw_changes_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;network_gw_changes_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;network_gw_changes_alarm&amp;gt;` --metric-name `&amp;lt;network_gw_changes_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.12" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.12" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.704">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.2" name="Create root account usage alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is usage of the
                        root account. This account should not be used on a day to day basis due to its full unrestricted
                        privilege therefore usage should be by exception. Monitoring this usage should capture any
                        suspicious activity used on the account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws logs
                        describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy NOT
                        EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy
                            NOT EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.8" name="Create s3 bucket policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is S3 bucket policy changes. S3 bucket policies are a resource based policy that provide authorizations on S3 buckets. 
&lt;div&gt; 
 &lt;br /&gt; 
  Making sure that their integrity remains intact is vital in ensuring the data within the S3 bucket remains secure and authorizations intact. Therefore s3 bucket policy changes should be alerted upon 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a metric filter that checks for S3 Bucket policy changes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;value&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS topic for notifications:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns create-topic --name &amp;lt;topic_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
                            ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
                            PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
                            DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName =
                            DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.10" name="Create security group change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is security group changes. Security groups are analogous to firewalls and therefore protect inbound and outbound access to &amp;amp; from AWS resources such as ec2 instances and RDS databases (amongst other things. Therefore alerting on changes to security groups helps ensure that the resources protected by them are not exposed.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for security group changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =
                            AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName
                            = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName =
                            DeleteSecurityGroup)}&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-1" name="Create unauthorized API calls alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.&lt;/p&gt;&lt;p&gt;If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.&lt;/p&gt;&lt;p&gt;In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;unauthorized_api_calls_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") || ($.sourceIPAddress!="delivery.logs.amazonaws.com") || ($.eventName!="HeadBucket") }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;unauthorized_api_calls_alarm&amp;gt;` --metric-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.703">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.13" name="Create VPC gateway change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC gateway
                        changes. VPC gateways are used as a means of sending traffic outside of a VPC (ie to the
                        internet) and are vital in ensuring traffic flows to the correct destination. Therefore alerting
                        on changes to VPC gateways ensuring traffic continues to flow as expected via the correct
                        gateway.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC gateway changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateCustomerGateway)
                        || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||
                        ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName =
                        DetachInternetGateway) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.14" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.14" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) ||
                            ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) ||
                            ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.11" name="Create VPC NACL change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC NACL
                        changes. Network Access Control Lists (NACLS) control inbound and outbound access to &amp;amp;
                        from AWS subnets and work like packet filters to protect the network. Therefore alerting on
                        changes to NACLS helps ensure that the subnets protected by them are not exposed.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for NACL changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateNetworkAcl) ||
                        ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =
                        DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
                        ReplaceNetworkAclAssociation) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) ||
                            ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName =
                            ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.12" name="Create VPC route table change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC route
                        table changes. VPC route tables provide a means of routing network traffic between subnets and
                        via gateways and ensures traffic flows via the correct path. Therefore alerting on changes to
                        route tables ensuring traffic continues to flow as expected.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC route table changes: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateRoute)
                        || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
                        ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute)
                        || ($.eventName = DisassociateRouteTable) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.13" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.13" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName
                            = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName =
                            DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.705">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.6-5.7" name="Define a retention period for Cloudwatch log group in tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Retention period should be used to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically. Just like metric filters, retention settings are also assigned to log groups, and the retention assigned to a log group is applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Put a retention policy for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-retention-policy --log-group-name &amp;lt;web_tier_log_group&amp;gt; --retention-indays &amp;lt;log_retention_period&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  If the retention period is not configured then logs will be retained indefinitely with increasing cost. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
            <reference name="Put retention policy" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-retention-policy.html"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group, and check for the presence of "retentionInDays" element:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs describe-log-groups --query "logGroups[?logGroupName == 
   &lt;/div&gt; 
   &lt;div&gt;
     '&amp;lt;web_tier_log_group&amp;gt;']" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.706">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM2" name="Disable credentials unused after 45 days" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to manage Unused Password (IAM user console access)&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select user whose Console last sign-in is greater than 45 days&lt;/li&gt;&lt;li&gt;Click Security credentials&lt;/li&gt;&lt;li&gt;In section Sign-in credentials, Console password click Manage&lt;/li&gt;&lt;li&gt;Under Console Access select Disable 10.Click Apply&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Perform the following to deactivate Access Keys:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have been used and&lt;ol&gt;&lt;li&gt;Click on Make Inactive&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have not been used and&lt;ol&gt;&lt;li&gt;Click the X to Delete&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.12" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.12" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine if unused credentials exist:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click the Settings (gear) icon.&lt;/li&gt;&lt;li&gt;Select Console last sign-in, Access key last used, and Access Key Id&lt;/li&gt;&lt;li&gt;Click on Close&lt;/li&gt;&lt;li&gt;Check and ensure that Console last sign-in is less than 45 days ago.&lt;ol&gt;&lt;li&gt;Note - Never means the user has never logged in.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Check and ensure that Access key age is less than 45 days and that Access key last used does not say None&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If the user hasn't signed into the Console in the last 45 days or Access keys are over 45 days old refer to the remediation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Download Credential Report:&lt;/p&gt;&lt;p&gt;1. Run the following commands:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam generate-credential-report&amp;nbsp;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,5,6,9,10,11,14,15,16&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure unused credentials do not exist:&lt;/p&gt;&lt;p&gt;2. For each user having password_enabled set to TRUE , ensure password_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When password_enabled is set to TRUE and password_last_used is set to No_Information , ensure password_last_changed is less than 45 days ago.&lt;/p&gt;&lt;p&gt;3. For each user having an access_key_1_active or access_key_2_active to TRUE , ensure the corresponding access_key_n_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When a user having an access_key_x_active (where x is 1 or 2) to TRUE and corresponding access_key_x_last_used_date is set to N/A', ensure access_key_x_last_rotated` is less than 45 days ago.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.21" name="Do not setup access keys during initial user setup for all IAM users that have a console password" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation: &lt;/b&gt; 
&lt;br /&gt;Perform the following to delete access keys that do not pass the audit. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to the AWS Management Console.Click Services.&lt;/li&gt; 
 &lt;li&gt;Click IAM&lt;/li&gt; 
 &lt;li&gt;Click on Users.Click on Security Credentials.&lt;/li&gt; 
 &lt;li&gt;As an Administrator.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;br /&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; As an IAM User&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Via CLI:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;aws iam delete-access-key&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;span style="font-weight: bold;"&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.11" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform the following to determine if access keys are rotated as prescribed: 
            &lt;br /&gt; 
            &lt;ol&gt; 
             &lt;li&gt;Login to the AWS Management Console&lt;/li&gt; 
             &lt;li&gt;Click Services&lt;/li&gt; 
             &lt;li&gt;Click IAM&lt;/li&gt; 
             &lt;li&gt;Click on a User&lt;/li&gt; 
             &lt;li&gt;Compare the user creation date to the key 1 creation date.&lt;/li&gt; 
             &lt;li&gt;For any that match, the key was created during initial user setup.&lt;/li&gt; 
            &lt;/ol&gt;Keys that were created at the same time as the user profile and do not have a last used date should be deleted. 
            &lt;br /&gt; 
            &lt;br /&gt;Via the CLI: 
            &lt;br /&gt; 
            &lt;ul&gt; 
             &lt;li&gt;Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their access keys utilization:&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam generate-credential-report 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;br /&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,9,11,14,16 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;The output of this command will produce a table similar to the following:&amp;nbsp;&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_ 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               key_2_active,access_key_2_last_used_date 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               elise,false,true,2015-04-16T15:14:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               brandon,true,true,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               rakesh,false,false,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               helene,false,true,2015-11-18T17:47:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;For any user having access_key_last_used_date set to N/A , ensure that access key is deleted&lt;/li&gt; 
            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.239">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.2" name="Enable CloudTrail log file validation" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Enabling log file validation will provide additional integrity checking of CloudTrail as it
                        creates a digest for each log file it writes to S3. These digests can then be used to determine
                        if a log has been modified since being written
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail update-trail --name &amp;lt;trail_name&amp;gt; --enable-log-file-validation
                        &lt;/blockquote&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails&amp;nbsp;
                            &lt;/blockquote&gt;Ensure LogFileValidationEnabled = true (for each trail)
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM6" name="Enable IAM Access Analyzer for all regions" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable IAM Access analyzer for IAM policies about all resources in each region.&lt;/p&gt;&lt;p&gt;IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to enable IAM Access analyzer for IAM policies:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;Choose Access analyzer.&lt;/li&gt;&lt;li&gt;Choose Create analyzer.&lt;/li&gt;&lt;li&gt;On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.&lt;/li&gt;&lt;li&gt;Enter a name for the analyzer. Optional as it will generate a name for you automatically.&lt;/li&gt;&lt;li&gt;Add any tags that you want to apply to the analyzer. Optional.&lt;/li&gt;&lt;li&gt;Choose Create Analyzer.&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run the following command:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer create-analyzer --analyzer-name &amp;lt;NAME&amp;gt; --type &amp;lt;ACCOUNT|ORGANIZATION&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Repeat this command above for each active region. Note: The IAM Access Analyzer is successfully configured only when the account you use has the necessary permissions.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.20" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.20" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/&lt;/li&gt;&lt;li&gt;Choose Access analyzer&lt;/li&gt;&lt;li&gt;Click 'Analyzers'&lt;/li&gt;&lt;li&gt;Ensure that at least one analyzer is present&lt;/li&gt;&lt;li&gt;Ensure that the STATUS is set to Active&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run the following command:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer list-analyzers | grep status&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Ensure that at least one Analyzer the status is set to ACTIVE&lt;/p&gt;&lt;p&gt;3. Repeat the steps above for each active region.&lt;/p&gt;&lt;p&gt;If an Access analyzer is not listed for each region or the status is not set to active refer to the remediation procedure below.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.6" name="Enable S3 Bucket logging" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>S3 Bucket Access Logging generates log files that contain access records for each request made
                        to an S3 bucket. By enabling this it is possible to capture events relating to the objects
                        within that bucket thus helping to capture potential security issues or identifying threats. It
                        is recommended to enable S3 bucket logging on any S3 bucket that contains sensitive data and
                        stored the logs in a separate bucket for security analysis.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                        &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&lt;/li&gt;
                        &lt;li&gt;Click on Properties in the top right of the console.&lt;/li&gt;
                        &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                        &lt;li&gt;Click on the &amp;quot;Enabled&amp;quot; checkbox.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Bucket&amp;quot; to store the logs.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Prefix&amp;quot; for the logs.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.6" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                            &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on Properties in the top right of the console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Enabled&amp;quot; is checked.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.5" name="Encrypt CloudTrail logs using KMS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, the log files delivered by CloudTrail to your bucket are encrypted by Amazon
                        server-side encryption with Amazon S3-managed encryption keys (SSE-S3). To provide a security
                        layer that is directly manageable, you can instead use server-side encryption with AWS
                        KMS-managed
                        keys (SSE-KMS) for your CloudTrail log files. This provides several advantages:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can assign permissions for the key to the users in your organization according to
                        your requirements.&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions:&amp;nbsp;&lt;/li&gt;
                        &lt;ol&gt;
                        &lt;li&gt;you must have S3 read permission on the bucket, and&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;you must be granted decrypt permission by the CMK policy.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/ul&gt;Because S3 automatically decrypts the log files for requests from users authorized to
                        use the CMK, SSE-KMS encryption for CloudTrail log files is backward compatible with existing
                        applications that read CloudTrail log data.&amp;nbsp;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permissions).&lt;/li&gt;
                        &lt;li&gt;Select CloudTrail from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on a Trail.&lt;/li&gt;
                        &lt;li&gt;Under the S3 section click on the edit button.&lt;/li&gt;
                        &lt;li&gt;Click Advanced.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Encrypt Log Files&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Create a new KMS key&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In &amp;quot;KMS key&amp;quot; type a name for your key.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt; 
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails
                            &lt;/blockquote&gt;Check that KMS is enabled if the &amp;quot;KmsKeyId&amp;quot; property is
                            set.
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.9" name="Enforce employee lifecycle policies" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Regular reviews of accounts on the system should be conducted to ensure that stale accounts
                        cannot be abused either by those former employees using them or compromised by attackers.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;At least every 90 days complete the following:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;For any user that should no longer exist:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;select the user,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;User Actions&amp;quot;,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;Delete&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Ensure all users are valid users.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM4" name="Ensure IAM policies that allow full &quot;*:*&quot; administrative privileges are not attached" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.&lt;/p&gt;&lt;p&gt;Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.&lt;/p&gt;&lt;p&gt;IAM policies that have a statement with "Effect": "Allow" with "Action": "*" over "Resource": "*" should be removed.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the navigation pane, click Policies and then search for the policy name found in the audit step.&lt;/li&gt;&lt;li&gt;Select the policy that needs to be deleted.&lt;/li&gt;&lt;li&gt;In the policy action menu, select first Detach&lt;/li&gt;&lt;li&gt;Select all Users, Groups, Roles that have this policy attached&lt;/li&gt;&lt;li&gt;Click Detach Policy&lt;/li&gt;&lt;li&gt;In the policy action menu, select Detach&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges as found in the audit step:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Lists all IAM users, groups, and roles that the specified managed policy is attached to. aws iam list-entities-for-policy --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Users: aws iam detach-user-policy --user-name &amp;lt;iam_user&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Groups: aws iam detach-group-policy --group-name &amp;lt;iam_group&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Roles: aws iam detach-role-policy --role-name &amp;lt;iam_role&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.16" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.16" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine what policies are created: From Command Line:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Run the following to get a list of IAM policies: aws iam list-policies --only-attached --output text&lt;/li&gt;&lt;li&gt;For each policy returned, run the following command to determine if any policies is allowing full administrative privileges on the account: aws iam get-policy-version --policy-arn &amp;lt;policy_arn&amp;gt; --version-id &amp;lt;version&amp;gt;&lt;/li&gt;&lt;li&gt;In output ensure policy should not have any Statement block with "Effect": "Allow" and Action set to "*" and Resource set to "*"&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Network-1" name="Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL to remediate, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Click Edit inbound rules&lt;/li&gt;&lt;li&gt;Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule&lt;/li&gt;&lt;li&gt;Click Save&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="5.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to determine if the account is configured as prescribed:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Ensure no rule exists that has a port range that includes port 22, 3389, or other remote server administration ports for your environment and has a Source of 0.0.0.0/0 and shows ALLOW&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note: A Port value of ALL or a port range such as 0-1024 are inclusive of port 22, 3389, and other remote server administration ports&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.063">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM3" name="Ensure there is only one active access key available for any single IAM user" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK)&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;In Access Keys section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/li&gt;&lt;li&gt;In the same Access Keys section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the Make Inactive link.&lt;/li&gt;&lt;li&gt;If you receive the Change Key Status confirmation box, click Deactivate to switch off the selected key.&lt;/li&gt;&lt;li&gt;Repeat steps no. 3 - 7 for each IAM user in your AWS account.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Using the IAM user and access key information provided in the Audit CLI, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/p&gt;&lt;p&gt;2. Run the update-access-key command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user&lt;/p&gt;&lt;p&gt;Note - the command does not return any output:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam update-access-key --access-key-id &amp;lt;access-key-id&amp;gt; --status Inactive --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. To confirm that the selected access key pair has been successfully deactivated run the list-access-keys audit command again for that IAM User:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) Status is set to Inactive, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.&lt;/p&gt;&lt;p&gt;4. Repeat steps no. 1 - 3 for each IAM user in your AWS account.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.13" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.13" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;Under Access Keys section, in the Status column, check the current status for each access key associated with the IAM user. If the selected IAM user has more than one access key activated then the users access configuration does not adhere to security best practices and the risk of accidental exposures increases.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Repeat steps no. 3 - 5 for each IAM user in your AWS account.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-users command to list all IAM users within your account:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-users --query "Users[*].UserName"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all your IAM user names.&lt;/p&gt;&lt;p&gt;2. Run list-access-keys command using the IAM user name list to return the current status of each access key associated with the selected IAM user:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata ("Username", "AccessKeyId", "Status", "CreateDate") for each access key on that user account.&lt;/p&gt;&lt;p&gt;3. Check the Status property value for each key returned to determine each keys current state. If the Status property value for more than one IAM access key is set to Active, the user access configuration does not adhere to this recommendation, refer to the remediation below.&lt;/p&gt;&lt;p&gt;Repeat steps no. 2 and 3 for each IAM user in your AWS account.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.8" name="Export EC2 OS logs to cloudwatch logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudwatch logs is an AWS service that allows you to send logs from an EC2 instance to
                        cloudwatch via an agent installed locally on the machine. The logs are then stored centrally
                        within cloudwatch logs and metric alerts can be configured so that security incidents can be
                        reported to the security team. It is recommended to enable cloudwatch log monitoring on all EC2
                        servers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Follow the directions provided in &amp;quot;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html&amp;quot;
                        to install and enable Cloudwatch Logs on a new EC2 instance.
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select Cloudwatch from the services menu.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Logs&amp;quot;.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on your log group.&lt;/li&gt;
                            &lt;li&gt;Click on your log stream.&lt;/li&gt;
                            &lt;li&gt;Ensure event data is being captured as per the logs on your machine.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.8-5.9" name="Install an agent for AWS Cloudwatch Logs within AutoScaling Group for tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use CloudWatch Logs to monitor, store and access log files from an Amazon EC2 instance (application or system data). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  With CloudWatch Logs, you can monitor your logs, in near real-time, for specific phrases, values or patterns (metrics). For example, you could set an alarm on the number of errors that occur in your system logs or view graphs of web request latency from your application logs. Log data can be stored and accessed for as long as you need using highly durable, lowcost storage so you don't have to worry about filling up hard drives. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A Cloudwatch agent needs to run within the Guest Operating System of each EC2 instance you wish to ship logs from. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a sample agent configuration file for Amazon Linux and save it as a text file (for example, awslogs.cfg) either on the AMI's filesystem, in a publicly accessible http/https location, or an Amazon S3 location (for example, s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt;):&lt;/li&gt; 
 &lt;/ul&gt; 
  [general] 
  state_file = /var/awslogs/state/agent-state 
  [/var/log/messages] 
  file = /var/log/messages 
  log_group_name = /var/log/messages 
  log_stream_name = {instance_id} 
  datetime_format = %b %d %H:%M:%S 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new Web tier Autoscaling Launch Configuration with UserData populated for installing Cloudwatch Logs agent:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create and save locally a file containing the UserData, for example /tmp/UserData.txt:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     #!/bin/bashcurl https://s3.amazonaws.com/awscloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agentsetup.py./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Note: You can install the CloudWatch Logs agent by specifying the us-east-1, uswest-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, or sa-east-1 regions.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; -- user-data file:///tmp/UserData.txt 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="EC2 New Instance CWL" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html"/>
          </references>
          <standards>
            <standard ref="5.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the Cloudwatch Logs agent is installed through UserData in the Web tier Autoscaling Launch Configuration:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt;--query "LaunchConfigurations[*].UserData" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Output should be similar with:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    #!/bin/bash 
  &lt;/div&gt; 
  &lt;div&gt;
    curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agent-setup.py ./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.706">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.4" name="Integrate the CloudTrail logs into CloudWatch logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>One way to work with cloudtrail logs is to send them to cloudwatch logs which allows you to
                        define metric filters for alerting and monitoring. This allows you to take immediate action if a
                        certain threshold has been met. Enabling this provides the opportunity to monitor for sensitive
                        account activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permission).&lt;/li&gt;
                        &lt;li&gt;Select Cloudtrail from the services list.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets select the target bucket you want to check.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Properties&amp;quot; then &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on each trail where no CloudWatch Logs are defined.&lt;/li&gt;
                        &lt;li&gt;Go to the &amp;quot;CloudWatch Logs&amp;quot; section and click on &amp;quot;Configure&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Define a new or select an existing log group and click &amp;quot;Continue&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Configure the IAM Role which will deliver CloudTrail events to CloudWatch Logs.&lt;/li&gt;
                        &lt;li&gt;Create/Select an IAM Role and Policy Name.&lt;/li&gt;
                        &lt;li&gt;Click Allow.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail get-trail-status --name &amp;lt;trail_name&amp;gt;
                            &lt;/blockquote&gt;Ensure the &amp;quot;LatestcloudwatchLogdDeliveryTime&amp;quot; property
                            is set to a recent time (ie within the latest day or so).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.1" name="Launch EC2 instances into a VPC" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACLs) and routing. However, the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Launch Instance".&lt;/li&gt;&lt;li&gt;Complete the wizard until step 3. At this point, ensure a VPC ID is selected for the "Network" option, choose an appropriate "Subnet" and "Auto-assign Public IP" option.&lt;/li&gt;&lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;NB: If you want to migrate an already running instance you will need to convert the image into an AMI and then launch a new instance using the AMI and placing in a VPC, as per the steps above&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Instances" from the left hand menu.&lt;/li&gt;&lt;li&gt;For each instance in the list:&lt;ul&gt;&lt;li&gt;select the instance&lt;/li&gt;&lt;li&gt;in the preview pane confirm the instance has a "VPC ID". If a hyphen "-" is shown then your instance is running in EC2-Classic mode.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM7" name="Manage IAM users centrally via identity federation or AWS Organizations for multi-account environments" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;The remediation procedure will vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.21" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For multi-account AWS environments with an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine the master account for identity federation or IAM user management&lt;/li&gt;&lt;li&gt;Login to that account through the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Identity providers&lt;/li&gt;&lt;li&gt;Verify the configuration&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Then..., determine all accounts that should not have local users present. For each account...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For multi-account AWS environments implementing AWS Organizations without an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.2" name="Register a Security contact for your AWS account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS will occasionally send security advisories and alerts to the account holder. By default this will go to the email address that the account is registered under. However if a security contact is specified these alerts will be sent here instead. Therefore this provides the means of ensuring these advisories are routed to the security team, especially if a distribution email address is used.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;In the &amp;quot;Security&amp;quot; section complete the requested contact information.&lt;/li&gt; 
  &lt;li&gt;Click update when complete.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt;
                            &lt;li&gt;Confirm whether a contact has been set for &amp;quot;Security&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM5" name="Remove expired SSL/TLS certificates stored in AWS IAM" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Removing expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Removing expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;To delete Expired Certificate run following command by replacing &amp;lt;CERTIFICATE_NAME&amp;gt; with the name of the certificate to delete:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam delete-server-certificate --server-certificate-name &amp;lt;CERTIFICATE_NAME&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;When the preceding command is successful, it does not return any output.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.19" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.19" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Getting the certificates expiration information via AWS Management Console is not currently supported. To request information about the SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run list-server-certificates command to list all the IAM-stored server certificates:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-server-certificates&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all the SSL/TLS certificates currently stored in IAM and their metadata (name, ID, expiration date, etc):&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ "ServerCertificateMetadataList": [ { "ServerCertificateId": "EHDGFRW7EJFYTE88D", "ServerCertificateName": "MyServerCertificate", "Expiration": "2018-07-10T23:59:59Z", "Path": "/", "Arn": "arn:aws:iam::012345678910:server-certificate/MySSLCertificate", "UploadDate": "2018-06-10T11:56:08Z" } ] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Verify the ServerCertificateName and Expiration parameter value (expiration date) for each SSL/TLS certificate returned by the list-server-certificates command and determine if there are any expired server certificates currently stored in AWS IAM. If so, use the AWS API to remove them. If this command returns:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ { "ServerCertificateMetadataList": [] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This means that there are no expired certificates, It DOES NOT mean that no certificates exist.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.063">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:39.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="API LOGGING AND AUDITING" name="API Logging and Auditing" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-AWS" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails are not properly protected, an attacker could gain access to the system,
                                modify the status of the resources or exfiltrate sensitive data without being noticed.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-ACCESS-ROOT-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM5" mitigation="10"/>
                    <countermeasure ref="AWS-IAM6" mitigation="10"/>
                    <countermeasure ref="AWS-IAM7" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM2" mitigation="10"/>
                    <countermeasure ref="AWS-IAM3" mitigation="10"/>
                    <countermeasure ref="AWS-IAM4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM1" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-IAM1" mitigation="10"/>
                <countermeasure ref="AWS-IAM2" mitigation="10"/>
                <countermeasure ref="AWS-IAM3" mitigation="10"/>
                <countermeasure ref="AWS-IAM4" mitigation="10"/>
                <countermeasure ref="AWS-IAM5" mitigation="10"/>
                <countermeasure ref="AWS-IAM6" mitigation="10"/>
                <countermeasure ref="AWS-IAM7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EXPIRATION-DATE">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-1.21">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                    <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.8" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                <countermeasure ref="aws-tier-2.8" mitigation="8"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AWS RESOURCE LOGGING" name="AWS Resource Logging" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.7" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                <countermeasure ref="aws-tier-4.7" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="CLOUDWATCH METRIC ALERTS" name="Cloudwatch Metric Alerts" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED_ACCESS_SYSTEMS_AWS" name="Attackers access to the systems without being detected" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain access to the systems and they are not detected and the changes of the
                                attackers could not be detected and audited.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                    <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.5">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="cloudwatch-misconfig">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.10">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK-AWS" name="Sensitive data is compromised through undetected network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain undetected access to the network systems and the changes of the attackers
                                could not be audited or detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.12">
                  <countermeasures>
                    <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="VIRTUAL PRIVATE CLOUD (VPC) NETWORK" name="Virtual Private Cloud (VPC) Network" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="AWS-Network-1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                    <countermeasure ref="aws-tier-5.12" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Network-1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                <countermeasure ref="aws-tier-5.12" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1375895d-86ed-4bc2-aa58-1291a81141b8" diagramComponentId="e1d61785-0548-400b-8535-424e0882c66e" ref="948bc350-736c-43e6-9618-39e4caf2ebdd" name="AWS S3 (Simple Storage Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="de92f94e-3964-44e0-8ea4-36eaf9e04810" componentDefinitionRef="s3">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-3" name="Enable cross-region replication on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enabling cross-Region replication on S3 buckets ensures that multiple versions of the data are available in different distinct Regions. This allows you to store data at even greater distances, minimize latency, increase operational efficiency, and protect against DDoS and data corruption events.&lt;/p&gt;&lt;p&gt;This is one method used to implement system hardening configuration.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;To enable S3 bucket replication&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon S3 console at https://console.aws.amazon.com/s3/.&lt;/li&gt;&lt;li&gt;Choose the S3 bucket that does not have cross-region replication enabled.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Management&lt;/strong&gt;, then choose &lt;strong&gt;Replication&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Add rule&lt;/strong&gt;. If versioning is not already enabled, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose your source bucket - &lt;strong&gt;Entire bucket&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose your destination bucket. If versioning is not already enabled on the destination bucket for your account, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose an IAM role. For more information on setting up permissions for replication, see the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Enter a rule name, choose &lt;strong&gt;Enabled&lt;/strong&gt; for the status, then choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag. 
&lt;/div&gt; 
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups? 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br /&gt; 
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br /&gt; 
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion 
&lt;br /&gt;Remediation 
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled 
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-3" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="AWS-S3-3" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a6dd4f38-6451-4ed3-a11c-20cb0520ce80" diagramComponentId="6f59c2ee-5f52-459c-9701-0878e12d5a41" ref="b7a4bc18-af50-4101-ae44-8b5b74fc3b56" name="AWS EFS (Elastic File System)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="a48c22f2-2707-4930-a31d-bf12693165c4" componentDefinitionRef="elastic-file-system">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.808">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-EFS8" name="Connect to EFS API using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to EFS API using an Interface VPC Endpoint&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; To establish a private connection between your virtual private cloud (VPC) and the Amazon EFS API, you can create an interface VPC endpoint. You can use this connection to call the Amazon EFS API from your VPC without sending traffic over the Internet. The endpoint provides secure connectivity to the Amazon EFS API without requiring an Internet gateway, NAT instance, or virtual private network (VPN) connection.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To create an interface VPC endpoint for Amazon EFS, use one of the following:&lt;/p&gt; 
&lt;p&gt;- com.amazonaws.region.elasticfilesystem - Creates an endpoint for Amazon EFS API operations.&lt;br&gt; - com.amazonaws.region.elasticfilesystem-fips - Creates an endpoint for the Amazon EFS API that complies with the Federal Information Processing Standard (FIPS) 140-2&lt;/p&gt; 
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt; 
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt; 
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. Create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, create an endpoint network interface in each subnet that you specify.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt; 
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, the default security group for the VPC is associated.&lt;/p&gt; 
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable a private DNS for the endpoint to allow you to make requests to the service using its default DNS hostname.&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; A private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt; 
&lt;p&gt;The private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt; 
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see the Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt; 
&lt;p&gt;6. After you create the interface endpoint, it's available for use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Working with Interface VPC Endpoints in Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/efs-vpc-endpoints.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view the information about the interface endpoint, choose Details. The DNS Names field displays the DNS names used to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS1" name="Control access to Amazon EFS resources" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to Amazon EFS resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permission policies to IAM identities (that is, users, groups, and roles). Some services, including Amazon EFS, also allow attaching permission policies to resources.&lt;br&gt; Policies attached to an IAM identity are referred to as identity-based policies (IAM policies) and policies attached to a resource are referred to as resource-based policies. Amazon EFS supports both identity-based policies and resource-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Identity-Based Policies (IAM Policies)&lt;/p&gt; 
&lt;p&gt;You can attach policies to IAM identities to control access to the EFS API or to control NFS client access. For example, to grant a user permissions to create an Amazon EFS resource, such as a file system, you can attach a permission policy to a user or to a group that the user belongs to.&lt;/p&gt; 
&lt;p&gt;The following is an example policy that provides the EFS and EC2 permissions required for a user to perform the CreateFileSystem action for your AWS account.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Sid" : "Stmt1EFSpermissions", "Effect": "Allow", "Action": [ "elasticfilesystem:CreateFileSystem", "elasticfilesystem:CreateMountTarget" ], "Resource": "arn:aws:elasticfilesystem:us-west-2:account-id:file-system/*" }, { "Sid" : "Stmt2EC2permissions", "Effect": "Allow", "Action": [ "ec2:DescribeSubnets", "ec2:CreateNetworkInterface", "ec2:DescribeNetworkInterfaces" ], "Resource": "*" } ] &lt;/p&gt; 
&lt;p&gt;Resource-Based Policies&lt;/p&gt; 
&lt;p&gt;You can use file system policies to control API access and NFS client access to the file system. Amazon EFS supports a resource-based policy for file systems called a FileSystemPolicy. Using an EFS FileSystemPolicy you can specify who has access to the file system and what actions they can perform on it. Using file system policies provides you an easy way to control access to your file systems, and lets you grant usage permissions to other accounts on a per-file system basis. The following file system policy grants ClientMount, or read-only, permissions to the EfsReadOnly IAM role.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Id": "read-only-example-policy02", "Statement": [ { "Sid": "efs-statement-example02", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/EfsReadOnly" }, "Action": [ "elasticfilesystem:ClientMount" ]&lt;/p&gt; } ] } 
&lt;p&gt;Note&lt;br&gt; Amazon EFS file system policies have a 20,000 character limit.&lt;/p&gt; 
&lt;p&gt;Using Access Points in IAM Policies&lt;/p&gt; 
&lt;p&gt;You can use an IAM policy to make sure that a specific NFS client, identified by its IAM role, can only access a specific access point. To do this, use the elasticfilesystem:AccessPointArn IAM condition key. The AccessPointArn is the Amazon Resource Name (ARN) of the access point that the file system is mounted with.&lt;/p&gt; 
&lt;p&gt;The following is an example of a file system policy that allows the IAM role app1 to access the file system using access point fsap-01234567. The policy also allows app2 to use the file system using access point fsap-89abcdef.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Id": "MyFileSystemPolicy", "Statement": [ { "Sid": "App1Access", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/app1" }, "Action": [ "elasticfilesystem:ClientMount", "elasticfilesystem:ClientWrite" ], "Condition": { "StringEquals": { "elasticfilesystem:AccessPointArn" : "arn:aws:elasticfilesystem:us-east-1:222233334444:access-point/fsap-01234567" } } }, { "Sid": "App2Access", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/app2" }, "Action": [ "elasticfilesystem:ClientMount", "elasticfilesystem:ClientWrite" ], "Condition": { "StringEquals": { "elasticfilesystem:AccessPointArn" : "arn:aws:elasticfilesystem:us-east-1:222233334444:access-point/fsap-89abcdef" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of Managing Access Permissions to Your Amazon EFS Resources" url="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permission boundaries, Organization service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS5" name="Create CloudWatch alarms to monitor Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Creating CloudWatch alarms to monitor Amazon EFS&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm status changes. An alarm monitors a single metric over a time period you specify, and performs one or more actions based on the value of the metric in relation to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic or Auto Scaling policy.&lt;/p&gt; 
&lt;p&gt;Alarms invoke actions for supported states changes only. CloudWatch alarms don't invoke actions simply because they reach a particular state; the status must have changed and been maintained for a specified amount of time.&lt;/p&gt; 
&lt;p&gt;One important use of CloudWatch alarms for Amazon EFS is to enforce encryption at rest for your file system. You can enable encryption at rest for an Amazon EFS file system when it's created. To enforce data encryption-at-rest policies for Amazon EFS file systems, you can use Amazon CloudWatch and AWS CloudTrail in order to detect the creation of a file system and verify that encryption at rest is enabled. &lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following procedures outline how to create alarms for Amazon EFS.&lt;/p&gt; 
&lt;p&gt;To set alarms using the CloudWatch console&lt;/p&gt; 
&lt;p&gt;1. Sign in to the AWS Management Console and open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. Choose Create Alarm. This launches the Create Alarm Wizard.&lt;/p&gt; 
&lt;p&gt;3. Choose EFS Metrics and scroll through the Amazon EFS metrics to locate the metric you want to associate with the alarm. To display just the Amazon EFS metrics in this dialog box, search on the file system id of your file system. Select the metric to associate with the alarm and choose Next.&lt;/p&gt; 
&lt;p&gt;4. Fill in the Name, Description, and Whenever values for the metric.&lt;/p&gt; 
&lt;p&gt;5. If you want CloudWatch to send you an email when the alarm state is reached, in the Whenever this alarm: field, choose State is ALARM. In the Send notification to: field, choose an existing SNS topic. If you select Create topic, you can set the name and email addresses for a new email subscription list. This list is saved and appears in the field for future alarms.&lt;/p&gt; 
&lt;p&gt;Note: If you use Create topic to create a new Amazon SNS topic, the email addresses must be verified in order to receive notifications. Emails are only sent when the alarm enters an alarm state. If this alarm state change happens before the email addresses are verified, they do not receive a notification.&lt;/p&gt; 
&lt;p&gt;6. At this point, the Alarm Preview area gives you a chance to preview the alarm you're about to create. Choose Create Alarm.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating CloudWatch alarms to monitor Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/creating_alarms.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To test the rule that triggers an API call, you have to trigger it with its Specific operation as defined in the Cloudwatch console. &lt;/p&gt;

	&lt;p&gt;Note &lt;br /&gt;
In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. &lt;/p&gt;

	&lt;p&gt;To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. &lt;/p&gt;

	&lt;p&gt;An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS3" name="Encrypt data at rest in Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypt data at rest in Amazon EFS&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; In an encrypted file system, data and metadata are automatically encrypted before being written to the file system. Similarly, as data and metadata are read, they are automatically decrypted before being presented to the application. These processes are handled transparently by Amazon EFS, so you don't have to modify your applications.&lt;/p&gt; 
&lt;p&gt;Amazon EFS uses the industry-standard AES-256 encryption algorithm to encrypt EFS data and metadata at rest&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Encrypting a file system at rest using the console&lt;/p&gt; 
&lt;p&gt;When you create a new file system using the Amazon EFS console, encryption at rest is enabled by default. The following procedure describes how to enable encryption for a new file system when you create it from the console.&lt;/p&gt; 
&lt;p&gt;To encrypt a new file system using the EFS console&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt; 
&lt;p&gt;2. Choose Create file system to open the Create file system dialog box.&lt;/p&gt; 
&lt;p&gt;3. (Optional) Enter a Name for your file system.&lt;/p&gt; 
&lt;p&gt;4. In Virtual Private Cloud (VPC), choose your VPC, or keep it set to your default VPC.&lt;/p&gt; 
&lt;p&gt;5. Choose Create to create a file system that uses the following service-recommended settings:&lt;/p&gt; 
&lt;p&gt;- Encryption of data at rest enabled using your default key for Amazon EFS (aws/elasticfilesystem).&lt;/p&gt; 
&lt;p&gt;- Automatic backups turned on - For more information, see Using AWS Backup with Amazon EFS.&lt;/p&gt; 
&lt;p&gt;- Mount targets - Amazon EFS creates mount targets with the following settings:&lt;/p&gt; 
&lt;p&gt;i. Located in each Availability Zone in the Region where the file system is created.&lt;br&gt; ii. Located in the default subnets of the VPC that you selected.&lt;br&gt; iii. Uses the VPC's default security group. You can manage security groups after the file system is created.&lt;/p&gt; 
&lt;p&gt;- General Purpose performance mode - For more information, see Performance modes.&lt;/p&gt; 
&lt;p&gt;- Bursting throughput mode - For more information, see Throughput modes.&lt;/p&gt; 
&lt;p&gt;- Lifecycle management enabled with a 30-day policy - For more information, see Amazon EFS lifecycle management.&lt;/p&gt; 
&lt;p&gt;6. The File systems page appears with a banner across the top showing the status of the file system you created. A link to access the file system details page appears in the banner when the file system becomes available.&lt;/p&gt; 
&lt;p&gt;You now have a new encrypted-at-rest file system.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Choosing to enable encryption at rest for your file system has a minimal effect on I/O latency and throughput.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encrypting data at rest" url="https://docs.aws.amazon.com/efs/latest/ug/encryption-at-rest.html"/>
          </references>
          <standards>
            <standard ref="2.4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure you have encryption of data at rest enabled while creating a new file system.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS6" name="Encrypt data in transit for Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypting data in transit for Amazon EFS&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; To encrypt data in transit for your Amazon EFS file system, enable Transport Layer Security (TLS) when you mount your file system using the Amazon EFS mount helper.&lt;br&gt; When encryption of data in transit is declared as a mount option for your Amazon EFS file system, the mount helper initializes a client stunnel process. Stunnel is an open source multipurpose network relay. The client stunnel process listens on a local port for inbound traffic, and the mount helper redirects Network File System (NFS) client traffic to this local port. The mount helper uses TLS version 1.2 to communicate with your file system.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To mount your Amazon EFS file system with the mount helper with encryption of data in transit enabled&lt;/p&gt; 
&lt;p&gt;1. Access the terminal for your instance through Secure Shell (SSH), and log in with the appropriate username.&lt;/p&gt; 
&lt;p&gt;2. Run the following command to mount your file system.&lt;/p&gt; 
&lt;p&gt;sudo mount -t efs -o tls fs-12345678:/ /mnt/efs&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Choosing to enable encryption in transit for your file system has a minimal effect on I/O latency and throughput.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encrypting data in transit" url="https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure you have encryption of data in transit enabled.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS4" name="Enforce creating encrypted File Systems" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforce creating encrypted File Systems&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can create an AWS Identity and Access Management (IAM) identity-based policy to control whether users can create Amazon EFS file systems that are encrypted at rest.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Create an IAM Policy That Authorizes Users to Create Only Encrypted EFS File Systems&lt;/p&gt; 
&lt;p&gt;You can create an IAM identity-based policy that authorizes users to create only encrypted Amazon EFS file systems using the console, the AWS CLI, and the API. The following procedure describes how to create such a policy using the IAM console and then apply the policy to a user in your account.&lt;/p&gt; 
&lt;p&gt;To create an IAM policy to enforce creating encrypted EFS file systems&lt;/p&gt; 
&lt;p&gt;1. Sign in to the AWS Management Console and open the IAM console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, under Access management, choose Policies.&lt;/p&gt; 
&lt;p&gt;3. Choose Create policy to display the Create policy page.&lt;/p&gt; 
&lt;p&gt;4. Enter the following information using the Visual editor:&lt;/p&gt; 
&lt;p&gt;- For Service, choose EFS.&lt;/p&gt; 
&lt;p&gt;- For Actions, enter create in the search field, and then choose CreateFileSystem.&lt;/p&gt; 
&lt;p&gt;- For Request conditions, choose Encrypted.&lt;/p&gt; 
&lt;p&gt;5. Choose Review policy to display the Review policy page.&lt;/p&gt; 
&lt;p&gt;6. Provide a Name and a Description for the policy. Verify the policy summary, including the Encrypted request condition. Choose Create policy to create the policy.&lt;/p&gt; 
&lt;p&gt;To apply the policy to a user in your account&lt;/p&gt; 
&lt;p&gt;1. In the IAM console, under Access management, choose Users.&lt;/p&gt; 
&lt;p&gt;2. Select the user that you want to apply the policy to.&lt;/p&gt; 
&lt;p&gt;3. Choose Add permissions to display the Add permissions page.&lt;/p&gt; 
&lt;p&gt;4. Choose Attach existing policies directly.&lt;/p&gt; 
&lt;p&gt;5. Enter the name of the EFS policy that you created in the previous procedure.&lt;/p&gt; 
&lt;p&gt;6. Select and expand the policy. Then choose {}JSON to verify the policy content. It should look like the following JSON policy.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Sid": "VisualEditor0", "Effect": "Allow", "Action": "elasticfilesystem:CreateFileSystem", &lt;a&gt;Condition&lt;/a&gt; "Bool": { "elasticfilesystem:Encrypted": "true" } }, "Resource": "*" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;7. Choose Next: Review.&lt;/p&gt; 
&lt;p&gt;8. Choose Add permissions to apply the policy to the user. This user can now only create Amazon EFS file systems that are encrypted at rest.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using IAM to Enforce Creating Encrypted File Systems" url="https://docs.aws.amazon.com/efs/latest/ug/using-iam-to-enforce-encryption-at-rest.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permission boundaries, Organization service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS7" name="Secure source ports for AWS EFS" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secure source ports for AWS EFS&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; To support a broad set of NFS clients, Amazon EFS allows connections from any source port.&lt;br&gt; Ensure that only privileged users can access Amazon EFS.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; If you require that only privileged users can access Amazon EFS, AWS recommends using the following client firewall rule:&lt;/p&gt; 
&lt;p&gt;iptables -I OUTPUT 1 -m owner -uid-owner 1-4294967294 -m tcp -p tcp -dport 2049 -j DROP&lt;/p&gt; 
&lt;p&gt;This command inserts a new rule at the start of the OUTPUT chain (-I OUTPUT 1). The rule prevents any unprivileged, nonkernel process (-m owner -uid-owner 1-4294967294) from opening a connection to the NFS port (-m tcp -p tcp -dport 2049).&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Source ports for working with EFS" url="https://docs.aws.amazon.com/efs/latest/ug/source-ports.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that only privileged users can access Amazon EFS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS10" name="Turn Off the ID Mapper for NFS utilities" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Turn Off the ID Mapper for NFS utilities&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; The NFS utilities in the operating system include a daemon called ID Mapper that manages mapping between usernames and IDs. In Amazon Linux, the daemon is called rpc.idmapd and on Ubuntu it is called idmapd. It translates user and group IDs into names, and vice versa. However, Amazon EFS deals only with numeric IDs.&lt;br&gt; AWS recommends turning this process off on your EC2 instances. On Amazon Linux, the ID mapper is usually disabled and if it is, don't enable it.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To turn off the ID mapper, use the following commands.&lt;/p&gt; 
&lt;p&gt;$ service rpcidmapd status&lt;br&gt; $ sudo service rpcidmapd stop&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Working with users, groups, and permissions at the Network File System (NFS) Level" url="https://docs.aws.amazon.com/efs/latest/ug/accessing-fs-nfs-permissions.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that ID Mapper for NFS utilities is turned off.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS2" name="Turn on automatic backups for Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Turn on automatic backups for Amazon EFS&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; AWS Backup is a simple and cost-effective way to protect your data by backing up your Amazon EFS file systems. AWS Backup is a unified backup service designed to simplify the creation, migration, restoration, and deletion of backups, while providing improved reporting and auditing. AWS Backup makes it easier to develop a centralized backup strategy for legal, regulatory, and professional compliance. AWS Backup also makes it simpler to protect your AWS storage volumes, databases, and file systems by providing a central place where you can do the following:&lt;/p&gt; 
&lt;p&gt;- Configure and audit the AWS resources that you want to back up&lt;br&gt; - Automate backup scheduling&lt;br&gt; - Set retention policies&lt;br&gt; - Monitor all recent backup and restore activity&lt;/p&gt; 
&lt;p&gt;When you create a file system using the Amazon EFS Console, automatic backups are turned on by default. You can turn on automatic backups after creating your file system using the CLI or API. The default EFS backup plan uses the AWS Backup recommended settings for automatic backups - daily backups with a 35 day retention period. The backups created using the default EFS backup plan are stored in a default EFS backup vault which is also created by EFS on your behalf. The default backup plan and backup vault cannot be deleted. You can edit the default backup plan settings using the AWS Backup Management Console.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Turning automatic backups on or off for existing file systems&lt;/p&gt; 
&lt;p&gt;After you create a file system you can turn automatic backups on or off using the console, the CLI, or the EFS API.&lt;/p&gt; 
&lt;p&gt;Turn automatic backups on or off for an existing file system (console)&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt; 
&lt;p&gt;2. In the File systems page, choose the file system that you want to turn automatic backups on or off for and display the File system details page.&lt;/p&gt; 
&lt;p&gt;3. Choose Edit in the General settings panel.&lt;/p&gt; 
&lt;p&gt;4. To turn automatic backups on, select Enable automatic backups.&lt;/p&gt; 
&lt;p&gt;5. Choose Save changes.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using AWS Backup with Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/awsbackup.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that automatic backups are turned on for Amazon EFS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS9" name="Use Amazon EFS access points" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use Amazon EFS access points&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon EFS access points are application-specific entry points into an EFS file system that make it easier to manage application access to shared datasets. Access points can enforce a user identity, including the user's POSIX groups, for all file system requests that are made through the access point. Access points can also enforce a different root directory for the file system so that clients can only access data in the specified directory or its subdirectories.&lt;/p&gt; 
&lt;p&gt;You can use AWS Identity and Access Management (IAM) policies to enforce that specific applications use a specific access point. By combining IAM policies with access points, you can easily provide secure access to specific datasets for your applications.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; You can create Amazon EFS access points using the AWS Management Console or the AWS CLI. You can also create access points programmatically using the AWS SDKs or the Amazon EFS API directly.&lt;/p&gt; 
&lt;p&gt;Creating an access point (console)&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt; 
&lt;p&gt;2. Choose Access points to open the Access points window.&lt;/p&gt; 
&lt;p&gt;3. Choose Create access point to display the Create access point page.&lt;/p&gt; 
&lt;p&gt;You can also open the Create access point page by choosing File Systems. Choose a file system Name or File system ID and then choose Access points and Create access point to create an access point for that file system.&lt;/p&gt; 
&lt;p&gt;a. Enter the following information in the Details panel:&lt;/p&gt; 
&lt;p&gt;- File system - Enter a file system name or ID and choose the matching file system, or just choose from the list that appears when you choose the input field.&lt;/p&gt; 
&lt;p&gt;- (Optional) Name - Enter a name for the access point.&lt;/p&gt; 
&lt;p&gt;- (Optional) Root directory path - You can specify a root directory for the access point; the default access point root is /. To enter a root directory path, use the format /foo/bar. For more information, see Enforcing a Root Directory with an Access Point.&lt;/p&gt; 
&lt;p&gt;b. (Optional) In the POSIX user panel, you can specify the full POSIX identity to use to enforce user and group information for all file operations by NFS clients using the access point. For more information, see Enforcing a User Identity Using an Access Point.&lt;/p&gt; 
&lt;p&gt;- User ID - Enter a numeric POSIX user ID for the user.&lt;/p&gt; 
&lt;p&gt;- Group ID - Enter a numeric POSIX group ID for the user.&lt;/p&gt; 
&lt;p&gt;- Secondary group IDs - Enter an optional comma-separated list of secondary group IDs.&lt;/p&gt; 
&lt;p&gt;c. (Optional) For Root directory creation permissions you can specify the permissions to use when Amazon EFS creates the root directory path, if it is specified and doesn't already exist.&lt;/p&gt; 
&lt;p&gt;- Owner user ID - enter the numeric POSIX user ID to use as the root directory owner.&lt;/p&gt; 
&lt;p&gt;- Owner group ID - enter the numeric POSIX group ID to use as the root directory owner group.&lt;/p&gt; 
&lt;p&gt;- Permissions - enter the Unix mode of the directory. A common configuration is 755. Ensure that the execute bit is set for the access point user so they are able to mount.&lt;/p&gt; 
&lt;p&gt;4. Choose Create access point to create the access point using this configuration.&lt;/p&gt; 
&lt;p&gt;For more information about EFS access points see Reference URLs.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating and deleting access points" url="https://docs.aws.amazon.com/efs/latest/ug/create-access-point.html"/>
            <reference name="Working with Amazon EFS Access Points" url="https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have created Amazon EFS access points.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.728">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS3" mitigation="50"/>
                    <countermeasure ref="AWS-EFS4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS3" mitigation="50"/>
                <countermeasure ref="AWS-EFS4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS7" mitigation="20"/>
                    <countermeasure ref="AWS-EFS8" mitigation="20"/>
                    <countermeasure ref="AWS-EFS9" mitigation="20"/>
                    <countermeasure ref="AWS-VPC5" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS10" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS10" mitigation="20"/>
                <countermeasure ref="AWS-EFS7" mitigation="20"/>
                <countermeasure ref="AWS-EFS8" mitigation="20"/>
                <countermeasure ref="AWS-EFS9" mitigation="20"/>
                <countermeasure ref="AWS-VPC5" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="da65ef6b-9501-41cb-944b-2a66a79ee9e1" diagramComponentId="87832967-5dd4-4921-91ae-c2524cc42bb0" ref="2feedd5b-82ba-43ab-ba6d-7c3ad77bdf22" name="AWS S3 (Simple Storage Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="a48c22f2-2707-4930-a31d-bf12693165c4" componentDefinitionRef="s3">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.171">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.071">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.070">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-3" name="Enable cross-region replication on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enabling cross-Region replication on S3 buckets ensures that multiple versions of the data are available in different distinct Regions. This allows you to store data at even greater distances, minimize latency, increase operational efficiency, and protect against DDoS and data corruption events.&lt;/p&gt;&lt;p&gt;This is one method used to implement system hardening configuration.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;To enable S3 bucket replication&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon S3 console at https://console.aws.amazon.com/s3/.&lt;/li&gt;&lt;li&gt;Choose the S3 bucket that does not have cross-region replication enabled.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Management&lt;/strong&gt;, then choose &lt;strong&gt;Replication&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Add rule&lt;/strong&gt;. If versioning is not already enabled, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose your source bucket - &lt;strong&gt;Entire bucket&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose your destination bucket. If versioning is not already enabled on the destination bucket for your account, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose an IAM role. For more information on setting up permissions for replication, see the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Enter a rule name, choose &lt;strong&gt;Enabled&lt;/strong&gt; for the status, then choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.071">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.071">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag. 
&lt;/div&gt; 
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups? 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.071">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br /&gt; 
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br /&gt; 
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion 
&lt;br /&gt;Remediation 
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled 
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.072">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-3" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="AWS-S3-3" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="6c0827b5-ba3b-4eaf-9481-edc8ab94366a" diagramComponentId="81b3e575-c684-4dd9-b830-b370b5b69788" ref="de92f94e-3964-44e0-8ea4-36eaf9e04810" name="AWS VPC (Virtual Private Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="aa214693-6a81-415a-b4fc-0768870a3f9b" componentDefinitionRef="vpc">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.419">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.419">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.419">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.419">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-VPC2" name="Connect to VPC using an AWS Site-to-Site VPN connection" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to VPC using an AWS Site-to-Site VPN connection&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, instances that you launch into an Amazon VPC can't communicate with your own (remote) network. You can enable access to your remote network from your VPC by creating an AWS Site-to-Site VPN (Site-to-Site VPN) connection, and configuring routing to pass traffic through the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS VPC - VPN connections" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html"/>
            <reference name="What is AWS Site-to-Site VPN?" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs.&lt;/li&gt; 
  &lt;li&gt;Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic.&lt;/li&gt; 
  &lt;li&gt;If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance.&lt;/li&gt; 
  &lt;li&gt;(Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device.&lt;/li&gt; 
  &lt;li&gt;(Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing.&lt;/li&gt; 
  &lt;li&gt;Ensure that you have configured routing in your subnet route tables for the VPN connection.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC1" name="Control access to VPC resources with IAM identities and policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to VPC resources with IAM identities and policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely control access to AWS resources. IAM administrators control who can be authenticated (signed in) and authorized (have permissions) to use Amazon VPC resources. IAM is an AWS service that you can use with no additional charge. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Control access to VPC resources by using: 
&lt;/div&gt; 
&lt;div&gt;
  1. Identities: 
&lt;/div&gt; 
&lt;div&gt;
  Authentication is how you sign in to AWS using your identity credentials. 
&lt;/div&gt; 
&lt;div&gt;
  You must be authenticated (signed in to AWS) as the AWS account root user, an IAM user, or by assuming an IAM role. You can also use your company's single sign-on authentication, or even sign in using Google or Facebook. In these cases, your administrator previously set up identity federation using IAM roles. When you access AWS using credentials from another company, you are assuming a role indirectly. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Identity-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Identity-based policies are JSON permissions policy documents that you can attach to an identity, such as an IAM user, role, or group. These policies control what actions that identity can perform, on which resources, and under what conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Resource-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. Service administrators can use these policies to define what actions a specified principal (account member, user, or role) can perform on that resource and under what conditions. Resource-based policies are inline policies. There are no managed resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Access control lists (ACLs): 
&lt;/div&gt; 
&lt;div&gt;
  Access control lists (ACLs) are a type of policy that controls which principals (account members, users, or roles) have permissions to access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and access management for Amazon VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/security-iam.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC8" name="Create CloudWatch alarms to monitor a NAT gateway" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Creating CloudWatch alarms to monitor a NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor your NAT gateway using CloudWatch, which collects information from your NAT gateway and creates readable, near real-time metrics. You can use this information to monitor and troubleshoot your NAT gateway. NAT gateway metric data is provided at 1-minute intervals, and statistics are recorded for a period of 15 months. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the amount of traffic coming in or leaving the NAT gateway. The following alarm monitors the amount of outbound traffic from clients in your VPC through the NAT gateway to the internet. It sends a notification when the number of bytes reaches a threshold of 5,000,000 during a 15-minute period. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for outbound traffic through the NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the BytesOutToDestination metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt;= and enter 5000000. Enter 1 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 15 minutes and specify a statistic of Sum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can create an alarm that monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm to monitor port allocation errors 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the ErrorPortAllocation metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt; and enter 0. Enter 3 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 5 minutes and specify a statistic of Maximum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring NAT gateways using Amazon CloudWatch" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can test an alarm by setting it to any state using the SetAlarmState API action or the set-alarm-state command in the AWS CLI. This temporary state change lasts only until the next alarm comparison occurs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Using Amazon CloudWatch Alarms" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC3" name="Create Route 53 alias records for VPC endpoints" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for VPC endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An Amazon Virtual Private Cloud (Amazon VPC) interface endpoint lets you use AWS PrivateLink to access selected services. These services include some AWS services, services that are hosted by other AWS customers and partners in their own VPCs, and supported AWS Marketplace partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To route domain traffic to an interface endpoint, use Amazon Route 53 to create an alias record. An alias record is a Route 53 extension to DNS. It's similar to a CNAME record, but you can create an alias record both for the root domain, such as example.com, and for subdomains, such as www.example.com. (You can create CNAME records only for subdomains.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To route traffic to an Amazon VPC interface endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the Route 53 hosted zone and the Amazon VPC interface endpoint using the same account, skip to step 2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the hosted zone and the interface endpoint using different accounts, get the service name for the interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console and open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the right pane, choose the endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the bottom pane, get the value of DNS name, for example, vpce-0fd00dd593example-dexample.cloudtrail.us-west-2.vpce.amazonaws.com. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the Route 53 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Hosted Zones. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the name of the hosted zone that has the domain name that you want to use to route traffic to your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create Record Set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Specify the following values: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Name 
&lt;/div&gt; 
&lt;div&gt;
  Enter the domain name that you want to use to route traffic to your Amazon VPC interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type 
&lt;/div&gt; 
&lt;div&gt;
  Choose A - IPv4 address. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias 
&lt;/div&gt; 
&lt;div&gt;
  Choose Yes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias Target 
&lt;/div&gt; 
&lt;div&gt;
  How you specify the value for Alias Target depends on whether you created the hosted zone and the interface endpoint using the same AWS account or different accounts: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Same account - Choose the list, and find the category Amazon VPC Endpoints. Then choose the DNS name of the interface endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Different accounts - Enter the value that you got in step 1 of this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Routing Policy 
&lt;/div&gt; 
&lt;div&gt;
  Choose the applicable routing policy. For more information, see Choosing a routing policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Evaluate Target Health 
&lt;/div&gt; 
&lt;div&gt;
  Accept the default value of No. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC7" name="Do not put sensitive data into VPC free-form fields" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with Amazon VPC or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into Amazon VPC or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon Virtual Private Cloud" url="https://docs.aws.amazon.com/vpc/latest/userguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC9" name="Enable VPC Traffic Mirroring" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable VPC Traffic Mirroring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an elastic network interface of Amazon EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Content inspection 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Threat monitoring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Troubleshooting 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The security and monitoring appliances can be deployed as individual instances, or as a fleet of instances behind a Network Load Balancer with a UDP listener. Traffic Mirroring supports filters and packet truncation, so that you only extract the traffic of interest to monitor by using monitoring tools of your choice. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your traffic mirror resources using any of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your traffic mirror resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC. The AWS CLI is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs. The AWS SDKs take care of many of the connection details, such as calculating signatures, handling request retries, and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as generating the hash to sign the request and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Traffic Mirroring?" url="https://docs.aws.amazon.com/vpc/latest/mirroring/what-is-traffic-mirroring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can review your traffic mirror targets, filters and sessions from Amazon VPC console:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Region selector, choose the AWS Region that you used when you created the VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the navigation pane, choose Traffic Mirroring, Mirror Targets/Mirror Filters/Mirror Sessions. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Getting started with Traffic Mirroring" url="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.320">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.322">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC6" name="Use Network ACLs for VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Network ACLs for VPC as an additional layer of security 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it's associated with. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the parts of a network ACL rule: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it's applied regardless of any higher-numbered rule that might contradict it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Protocol. You can specify any protocol that has a standard protocol number. For more information, see Protocol Numbers. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Source. [Inbound rules only] The source of the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Destination. [Outbound rules only] The destination for the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Allow/Deny. Whether to allow or deny the specified traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Review your Network ACLs using the console:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Network ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select a Network ACL to see details. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC4" name="Use VPC endpoint policies" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use VPC endpoint policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When you create an endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. Endpoint policies must be written in JSON format. Not all services support endpoint policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service. If a service does not support endpoint policies, the endpoint allows full access to the service. An endpoint policy does not override or replace IAM user policies or service-specific policies (such as S3 bucket policies). It is a separate policy for controlling access from the endpoint to the specified service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You cannot attach more than one policy to an endpoint. However, you can modify the policy at any time. If you do modify a policy, it can take a few minutes for the changes to take effect. For more information about writing policies, see Overview of IAM Policies in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your endpoint policy can be like any IAM policy; however, take note of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Only the parts of the policy that relate to the specified service will work. You cannot use an endpoint policy to allow resources in your VPC to perform other actions; for example, if you add EC2 actions to an endpoint policy for an endpoint to Amazon S3, they will have no effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your policy must contain a Principal element. For additional information related gateway endpoints, see Endpoint policies for gateway endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The size of an endpoint policy cannot exceed 20,480 characters (including white space). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling access to services with VPC endpoints" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.321">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                    <countermeasure ref="AWS-VPC1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                <countermeasure ref="AWS-VPC1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC8" mitigation="33"/>
                    <countermeasure ref="AWS-VPC9" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC8" mitigation="33"/>
                <countermeasure ref="AWS-VPC9" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC4" mitigation="17"/>
                    <countermeasure ref="AWS-VPC5" mitigation="17"/>
                    <countermeasure ref="AWS-VPC6" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC3" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC3" mitigation="17"/>
                <countermeasure ref="AWS-VPC4" mitigation="17"/>
                <countermeasure ref="AWS-VPC5" mitigation="17"/>
                <countermeasure ref="AWS-VPC6" mitigation="17"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="0fc60bd2-d38f-43d0-b004-d26f1130f9ac" diagramComponentId="96bddfd2-c56d-421b-9b7b-c52ef0fb3ea8" ref="48fd997e-94df-44b0-a52b-7465db8cb4f1" name="AWS Athena" desc="" library="Hydras-AWS-Foundation" parentComponentRef="de92f94e-3964-44e0-8ea4-36eaf9e04810" componentDefinitionRef="athena">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.056">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.057">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.416">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA2" name="Connect to AWS Athena using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to AWS Athena Using an Interface VPC Endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can connect directly to Athena using an interface VPC endpoint (AWS PrivateLink) in your Virtual Private Cloud (VPC) instead of connecting over the internet. When you use an interface VPC endpoint, communication between your VPC and Athena is conducted entirely within the AWS network. Each VPC endpoint is represented by one or more Elastic Network Interfaces (ENIs) with private IP addresses in your VPC subnets. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create an interface VPC endpoint to connect to Athena using the AWS console or AWS Command Line Interface (AWS CLI) commands. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the general steps for setting up an interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Important 
&lt;/div&gt; 
&lt;div&gt;
  Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Connect to Amazon Athena Using an Interface VPC Endpoint" url="https://docs.aws.amazon.com/athena/latest/ug/interface-vpc-endpoint.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Viewing your interface endpoint 
&lt;/div&gt; 
&lt;div&gt;
  After you've created an interface endpoint, you can view information about it using the Console or the Command line. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view information about an interface endpoint using the console: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Endpoints and select your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. To view the security groups that are associated with the endpoint network interface, choose Security Groups. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references>
              <reference name="Interface VPC endpoints (AWS PrivateLink)" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA1" name="Control access to AWS Athena using IAM policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS Athena using IAM policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Amazon Athena uses AWS Identity and Access Management (IAM) policies to restrict access to Athena operations. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To run queries in Athena, you must have the appropriate permissions for the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Athena API actions including additional actions for Athena workgroups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Amazon S3 locations where the underlying data to query is stored. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Metadata and resources that you store in the AWS Glue Data Catalog, such as databases and tables, including additional actions for encrypted metadata. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Make sure that other users have appropriate permissions associated with their user profiles. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and Access Management in Athena" url="https://docs.aws.amazon.com/athena/latest/ug/security-iam-athena.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.312">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.964">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA6" name="Enable CloudWatch Query Metrics" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable CloudWatch Query Metrics 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can view query-related metrics in Amazon CloudWatch, control query costs by configuring limits on the amount of data scanned, create thresholds, and trigger actions, such as Amazon SNS alarms, when these thresholds are breached. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  When you create a workgroup in the console, the setting for publishing query metrics to CloudWatch is selected by default. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable or disable query metrics in the Athena console for a workgroup 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Athena console at https://console.aws.amazon.com/athena/. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Choose the Workgroup tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose the workgroup that you want to modify, and then choose View details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose Edit workgroup. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Edit workgroup page, under Metrics, select or clear the Publish query metrics to AWS CloudWatch option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you use API operations, the command line interface, or the client application with the JDBC driver to create workgroups, to enable publishing of query metrics, set PublishCloudWatchMetricsEnabled to true in WorkGroupConfiguration. The following example shows only the metrics configuration and omits other configuration: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  "WorkGroupConfiguration": {&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; "PublishCloudWatchMetricsEnabled": "true" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp;.... 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enabling CloudWatch Query Metrics" url="https://docs.aws.amazon.com/athena/latest/ug/athena-cloudwatch-metrics-enable.html"/>
            <reference name="Logging and Monitoring in Athena" url="https://docs.aws.amazon.com/athena/latest/ug/security-logging-monitoring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA3" name="Encrypt query results AWS Athena stores in Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Encrypt query results AWS Athena stores in Amazon S3 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can encrypt the results of all queries in Amazon S3, which Athena stores in a location known as the Amazon S3 results location. You can encrypt query results stored in Amazon S3 whether the underlying dataset is encrypted in Amazon S3 or not. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  The setup for querying an encrypted dataset in Amazon S3 and the options in Athena to encrypt query results are independent. Each option is enabled and configured separately. You can use different encryption methods or keys for each. This means that reading encrypted data in Amazon S3 doesn't automatically encrypt Athena query results in Amazon S3. The opposite is also true. Encrypting Athena query results in Amazon S3 doesn't encrypt the underlying dataset in Amazon S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can configure the setting for encryption of query results in two ways: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Client-side settings - When you use Settings in the console or the API operations to indicate that you want to encrypt query results, this is known as using client-side settings. Client-side settings include query results location and encryption. If you specify them, they are used, unless they are overridden by the workgroup settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Workgroup settings - When you create or edit a workgroup and select the Override client-side settings field, then all queries that run in this workgroup use the workgroup settings. For more information, see Workgroup Settings Override Client-Side Settings. Workgroup settings include query results location and encryption. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To encrypt query results stored in Amazon S3 using the console: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. In the Athena console, choose Settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. For Query result location, enter a custom value or leave the default. This is the Amazon S3 staging directory where query results are stored. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Encrypt query results. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. For Encryption type, choose CSE-KMS, SSE-KMS, or SSE-S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. If you chose SSE-KMS or CSE-KMS, specify the Encryption key. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If your account has access to an existing AWS KMS customer managed key (CMK), choose its alias or choose Enter a KMS key ARN and then enter an ARN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If your account does not have access to an existing AWS KMS customer managed key (CMK), choose Create KMS key, and then open the AWS KMS console. In the navigation pane, choose AWS managed keys. For more information, see Creating Keys in the AWS Key Management Service Developer Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Athena supports only symmetric keys for reading and writing data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Return to the Athena console to specify the key by alias or ARN as described in the previous step. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Choose Save. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you connect using the JDBC or ODBC driver, you configure driver options to specify the type of encryption to use and the Amazon S3 staging directory location. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encrypting Query Results Stored in Amazon S3" url="https://docs.aws.amazon.com/athena/latest/ug/encrypting-query-results-stored-in-s3.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Ensure that Encrypt query results option is enabled in the Query Editor Settings into the AWS Athena console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can test a query by running it and then by going to Amazon S3 console and viewing data files created in your bucket. There you can check the Server side encryption and Key fields. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references>
              <reference name="Launch: Amazon Athena adds support for Querying Encrypted Data" url="https://aws.amazon.com/blogs/aws/launch-amazon-athena-adds-support-for-querying-encrypted-data/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.314">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.1" name="Launch EC2 instances into a VPC" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACLs) and routing. However, the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Launch Instance".&lt;/li&gt;&lt;li&gt;Complete the wizard until step 3. At this point, ensure a VPC ID is selected for the "Network" option, choose an appropriate "Subnet" and "Auto-assign Public IP" option.&lt;/li&gt;&lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;NB: If you want to migrate an already running instance you will need to convert the image into an AMI and then launch a new instance using the AMI and placing in a VPC, as per the steps above&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Instances" from the left hand menu.&lt;/li&gt;&lt;li&gt;For each instance in the list:&lt;ul&gt;&lt;li&gt;select the instance&lt;/li&gt;&lt;li&gt;in the preview pane confirm the instance has a "VPC ID". If a hyphen "-" is shown then your instance is running in EC2-Classic mode.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.314">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA4" name="Retrieve and save query history if needed" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Retrieve and save query history in case you want to keep it longer than 45 days. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can use the Athena console to see the queries that succeeded and failed, download query result files for the queries that succeeded, and view error details for the queries that failed. Athena keeps a query history for 45 days. 
&lt;/div&gt; 
&lt;div&gt;
  If you want to keep the query history longer than 45 days, you can retrieve the query history and save it to a data store such as Amazon S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To automate this process, you can use Athena and Amazon S3 API actions and CLI commands. The following procedure summarizes these steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To retrieve and save query history programmatically: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Use Athena ListQueryExecutions API action or the list-query-executions CLI command to retrieve the query IDs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Use the Athena GetQueryExecution API action or the get-query-execution CLI command to retrieve information about each query based on its ID. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Use the Amazon S3 PutObject API action or the put-object CLI command to save the information in Amazon S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Working with Query Results, Output Files, and Query History" url="https://docs.aws.amazon.com/athena/latest/ug/querying.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To get started with AWS Secrets Manager:&lt;/p&gt;&lt;p&gt;1. Identify your secrets and locate where they are used in your applications.&lt;/p&gt;&lt;p&gt;2. Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console.&lt;/p&gt;&lt;p&gt;3. Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets.&lt;/p&gt;&lt;p&gt;4. If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation.&lt;/p&gt;&lt;p&gt;5. If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret.&lt;/p&gt;&lt;p&gt;6. Update your applications to retrieve secrets from Secrets Manager.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.962">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
              <reference name="Get started with AWS Secrets Manager" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.964">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ATHENA5" name="Use CloudWatch Events with AWS Athena" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use CloudWatch Events with AWS Athena 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  CloudWatch Events delivers a near real-time stream of system events that describe changes in AWS resources. CloudWatch Events becomes aware of operational changes as they occur, responds to them, and takes corrective action as necessary, by sending messages to respond to the environment, activating functions, making changes, and capturing state information. To use CloudWatch Events with Athena, create a rule that triggers on an Athena API call via CloudTrail. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To create a rule that triggers on an API call via CloudTrail: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Events, Create rule. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. For Event source, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. Choose Event Pattern, Build event pattern to match events by service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. For Service Name, choose the service that uses the API operations to use as the trigger. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. For Event Type, choose AWS API Call via CloudTrail. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. To trigger your rule when any API operation for this service is called, choose Any operation. To trigger your rule only when certain API operations are called, choose Specific operation(s), type the name of an operation in the next box, and then press ENTER. To add more operations, choose +. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. For Targets, choose Add Target and choose the AWS service that is to act when an event of the selected type is detected. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. In the other fields in this section, enter information specific to this target type, if any is needed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. For many target types, CloudWatch Events needs permissions to send events to the target. In these cases, CloudWatch Events can create the IAM role needed for your event to run: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - To create an IAM role automatically, choose Create a new role for this specific resource. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - To use an IAM role that you created before, choose Use existing role. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Optionally, repeat steps 4-6 to add another target for this rule. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. Choose Configure details. For Rule definition, type a name and description for the rule. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The rule name must be unique within this Region. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. Choose Create rule. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Logging and Monitoring in Athena" url="https://docs.aws.amazon.com/athena/latest/ug/security-logging-monitoring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:38.313">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.964">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-ATHENA1" mitigation="50"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ATHENA1" mitigation="50"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-ATHENA4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ATHENA4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-ATHENA3" mitigation="50"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="AWS-ATHENA3" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-ATHENA5" mitigation="50"/>
                    <countermeasure ref="AWS-ATHENA6" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ATHENA5" mitigation="50"/>
                <countermeasure ref="AWS-ATHENA6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.16" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="50"/>
                <countermeasure ref="aws-tier-1.16" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-ATHENA2" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ATHENA2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="cf023962-67e2-43e0-a9dd-fd389cbd9d9c" diagramComponentId="c55b6ab3-072d-49c1-a2ed-44e3ec33a029" ref="906594f1-9090-4dcd-b104-6f2e3c3eee3f" name="AWS Direct Connect" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="direct-connect">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.266">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.486">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.261">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-DIRECT-CONNECT2" name="Associate AWS Direct Connect to an AWS Site-to-Site VPN" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Associate AWS Direct Connect to an AWS Site-to-Site VPN 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  With AWS Direct Connect + VPN, you can combine AWS Direct Connect dedicated network connections with the Amazon VPC VPN. AWS Direct Connect public VIF established a dedicated network connection between your network to public AWS resources, such as an Amazon virtual private gateway IPsec endpoint. 
&lt;/div&gt; 
&lt;div&gt;
  This solution combines the benefits of the end-to-end secure IPSec connection with low latency and increased bandwidth of the AWS Direct Connect to provide a more consistent network experience than internet-based VPN connections. A BGP connection is established between the AWS Direct Connect and your router on the public VIF. Another BGP session or a static router will be established between the virtual private gateway and your router on the IPSec VPN tunnel. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Direct Connect + VPN" url="https://docs.aws.amazon.com/whitepapers/latest/aws-vpc-connectivity-options/aws-direct-connect-vpn.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  AWS Site-to-Site VPN 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs. 
&lt;/div&gt; 
&lt;div&gt;
  Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic. 
&lt;/div&gt; 
&lt;div&gt;
  If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance. 
&lt;/div&gt; 
&lt;div&gt;
  (Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device. 
&lt;/div&gt; 
&lt;div&gt;
  (Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing. 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that you have configured routing in your subnet route tables for the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Direct Connect Failover Test 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The AWS Direct Connect Resiliency Toolkit resiliency models are designed to ensure that you have the appropriate number of virtual interface connections in multiple locations. After you complete the wizard, use the AWS Direct Connect Resiliency Toolkit failover test to bring down the BGP peering session in order to verify that traffic routes to one of your redundant virtual interfaces, and meets your resiliency requirements. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Use the test to make sure that traffic routes over redundant virtual interfaces when a virtual interface is out of service. You start the test by selecting a virtual interface, BGP peering session, and how long to run the test. AWS places the selected virtual interface BGP peering session in the down state. When the interface is in this state, traffic should go over a redundant virtual interface. If your configuration does not contain the appropriate redundant connections, the BGP peering session fails, and traffic does not get routed. When the test completes, or you manually stop the test, AWS restores the BGP session. After the test is complete, you can use the AWS Direct Connect Resiliency Toolkit to adjust your configuration. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.191">
              <output/>
            </source>
            <references>
              <reference name="AWS Direct Connect Failover Test" url="https://docs.aws.amazon.com/directconnect/latest/UserGuide/resilency_failover.html"/>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-DIRECT-CONNECT1" name="Control access to AWS Direct Connect using IAM policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS Direct Connect using IAM policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the conditions under which actions are allowed or denied. Direct Connect supports specific actions, resources, and condition keys. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  The Action element of an IAM identity-based policy describes the specific action or actions that will be allowed or denied by the policy. Policy actions usually have the same name as the associated AWS API operation. The action is used in a policy to grant permissions to perform the associated operation. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Policy actions in Direct Connect use the following prefix before the action: directconnect:. For example, to grant someone permission to run an Amazon EC2 instance with the Amazon EC2 DescribeVpnGateways API operation, you include the ec2:DescribeVpnGateways action in their policy. Policy statements must include either an Action or NotAction element. Direct Connect defines its own set of actions that describe tasks that you can perform with this service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following example policy grants read access to AWS Direct Connect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Statement": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "directconnect:Describe*", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "ec2:DescribeVpnGateways" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following example policy grants full access to AWS Direct Connect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Statement": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "directconnect:*", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "ec2:DescribeVpnGateways" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="How AWS Direct Connect works with IAM" url="https://docs.aws.amazon.com/directconnect/latest/UserGuide/security_iam_service-with-iam.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.190">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.407">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-DIRECT-CONNECT5" name="Create CloudWatch alarms to monitor AWS Direct Connect connections" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create CloudWatch alarms to monitor AWS Direct Connect connections 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the state of an AWS Direct Connect connection. It sends a notification when the connection state is down for five consecutive 1-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for the connection state 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Alarms. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose the DX Metrics category. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Select the AWS Direct Connect connection and choose the ConnectionState metric. Choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Configure the alarm as follows, and then choose Create Alarm: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;lt; and enter 1. Enter 5 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Alarm Preview, select a period of 1 minute. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring with Amazon CloudWatch" url="https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.192">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-DIRECT-CONNECT3" name="Do not put sensitive data into AWS Direct Connect free-form fields" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with AWS Direct Connect or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into AWS Direct Connect or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in AWS Direct Connect" url="https://docs.aws.amazon.com/directconnect/latest/UserGuide/data-protection.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.191">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.407">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.407">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To get started with AWS Secrets Manager:&lt;/p&gt;&lt;p&gt;1. Identify your secrets and locate where they are used in your applications.&lt;/p&gt;&lt;p&gt;2. Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console.&lt;/p&gt;&lt;p&gt;3. Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets.&lt;/p&gt;&lt;p&gt;4. If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation.&lt;/p&gt;&lt;p&gt;5. If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret.&lt;/p&gt;&lt;p&gt;6. Update your applications to retrieve secrets from Secrets Manager.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.405">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
              <reference name="Get started with AWS Secrets Manager" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.407">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-DIRECT-CONNECT4" name="Use High or Maximum Resiliency for critical workloads" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use High or Maximum Resiliency for critical workloads 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS offers customers the ability to achieve highly resilient network connections between Amazon Virtual Private Cloud (Amazon VPC) and their on-premises infrastructure. The AWS Direct Connect Resiliency Toolkit provides a connection wizard with multiple resiliency models. These models help you to determine, and then place an order for the number of dedicated connections to achieve your SLA objective. You select a resiliency model, and then the AWS Direct Connect Resiliency Toolkit guides you through the dedicated connection ordering process. The resiliency models are designed to ensure that you have the appropriate number of dedicated connections in multiple locations. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To configure a Maximum Resiliency model 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the AWS Direct Connect console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the AWS Direct Connect screen, under Get started, choose Create a connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3.Under Connection ordering type, choose Connection wizard. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4.bUnder Resiliency level, choose Maximum Resiliency, and then choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure connections pane, under Connection settings, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. For Bandwidth, choose the dedicated connection bandwidth. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This bandwidth applies to all of the created connections. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. For First location service provider, select the appropriate AWS Direct Connect location for the dedicated connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. If applicable, for First Sub location, choose the floor closest to you or your network provider. This option is only available if the location has meet-me rooms (MMRs) on multiple floors of the building. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. If you selected Other for First location service provider, for Name of other provider, enter the name of the partner that you use. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  e. For Second location service provider, select the appropriate AWS Direct Connect location. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  f. If applicable, for Second Sub location, choose the floor closest to you or your network provider. This option is only available if the location has meet-me rooms (MMRs) on multiple floors of the building. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  g. If you selected Other for Second location service provider, for Name of other provider, enter the name of the partner that you use. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  h. (Optional) Add or remove a tag. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  [Add a tag] Choose Add tag and do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Key, enter the key name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Value, enter the key value. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  [Remove a tag] Next to the tag, choose Remove tag. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review your connections, and then choose Continue. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If your LOAs are ready, you can choose Download LOA, and then click Continue. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It can take up to 72 hours for AWS to review your request and provision a port for your connection. During this time, you might receive an email with a request for more information about your use case or the specified location. The email is sent to the email address that you used when you signed up for AWS. You must respond within 7 days or the connection is deleted. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Direct Connect Resiliency Recommendations" url="https://aws.amazon.com/directconnect/resiliency-recommendation/"/>
            <reference name="Using the AWS Direct Connect Resiliency Toolkit to get started" url="https://docs.aws.amazon.com/directconnect/latest/UserGuide/resilency_toolkit.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  The AWS Direct Connect Resiliency Toolkit resiliency models are designed to ensure that you have the appropriate number of virtual interface connections in multiple locations. After you complete the wizard, use the AWS Direct Connect Resiliency Toolkit failover test to bring down the BGP peering session in order to verify that traffic routes to one of your redundant virtual interfaces, and meets your resiliency requirements. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Use the test to make sure that traffic routes over redundant virtual interfaces when a virtual interface is out of service. You start the test by selecting a virtual interface, BGP peering session, and how long to run the test. AWS places the selected virtual interface BGP peering session in the down state. When the interface is in this state, traffic should go over a redundant virtual interface. If your configuration does not contain the appropriate redundant connections, the BGP peering session fails, and traffic does not get routed. When the test completes, or you manually stop the test, AWS restores the BGP session. After the test is complete, you can use the AWS Direct Connect Resiliency Toolkit to adjust your configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Starting the virtual interface failover test 
&lt;/div&gt; 
&lt;div&gt;
  You can start the virtual interface failover test using the AWS Direct Connect console, or the AWS CLI. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To start the virtual interface failover test from the AWS Direct Connect console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the AWS Direct Connect console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Choose Virtual interfaces. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select the virtual interfaces and then choose Actions, Bring down BGP. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can run the test on a public, private, or transit virtual interface. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. In the Start failure test dialog box, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. For Peerings to bring down to test, choose which peering sessions to test, for example IPv4. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. For Test maximum time, enter the number of minutes that the test will last. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The maximum value is 180 minutes (3 hours). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The default value is 180 minutes (3 hours). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. For To confirm test, enter Confirm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. Choose Confirm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The BGP peering session is placed in the DOWN state. You can send traffic to verify that there are no outages. If needed, you can stop the test immediately. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.191">
              <output/>
            </source>
            <references>
              <reference name="AWS Direct Connect Failover Test" url="https://docs.aws.amazon.com/directconnect/latest/UserGuide/resilency_failover.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:36.407">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-DIRECT-CONNECT1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-DIRECT-CONNECT1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-DIRECT-CONNECT4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-DIRECT-CONNECT4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-DIRECT-CONNECT3" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="AWS-DIRECT-CONNECT3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-DIRECT-CONNECT5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-DIRECT-CONNECT5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="AWS-DIRECT-CONNECT2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-DIRECT-CONNECT2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="e06a2368-cdcd-4db4-b4ce-60773aa48a26" diagramComponentId="c6d1e0b9-0a12-4654-8fc5-1bd9882158fd" ref="3a50e3db-0b7e-44fb-95f7-283d08cc6a13" name="AWS EC2 (Elastic Compute Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="ec2">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.697">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.541">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.539">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" name="Ensure that the EC2 instances are managed by the systems manager" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances. Additional configuration is needed in Systems Manager for patch deployment to managed EC2 instances.&lt;/p&gt;&lt;p&gt;If you use EC2 instances managed by Systems Manager to collect inventory for your cardholder data environment (CDE), make sure that the instances are managed by Systems Manager. Using Systems Manager can help to maintain an inventory of system components that are in scope for PCI DSS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For systems that are in scope for PCI DSS, before you install vendor patches in a production environment, you should test and validate them. After you deploy patches, validate security settings and controls to ensure that deployed patches have not affected the security of the CDE. If you use EC2 instances managed by Systems Manager to patch managed instances in your CDE, ensure that the instances are managed by Systems Manager. Systems Manager deploys system patches, which helps to protect system components and software from known vulnerabilities.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You can use the Systems Manager quick setup to set up Systems Manager to manage your EC2 instances.&lt;/p&gt;&lt;p&gt;To determine whether your instances can support Systems Manager associations, see Systems Manager prerequisites in the &lt;i&gt;AWS Systems Manager User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To ensure EC2 instances are managed by Systems Manager&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the AWS Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Quick setup&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the configuration screen, keep the default options.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Set up Systems Manager&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.538">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0 and ::/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be edited or removed.&lt;/li&gt;
                        &lt;li&gt;Either A) update the Source field to a range other than 0.0.0.0/0 or ::/0, or, B) Click Delete to remove the offending inbound rule.&lt;/li&gt;
                        &lt;li&gt;Click Save rules.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="5.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="5.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-1" name="VPC default security group should prohibit inbound and outbound traffic" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If a service that is in scope for PCI DSS is associated with the default security group, the default rules for the security group will allow all outbound traffic. The rules also allow all inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.&lt;/p&gt;&lt;p&gt;You should change the default security group rules setting to restrict inbound and outbound traffic. Using the default might violate the requirement to allow only necessary traffic to and from the CDE.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, create new security groups and assign those security groups to your resources. To prevent the default security groups from being used, remove their inbound and outbound rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To create new security groups and assign them to your resources&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;. View the default security groups details to see the resources that are assigned to them.&lt;/li&gt;&lt;li&gt;Create a set of least-privilege security groups for the resources. For details on how to create security groups, see Creating a security group in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;On the Amazon EC2 console, change the security group for the resources that use the default security groups to the least-privilege security group you created. See Changing an instance's security groups in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After you assign the new security groups to the resources, remove the inbound and outbound rules from the default security groups. This ensures that the default security groups are not used.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To remove the rules from the default security group&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select a default security group, and choose the &lt;strong&gt;Inbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit inbound rules&lt;/strong&gt;. Then delete all of the inbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;li&gt;Select a default security group and choose the &lt;strong&gt;Outbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit outbound rules&lt;/strong&gt;. Then delete all of the outbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                <countermeasure ref="aws-tier-6.9" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="050c9db2-c9be-4c46-92a8-f485b50dd182" diagramComponentId="c39f3c97-0060-4b9f-b574-d32b3a498cee" ref="a48c22f2-2707-4930-a31d-bf12693165c4" name="AWS VPC (Virtual Private Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="aa214693-6a81-415a-b4fc-0768870a3f9b" componentDefinitionRef="vpc">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-VPC2" name="Connect to VPC using an AWS Site-to-Site VPN connection" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to VPC using an AWS Site-to-Site VPN connection&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, instances that you launch into an Amazon VPC can't communicate with your own (remote) network. You can enable access to your remote network from your VPC by creating an AWS Site-to-Site VPN (Site-to-Site VPN) connection, and configuring routing to pass traffic through the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS VPC - VPN connections" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html"/>
            <reference name="What is AWS Site-to-Site VPN?" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs.&lt;/li&gt; 
  &lt;li&gt;Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic.&lt;/li&gt; 
  &lt;li&gt;If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance.&lt;/li&gt; 
  &lt;li&gt;(Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device.&lt;/li&gt; 
  &lt;li&gt;(Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing.&lt;/li&gt; 
  &lt;li&gt;Ensure that you have configured routing in your subnet route tables for the VPN connection.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC1" name="Control access to VPC resources with IAM identities and policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to VPC resources with IAM identities and policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely control access to AWS resources. IAM administrators control who can be authenticated (signed in) and authorized (have permissions) to use Amazon VPC resources. IAM is an AWS service that you can use with no additional charge. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Control access to VPC resources by using: 
&lt;/div&gt; 
&lt;div&gt;
  1. Identities: 
&lt;/div&gt; 
&lt;div&gt;
  Authentication is how you sign in to AWS using your identity credentials. 
&lt;/div&gt; 
&lt;div&gt;
  You must be authenticated (signed in to AWS) as the AWS account root user, an IAM user, or by assuming an IAM role. You can also use your company's single sign-on authentication, or even sign in using Google or Facebook. In these cases, your administrator previously set up identity federation using IAM roles. When you access AWS using credentials from another company, you are assuming a role indirectly. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Identity-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Identity-based policies are JSON permissions policy documents that you can attach to an identity, such as an IAM user, role, or group. These policies control what actions that identity can perform, on which resources, and under what conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Resource-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. Service administrators can use these policies to define what actions a specified principal (account member, user, or role) can perform on that resource and under what conditions. Resource-based policies are inline policies. There are no managed resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Access control lists (ACLs): 
&lt;/div&gt; 
&lt;div&gt;
  Access control lists (ACLs) are a type of policy that controls which principals (account members, users, or roles) have permissions to access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and access management for Amazon VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/security-iam.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC8" name="Create CloudWatch alarms to monitor a NAT gateway" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Creating CloudWatch alarms to monitor a NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor your NAT gateway using CloudWatch, which collects information from your NAT gateway and creates readable, near real-time metrics. You can use this information to monitor and troubleshoot your NAT gateway. NAT gateway metric data is provided at 1-minute intervals, and statistics are recorded for a period of 15 months. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the amount of traffic coming in or leaving the NAT gateway. The following alarm monitors the amount of outbound traffic from clients in your VPC through the NAT gateway to the internet. It sends a notification when the number of bytes reaches a threshold of 5,000,000 during a 15-minute period. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for outbound traffic through the NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the BytesOutToDestination metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt;= and enter 5000000. Enter 1 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 15 minutes and specify a statistic of Sum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can create an alarm that monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm to monitor port allocation errors 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the ErrorPortAllocation metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt; and enter 0. Enter 3 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 5 minutes and specify a statistic of Maximum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring NAT gateways using Amazon CloudWatch" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can test an alarm by setting it to any state using the SetAlarmState API action or the set-alarm-state command in the AWS CLI. This temporary state change lasts only until the next alarm comparison occurs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Using Amazon CloudWatch Alarms" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC3" name="Create Route 53 alias records for VPC endpoints" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for VPC endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An Amazon Virtual Private Cloud (Amazon VPC) interface endpoint lets you use AWS PrivateLink to access selected services. These services include some AWS services, services that are hosted by other AWS customers and partners in their own VPCs, and supported AWS Marketplace partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To route domain traffic to an interface endpoint, use Amazon Route 53 to create an alias record. An alias record is a Route 53 extension to DNS. It's similar to a CNAME record, but you can create an alias record both for the root domain, such as example.com, and for subdomains, such as www.example.com. (You can create CNAME records only for subdomains.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To route traffic to an Amazon VPC interface endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the Route 53 hosted zone and the Amazon VPC interface endpoint using the same account, skip to step 2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the hosted zone and the interface endpoint using different accounts, get the service name for the interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console and open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the right pane, choose the endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the bottom pane, get the value of DNS name, for example, vpce-0fd00dd593example-dexample.cloudtrail.us-west-2.vpce.amazonaws.com. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the Route 53 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Hosted Zones. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the name of the hosted zone that has the domain name that you want to use to route traffic to your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create Record Set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Specify the following values: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Name 
&lt;/div&gt; 
&lt;div&gt;
  Enter the domain name that you want to use to route traffic to your Amazon VPC interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type 
&lt;/div&gt; 
&lt;div&gt;
  Choose A - IPv4 address. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias 
&lt;/div&gt; 
&lt;div&gt;
  Choose Yes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias Target 
&lt;/div&gt; 
&lt;div&gt;
  How you specify the value for Alias Target depends on whether you created the hosted zone and the interface endpoint using the same AWS account or different accounts: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Same account - Choose the list, and find the category Amazon VPC Endpoints. Then choose the DNS name of the interface endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Different accounts - Enter the value that you got in step 1 of this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Routing Policy 
&lt;/div&gt; 
&lt;div&gt;
  Choose the applicable routing policy. For more information, see Choosing a routing policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Evaluate Target Health 
&lt;/div&gt; 
&lt;div&gt;
  Accept the default value of No. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC7" name="Do not put sensitive data into VPC free-form fields" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with Amazon VPC or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into Amazon VPC or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon Virtual Private Cloud" url="https://docs.aws.amazon.com/vpc/latest/userguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.466">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC9" name="Enable VPC Traffic Mirroring" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable VPC Traffic Mirroring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an elastic network interface of Amazon EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Content inspection 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Threat monitoring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Troubleshooting 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The security and monitoring appliances can be deployed as individual instances, or as a fleet of instances behind a Network Load Balancer with a UDP listener. Traffic Mirroring supports filters and packet truncation, so that you only extract the traffic of interest to monitor by using monitoring tools of your choice. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your traffic mirror resources using any of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your traffic mirror resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC. The AWS CLI is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs. The AWS SDKs take care of many of the connection details, such as calculating signatures, handling request retries, and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as generating the hash to sign the request and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Traffic Mirroring?" url="https://docs.aws.amazon.com/vpc/latest/mirroring/what-is-traffic-mirroring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can review your traffic mirror targets, filters and sessions from Amazon VPC console:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Region selector, choose the AWS Region that you used when you created the VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the navigation pane, choose Traffic Mirroring, Mirror Targets/Mirror Filters/Mirror Sessions. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Getting started with Traffic Mirroring" url="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.464">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.466">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.466">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC6" name="Use Network ACLs for VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Network ACLs for VPC as an additional layer of security 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it's associated with. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the parts of a network ACL rule: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it's applied regardless of any higher-numbered rule that might contradict it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Protocol. You can specify any protocol that has a standard protocol number. For more information, see Protocol Numbers. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Source. [Inbound rules only] The source of the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Destination. [Outbound rules only] The destination for the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Allow/Deny. Whether to allow or deny the specified traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Review your Network ACLs using the console:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Network ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select a Network ACL to see details. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC4" name="Use VPC endpoint policies" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use VPC endpoint policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When you create an endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. Endpoint policies must be written in JSON format. Not all services support endpoint policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service. If a service does not support endpoint policies, the endpoint allows full access to the service. An endpoint policy does not override or replace IAM user policies or service-specific policies (such as S3 bucket policies). It is a separate policy for controlling access from the endpoint to the specified service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You cannot attach more than one policy to an endpoint. However, you can modify the policy at any time. If you do modify a policy, it can take a few minutes for the changes to take effect. For more information about writing policies, see Overview of IAM Policies in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your endpoint policy can be like any IAM policy; however, take note of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Only the parts of the policy that relate to the specified service will work. You cannot use an endpoint policy to allow resources in your VPC to perform other actions; for example, if you add EC2 actions to an endpoint policy for an endpoint to Amazon S3, they will have no effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your policy must contain a Principal element. For additional information related gateway endpoints, see Endpoint policies for gateway endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The size of an endpoint policy cannot exceed 20,480 characters (including white space). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling access to services with VPC endpoints" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.465">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                    <countermeasure ref="AWS-VPC1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                <countermeasure ref="AWS-VPC1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC8" mitigation="33"/>
                    <countermeasure ref="AWS-VPC9" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC8" mitigation="33"/>
                <countermeasure ref="AWS-VPC9" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC4" mitigation="17"/>
                    <countermeasure ref="AWS-VPC5" mitigation="17"/>
                    <countermeasure ref="AWS-VPC6" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC3" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC3" mitigation="17"/>
                <countermeasure ref="AWS-VPC4" mitigation="17"/>
                <countermeasure ref="AWS-VPC5" mitigation="17"/>
                <countermeasure ref="AWS-VPC6" mitigation="17"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ad201052-365d-4f92-8595-21839523737d" diagramComponentId="fcddc92a-f432-4cf5-b288-4b3ffcb25f77" ref="848a1653-2ab9-4044-8b45-d217f3a55f16" name="AWS ELB (Elastic Load Balancer)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="aa214693-6a81-415a-b4fc-0768870a3f9b" componentDefinitionRef="load-balancer">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.897">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.899">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="unknown-resource-status" name="Unknown resource status" state="0" impact="100" issueId="" issueLink="">
          <desc>We do not have our resources current status and as a result lose control of some resources,
                        for example, we may believe these resources are inactive when in fact the status has changed and we are unaware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.899">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-1.12" name="Add SSL/TLS Certificate to App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. 
&lt;br&gt; 
&lt;br&gt; The SSL\TLS protocol uses an X.509 certificate (SSL\TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 
&lt;br&gt; 
&lt;br&gt; You can create a certificate using a Third Party Certificate Authority, AWS Certificate Manager or a self signed certificate like OpenSSL. 
&lt;br&gt; 
&lt;br&gt; Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;br&gt; 
&lt;br&gt; All the application traffic between the Web Tier instances and the App Tier ELB nodes should be encrypted using an SSL\TLS certificate. 
&lt;br&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br&gt; 
&lt;br&gt; Using the Amazon unified command line interface: 
&lt;ul&gt; 
 &lt;li&gt;Adding a HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): &lt;br&gt; 
  &lt;blockquote&gt;
    aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note that if the ListenerDescriptions is empty, the ELB does not have a listener configured with a SSL\TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.9" name="Add SSL/TLS Certificate to Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note that if the ListenerDescriptions element is empty, the ELB does not have a listener configured with a SSL/TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null ||&amp;nbsp; Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.13" name="Allow connectivity to the VPC Internet Gateway (IGW) and associate the Routing Table with Web tier ELB subnet (by default route (0.0.0.0/0))" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A route table contains a set of rules, called routes, that are used to determine where network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have an IGW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has an IGW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnet-id,Values=&amp;lt;web_tier_elb_subnet1&amp;gt;,&amp;lt;web_tier_elb_subnet2&amp;gt; --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.15" name="Associate App Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --scheme internal --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;app_tier_subnet1&amp;gt; &amp;lt;app_tier_subnet2&amp;gt; --security-groups &amp;lt;app_tier_elb_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.1" name="Associate each Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;elb_name&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;application_subnet&amp;gt; --security-groups &amp;lt;application_security_groups&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;elb_name&amp;gt; --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.14" name="Associate Web Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;web_tier_elb_subnet1&amp;gt; &amp;lt;web_tier_elb_subnet2&amp;gt; --security-groups &amp;lt;web_tier_elb_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-ELB1" name="Configure ALB to redirect all HTTP requests to HTTPS" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Before you start to use your Application Load Balancer, you must add one or more listeners. A listener is a process that uses the configured protocol and port to check for connection requests. Listeners support both the HTTP and HTTPS protocols. You can use an HTTPS listener to offload the work of encryption and decryption to your load balancer. To enforce encryption in transit, you should use redirect actions with Application Load Balancers to redirect client HTTP requests to an HTTPS request on port 443.&lt;/p&gt;&lt;p&gt;If you use Application Load Balancers with an HTTP listener, ensure that the listener is redirected to HTTPS for any nonconsole administrative access. Allowing unencrypted authentication over HTTP for administrators of the cardholder data environment might violate the requirement to encrypt all nonconsole administrative access using strong cryptography.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, you redirect HTTP request to HTTPS.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To redirect HTTP requests to HTTPS on an Application Load Balancer&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;In the navigation pane, under &lt;strong&gt;Load Balancing&lt;/strong&gt;, choose &lt;strong&gt;Load balancers&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose an Application Load Balancer.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Listeners&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select the check box for an HTTP listener (port 80 TCP) and then choose &lt;strong&gt;Edit&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;If there is an existing rule, you must delete it. Otherwise, choose &lt;strong&gt;Add action&lt;/strong&gt; and then choose &lt;strong&gt;Redirect to...&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;HTTPS&lt;/strong&gt; and then enter &lt;strong&gt;443&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose the check mark in a circle symbol and then choose &lt;strong&gt;Update&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.741">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.10" name="Configure Health Check for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of the instances that are healthy at the time of the health check is InService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of any instances that are unhealthy at the time of the health check is OutOfService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;", 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify App tier ELB to include appropriate health check:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB healthchecks" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-healthchecks.html"/>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify if health check is in place on the App tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.9" name="Configure Health Check for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon ELB will periodically sends pings, attempt connections, or sends requests to test the EC2 instances, these tests are called health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of the instances that are healthy at the time of the health check is InService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of any instances that are unhealthy at the time of the health check is OutOfService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Ensure availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;", 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify Web tier ELB to include appropriate health check:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify if health check is in place on the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.13" name="Configure the latest SSL Security Policies for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div style=""&gt; 
 &lt;ul&gt; 
  &lt;li&gt;(Note that you should replace &amp;lt;app\_tier\_elb&amp;gt; with your App-tier ELB name, and &amp;lt;latest\_ssl\_policy&amp;gt; with the proper policy name)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.10" name="Configure the latest SSL Security Policies for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   (Note that you should replace &amp;lt;web\_tier\_elb&amp;gt; with your Web-tier ELB name, and _&amp;lt;latest\_ssl\_policy&amp;gt;_ with the proper policy name) 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;div style=""&gt;
    aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.743">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.5" name="Create subnets for the Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add
                        one or more subnets in each Availability Zone. Each subnet must reside entirely within one
                        Availability Zone and cannot span zones. Availability Zones are distinct locations that are
                        engineered to be isolated from failures in other Availability Zones. By launching instances in
                        separate Availability Zones, you can protect your applications from the failure of a single
                        location. AWS assigns a unique ID to each subnet.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet
                        shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The
                        allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet
                        in a VPC, the CIDR blocks of the subnets must not overlap.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some AWS regions have more than 2 availability zones and it is recommended to use more than 2
                        where possible.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At least 2 subnets in 2 different availability zones (AZ) should be created in order to have
                        fault tolerance and high availability from the perspective of resource deployment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create subnets for Web tier ELB, and note the subnet id:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-subnet --vpc-id application_vpc
                        --cidr-block desired_cidr
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tag the above subnets with the Web tier ELB tags:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-tags --resources web_tier_elb_subnet1
                        web_tier_elb_subnet2 --tags Key=public_tier_tag,Value=public_tier_tag_value
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  OR 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets created for the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:public_tier_tag,Values=public_tier_tag_value --query &amp;quot;Subnets[*].SubnetId&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.26" name="Create the App tier ELB as Internal" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  When an internal load balancer is created, it receives a public DNS name with the following form: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   internal-name-123456789.region.elb.amazonaws.com 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new internal ELB for your App tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name app_tier_elb --scheme internal --listeners listener_config --subnets app_tier_subnet1 app_tier_subnet2 --security-groups app_tier_elb_security_group 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Register App tier instances with the new App tier ELB:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb register-instances-with-load-balancer --load-balancer-name app_tier_elb --instances &amp;lt;app_tier_instance1&amp;gt; &amp;lt;app_tier_instance2&amp;gt; &amp;lt;app_tier_instance3&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB internal load balancers" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-internal-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: register instances with load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/register-instances-with-load-balancer.html"/>
          </references>
          <standards>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Scheme of your App tier ELB, and make sure it is &amp;quot;internal&amp;quot;:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, Scheme:Scheme}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.21" name="Create the App tier ELB Security Group to only accept HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The SG associated with the App tier ELB should allow connectivity from the security group
                        associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on
                        the application design.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the security group associated with the App tier
                        ELB:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_elb_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_elb_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;create locally the below json file containing ingress rules for HTTP (TCP 80) and
                        HTTPS (TCP 443) ports only from and name it IpPermissions.json:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; },
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;lt;/span&amp;gt;&amp;gt;&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add to the security group associated with the App tier ELB the above ingress rules:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_elb_security_group&amp;nbsp;
                        --ip-permissions file:///PathTo/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the App tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, AppTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table&amp;nbsp; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the &amp;quot;AppTierELBSecurityGroups&amp;quot; from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from Web tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;app_tier_elb_security_group&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.22" name="Create the App tier Security Group to allow inbound connections from App tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is required for both the configured port and protocol for the listener on the back-end
                        instance and the port and protocol used for the health check.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This protects the App-server tier from unauthorized access, it is recommended to add inbound
                        security group rules that allow traffic for the specific application protocol and ports by
                        referencing as source the security group associated with the App tier ELB.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the App tier security group (use the &amp;quot;AppTierSecurityGroup&amp;quot;
                        element from Audit procedure):&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the
                        App tier ELB security group as the source of the connections:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_security_group
                        --protocol tcp --port specific_port
                        --source-group app_tier_elb_security_group
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List the ingress rules for the above security group, and make sure that allows
                            connections only from App tier ELB security group on specific ports:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws ec2 describe-security-groups --filters Name=tag:app_tier_tag,Values=app_tier_tag_value
                            --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions,
                            AppTierSecurityGroup:GroupId}&amp;quot; --output table
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.19" name="Create the Web tier Security Group to allow inbound connections from Web tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the Web tier security group (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;web_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the Web tier ELB security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;web_tier_elb_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the Web tier security group, and make sure that allows connections only from Web tier ELB security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-9" name="Deploy AWS WAF policies to protect the ALB" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;For additional layers of defense, you can deploy AWS WAF policies to protect the Application Load Balancer. Having edge policies, application policies, and even private or internal policy enforcement layers adds to the visibility of communication requests and provides unified policy enforcement. For more information, see the blog post Deploying defense in depth using AWS Managed Rules for AWS WAF.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="Deploying defense in depth using AWS Managed Rules for AWS WAF" url="https://aws.amazon.com/blogs/security/deploying-defense-in-depth-using-aws-managed-rules-for-aws-waf-part-2/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that AWS WAF is blocking potentially dangerous requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.743">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.18" name="Do not use Web tier ELB Security Group in the Auto Scaling launch configuration of any other tier (Web, App)" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The web-tier ELB is the only one that is public facing and should have rules to allow inbound traffic to the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Associating the web-tier ELB security group to any other instances that shouldn't be publicly accessible exposes them to unauthorized access. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration using the correct security groups for Web and/or App tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling create-launch-configuration --launch-configuration-name &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt;/&amp;lt;app_tier_security_group --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;/&amp;lt;app_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
          </references>
          <standards>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, WebTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the &amp;quot;WebTierELBSecurityGroups&amp;quot; from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security groups associated with all Autoscaling launch configurations and make sure that the above Web tier ELB security group is not present:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --query &amp;quot;LaunchConfigurations[*].{SecurityGroups:SecurityGroups, LaunchConfigurationName:LaunchConfigurationName}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.2" name="Enable the ELB logging" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  AWS Elastic Load Balancers (ELBs) can record all incoming requests sent to the load balancer and store within logs on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;quot;AccessLog&amp;quot;: { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;Enabled&amp;quot;: true, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketName&amp;quot;: &amp;quot;string&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;EmitInterval&amp;quot;: integer, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketPrefix&amp;quot;: &amp;quot;string&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update the Load Balancer attributes:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb modify-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; --load-balancer-attributes file:///tmp/ElbLogs.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-attributes.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: elb describe tags" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-tags.html"/>
            <reference name="Amazon docs: enable access logs" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html"/>
            <reference name="Amazon docs: modify load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/modify-load-balancer-attributes.html"/>
          </references>
          <standards>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Via Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all ELB's:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Confirm correct ELB is selected by review ELB tags:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-tags --load-balancer-names &amp;lt;elb_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Review selected ELB attributes and ensure Access Log is enabled:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.15" name="Implement mechanism to check that Public Web Tier SSL\TLS certificates are &gt;30 days from expiration" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;Public SSL\TLS certificates that are used for AWS resources such as the ELB or CloudFront should always be renewed prior to expiration both as a security best practice and to ensure the reputation of the web application is not impacted by an expired certificate. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Request a certificate renewal from your CA, and upload the new certificate in IAM:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam upload-server-certificate --server-certificate-name &amp;lt;ssl_certificate_name&amp;gt; --certificate-body file://public_key_cert_file.pem --private-key file://my_private_key.pem --certificate-chain file://my_certificate_chain_file.pem 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For Amazon Certificate Manager users the renewal is managed by ACM service&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe certificate" url="https://docs.aws.amazon.com/cli/latest/reference/acm/describe-certificate.html"/>
            <reference name="Id credentials server certs" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html"/>
            <reference name="Id credentials server certs manage" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html"/>
            <reference name="List certificates" url="https://docs.aws.amazon.com/cli/latest/reference/acm/list-certificates.html"/>
            <reference name="List server certificates" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-server-certificates.html"/>
            <reference name="Upload server certs" url="https://docs.aws.amazon.com/cli/latest/reference/iam/upload-server-certificate.html"/>
          </references>
          <standards>
            <standard ref="1.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all SSL\TLS certificates stored in IAM and check the Expiration field&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-server-certificates 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For Amazon Certificate Manager users: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List ACM certificates and note the CertificateArnvalue of the certificates used by the app:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws acm list-certificates 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Get the details of the desired certificate and check the ExpirationDatevalue (the certificate expiration time as an Epoch timestamp):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws acm describe-certificate --certificate-arn &amp;lt;ssl_certificate_arn&amp;gt; --query "Certificate.{ExpirationDate:NotAfter, Status:Status, SubjectAlternativeNames:SubjectAlternativeNames, DomainName:DomainName}"&amp;nbsp; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-02" name="Select the Server Order Preference option" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
                        establishing a new connection supporting the Server Order Preference option. When this option is
                        selected, the load balancer selects the first cipher in its list that is in the client's list of
                        ciphers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;To enable Server Order Preference:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;For SSL Options, select Server Order Preference.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Click Save. &lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;For SSL Options, check that the option Server Order Preference is selected. &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.743">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.13" name="Set a HTTPS connection from all CloudFront Distributions to the Web Tier ELB origin" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Configure the Origin Protocol Policy for the Web tier ELB origin either to require that CloudFront fetches objects from your origin by using HTTPS or to require that CloudFront uses the protocol that the viewer used to request the objects. For example, if you choose Match Viewer for the Origin Protocol Policy and the viewer uses HTTPS to request an object from CloudFront, CloudFront also uses HTTPS to forward the request to your origin. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  In order to use HTTPS, an SSL\TLS certificate must be attached. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To ensure that objects are encrypted from edge locations to the Web-Tier ELB origin according to the data classification policy, use Match Viewer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For configuring "OriginProtocolPolicy"first save locally the current distribution config:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id application_cfn_distribution_id&amp;nbsp; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   Edit and replace "OriginProtocolPolicy"element in /tmp/cf-distribution.json with the below section: 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   "OriginProtocolPolicy": "https-only", 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Retrieve the current ETag of your CloudFront distribution:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt;&amp;nbsp; --query "ETag" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check the &amp;quot;OriginProtocolPolicy&amp;quot; used by application Cloudfront
                            distributions (it should be set as https-only):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws cloudfront list-distributions --query &amp;quot;DistributionList.Items[*].{Id:Id,
                            OriginProtocolPolicy:Origins.Items[*].CustomOriginConfig.OriginProtocolPolicy}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.17" name="Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First remove all the ingress rules for the security group associated with the Web tier ELB:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 describe-security-groups --group-id &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=""&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 revoke-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt; --ip-permissions file:///tmp/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; }, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     ] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Add to the security group associated with the Web tier ELB the above ingress rules:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 authorize-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt;&amp;nbsp; --ip-permissions file:///PathTo/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;your_web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, SecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the security group id from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from any source IP (0.0.0.0/0)any source IP (0.0.0.0/0):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.745">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.14" name="Use HTTPS listener for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the App Tier ELB is encrypted over the SSL\TLS channel. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the App Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.11" name="Use HTTPS listener for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the Web Tier ELB is encrypted over the SSL\TLS channel. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;div&gt;
    Using the Amazon unified command line interface: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt; 
    &lt;div&gt;
      aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the Web Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol = 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-01" name="Use the Perfect Forward Secrecy feature" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
                        Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
                        through the use of a unique random session key, and therefore prevents the decoding of captured
                        data, even if the secret long-term key is compromised.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;To begin using Perfect Forward Secrecy: &lt;br /&gt;&lt;/b&gt;Configure your load
                        balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that your load balancer is configured with the newly added Elliptic Curve
                            Cryptography (ECDHE) cipher suites.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:31.743">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                    <countermeasure ref="aws-tier-3.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                <countermeasure ref="aws-tier-3.13" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.13" mitigation="9"/>
                    <countermeasure ref="aws-tier-6.17" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.19" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.21" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.22" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="C-AWS-ELB1" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.1" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.14" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.15" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.18" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.26" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.5" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-9" mitigation="7"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-ELB1" mitigation="7"/>
                <countermeasure ref="C-AWS-SRA-9" mitigation="7"/>
                <countermeasure ref="aws-tier-3.1" mitigation="7"/>
                <countermeasure ref="aws-tier-3.14" mitigation="7"/>
                <countermeasure ref="aws-tier-3.15" mitigation="7"/>
                <countermeasure ref="aws-tier-5.1" mitigation="7"/>
                <countermeasure ref="aws-tier-6.13" mitigation="9"/>
                <countermeasure ref="aws-tier-6.17" mitigation="7"/>
                <countermeasure ref="aws-tier-6.18" mitigation="7"/>
                <countermeasure ref="aws-tier-6.19" mitigation="7"/>
                <countermeasure ref="aws-tier-6.21" mitigation="7"/>
                <countermeasure ref="aws-tier-6.22" mitigation="7"/>
                <countermeasure ref="aws-tier-6.26" mitigation="7"/>
                <countermeasure ref="aws-tier-6.5" mitigation="7"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.2" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="unknown-resource-status">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                    <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                <countermeasure ref="aws-tier-5.2" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="b78d7bcf-a0e3-40d0-aed0-371958548d77" diagramComponentId="713d9b8c-0780-4c2c-b757-c8a4fe1b3bbf" ref="e226dbfd-0f58-4b9d-b11e-a943e76afe19" name="On-Prem Application Viewer" desc="On-Prem Application Viewer" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.160">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.410">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.930">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.159">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.159">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.159">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.159">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.035">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.035">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.034">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.034">
              <output/>
            </source>
            <references>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:33.890">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.035">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="25" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.305">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.035">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="cdalrymple" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:34.035">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="01c1f355-d10e-4cc9-bc17-304a5236fc10" diagramComponentId="cbceff96-e15c-41da-a5a9-777ec2129c38" ref="08e7108d-8ece-40e5-a958-b2093f161f3f" name="AWS QuickSight" desc="" library="Hydras-AWS-Foundation" parentComponentRef="de92f94e-3964-44e0-8ea4-36eaf9e04810" componentDefinitionRef="CD-QUICKSIGHT">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.210">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-QUICKSIGHT1" name="Upgrade AWS QuickSight subscription from Standard to Enterprise Edition" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Upgrade AWS QuickSight subscription from Standard to Enterprise Edition&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can upgrade from Amazon QuickSight Standard edition to Amazon QuickSight Enterprise edition. In Enterprise edition, Amazon QuickSight supports the following additional security features:&lt;br&gt; - Row-level security.&lt;br&gt; - Private virtual private cloud (VPC) support based on Amazon VPC.&lt;br&gt; - Folders for organization and sharing.&lt;br&gt; - Fine-grained access control over Amazon S3, Amazon Athena, and other AWS services and resources.&lt;br&gt; - AWS Lake Formation support.&lt;br&gt; In addition, in Enterprise edition, data at rest in SPICE is encrypted using block-level encryption with AWS-managed keys. In Standard edition, data at rest in SPICE is securely stored, but not encrypted.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Use the following procedure to upgrade to Enterprise edition. To perform the upgrade, you need administrative access to Amazon QuickSight, with security permissions to subscribe. The person performing the upgrade is usually an AWS administrator who is also an Amazon QuickSight administrator.&lt;/p&gt; 
&lt;p&gt;To upgrade to Enterprise edition&lt;/p&gt; 
&lt;p&gt;1. Open the administrative settings page by clicking on your profile icon at top right.&lt;/p&gt; 
&lt;p&gt;2. At top left, choose Upgrade now.&lt;/p&gt; 
&lt;p&gt;Upgrade to Enterprise Edition screen appears.&lt;/p&gt; 
&lt;p&gt;3. Be sure that you want to upgrade.&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; You can't undo this action.&lt;/p&gt; 
&lt;p&gt;Choose Upgrade to upgrade. The upgrade is instantaneous.&lt;/p&gt; 
&lt;p&gt;Billing for the upgrade to your subscription is prorated for the month of upgrade. Upgrades to Amazon QuickSight users are also prorated.&lt;/p&gt; 
&lt;p&gt;4. (Optional) Downgrade users to readers:&lt;/p&gt; 
&lt;p&gt;- Before you start, make sure to transfer any assets your users own that you want to keep.&lt;/p&gt; 
&lt;p&gt;- Delete the users and add them back to your subscription as readers.&lt;/p&gt; 
&lt;p&gt;If you're using Active Directory, delete the authors, move them to the new reader group, then recreate them as readers in Amazon QuickSight.&lt;/p&gt; 
&lt;p&gt;When you upgrade to Enterprise edition, your admin and author users retain their roles.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Downgrading from Enterprise edition to Standard edition isn't currently possible.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encryption at Rest" url="https://docs.aws.amazon.com/quicksight/latest/user/data-encryption-at-rest.html"/>
            <reference name="Upgrading Your Amazon QuickSight Subscription from Standard Edition to Enterprise Edition" url="https://docs.aws.amazon.com/quicksight/latest/user/upgrading-subscription.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have upgraded AWS QuickSight subscription from Standard to Enterprise Edition.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-QUICKSIGHT1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-QUICKSIGHT1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="7b0aa91c-5184-4c1f-a52f-18e856d58718" diagramComponentId="f1f4ed4a-01e6-4e3d-b227-f06ababee9d9" ref="bc2ca3bc-2df2-487e-8f75-d29acd857f31" name="AWS EC2 (Elastic Compute Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="ec2">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.253">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.253">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.102">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" name="Ensure that the EC2 instances are managed by the systems manager" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances. Additional configuration is needed in Systems Manager for patch deployment to managed EC2 instances.&lt;/p&gt;&lt;p&gt;If you use EC2 instances managed by Systems Manager to collect inventory for your cardholder data environment (CDE), make sure that the instances are managed by Systems Manager. Using Systems Manager can help to maintain an inventory of system components that are in scope for PCI DSS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For systems that are in scope for PCI DSS, before you install vendor patches in a production environment, you should test and validate them. After you deploy patches, validate security settings and controls to ensure that deployed patches have not affected the security of the CDE. If you use EC2 instances managed by Systems Manager to patch managed instances in your CDE, ensure that the instances are managed by Systems Manager. Systems Manager deploys system patches, which helps to protect system components and software from known vulnerabilities.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You can use the Systems Manager quick setup to set up Systems Manager to manage your EC2 instances.&lt;/p&gt;&lt;p&gt;To determine whether your instances can support Systems Manager associations, see Systems Manager prerequisites in the &lt;i&gt;AWS Systems Manager User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To ensure EC2 instances are managed by Systems Manager&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the AWS Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Quick setup&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the configuration screen, keep the default options.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Set up Systems Manager&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.099">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0 and ::/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be edited or removed.&lt;/li&gt;
                        &lt;li&gt;Either A) update the Source field to a range other than 0.0.0.0/0 or ::/0, or, B) Click Delete to remove the offending inbound rule.&lt;/li&gt;
                        &lt;li&gt;Click Save rules.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="5.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="5.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.098">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-1" name="VPC default security group should prohibit inbound and outbound traffic" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If a service that is in scope for PCI DSS is associated with the default security group, the default rules for the security group will allow all outbound traffic. The rules also allow all inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.&lt;/p&gt;&lt;p&gt;You should change the default security group rules setting to restrict inbound and outbound traffic. Using the default might violate the requirement to allow only necessary traffic to and from the CDE.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, create new security groups and assign those security groups to your resources. To prevent the default security groups from being used, remove their inbound and outbound rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To create new security groups and assign them to your resources&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;. View the default security groups details to see the resources that are assigned to them.&lt;/li&gt;&lt;li&gt;Create a set of least-privilege security groups for the resources. For details on how to create security groups, see Creating a security group in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;On the Amazon EC2 console, change the security group for the resources that use the default security groups to the least-privilege security group you created. See Changing an instance's security groups in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After you assign the new security groups to the resources, remove the inbound and outbound rules from the default security groups. This ensures that the default security groups are not used.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To remove the rules from the default security group&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select a default security group, and choose the &lt;strong&gt;Inbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit inbound rules&lt;/strong&gt;. Then delete all of the inbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;li&gt;Select a default security group and choose the &lt;strong&gt;Outbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit outbound rules&lt;/strong&gt;. Then delete all of the outbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.097">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                <countermeasure ref="aws-tier-6.9" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="e67e8e38-6295-45be-832c-13e95c739b58" diagramComponentId="74e94912-108e-4da7-b30f-73bc787345b8" ref="be139abf-6efb-47f2-90b0-2bfc0929899f" name="AWS RDS (Relational Database Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="rds">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>Everyone can access the RDS database and obtain the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.935">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
                        attacker gains access to our systems and/or security systems
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
                        to them and exfiltrate the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no data backup retention policies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.934">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.936">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.935">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.779">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
  Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
  &lt;li&gt;Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --vpc-security-group-ids &amp;lt;data_tier_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are configured to use the Data Tier
                            Security Group:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.781">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.30" name="Do not allow the RDS database to be publically accessible" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt;Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each publicly accessible DB instance, and make it private:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --no-publicly-accessible 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="6.30" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are publicly available:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.&lt;/p&gt; 
&lt;p&gt;There are 6 database engines available for customers to run their database workloads on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
 &lt;li&gt;MySQL&lt;/li&gt; 
 &lt;li&gt;MariaDB&lt;/li&gt; 
 &lt;li&gt;Oracle&lt;/li&gt; 
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt; 
&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --auto-minor-version-upgrade&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="2.3.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have Auto Minor Version Upgrade enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.779">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should be enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Perform a snapshot of the DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds create-db-snapshot --db-snapshot-identifier db_snapshot --db-instance-identifier your_db_instance 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Confirm created snapshot is available (once snapshot process has completed):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all KMS Customer Managed Keys:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws kms list-aliases 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt;
   aws rds copy-db-snapshot --source-db-snapshot-identifier db_snapshot&amp;nbsp; --target-db-snapshot-identifier encrypted_db_snapshot --kms-key-id data_tier_kms_key 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Restore a snapshot to the target DB instance(from previous step) with the same values as original db instance with additional encrypted storage values:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds restore-db-instance-from-db-snapshot --db-instance-identifier your_db_instance --db-snapshot-identifier encrypted_db_snapshot 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: copy db snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
            <reference name="Amazon docs: copy snapshot" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
            <reference name="Amazon docs: create db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
            <reference name="Amazon docs: create db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
            <reference name="Amazon docs: encryption" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all current RDS instances and review the encryption status of the DB
                            instance:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,
                            EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}'
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.779">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
                        for hosting customer created databases which can allow for a reduction in operational burden on
                        customers.&lt;/p&gt;
                        &lt;p&gt;RDS event subscriptions provide notification of selected event changes at a DB security
                        group level.&lt;/p&gt;
                        &lt;p&gt;Event subscriptions are designed to provide incident notification of events which may
                        affect the network availability of the RDS instance.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
                        &lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new event subscription for DB Security Group events:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;aws rds create-event-subscription --subscription-name rds_event_subscription
                        --sns-topic-arn
                        sns_topic_arn
                        --source-type db-security-group --event-categories rds_events
                        --source-ids events_source_ids --enabled&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-security-group&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  RDS event subscriptions provide notification of selected event changes at DataBase engine level such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Deletion&lt;/li&gt; 
  &lt;li&gt;Failure&lt;/li&gt; 
  &lt;li&gt;Failover&lt;/li&gt; 
  &lt;li&gt;Low Storage&lt;/li&gt; 
  &lt;li&gt;Maintenance&lt;/li&gt; 
 &lt;/ul&gt; 
  Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new event subscription for DB instance level events:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds create-event-subscription --subscription-name &amp;lt;rds_event_subscription&amp;gt; --sns-topic-arn sns_topic_arn --source-type &amp;lt;db-instance&amp;gt; --event-categories &amp;lt;rds_events&amp;gt; --source-ids &amp;lt;events_source_ids&amp;gt; --enabled 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create event subscription" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
            <reference name="Amazon docs: describe event subcriptions" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
            <reference name="Amazon docs: user event messages" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
          </references>
          <standards>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-instance&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each no-multi-az DB instance, and make it Multi-AZ enabled:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --multi-az 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are Multi-AZ enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{MultiAZ:MultiAZ,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.779">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.8" name="Set Backup retention policy on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Possible values are from 0 to 35 days. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each DB instance with a Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --backup-retention-period &amp;lt;backup_retention_period&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have a Backup Retention Period set (0 =
                            there is no backup retention in place, 7 = there are 7 daily backups retained):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.779">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in &amp;quot;References&amp;quot; section.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:35.778">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="database-publically-accesible">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="no-access-control-onrds">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.34" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                <countermeasure ref="aws-tier-6.34" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="no-notification-incident">
                  <countermeasures>
                    <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                    <countermeasure ref="aws-tier-4.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                <countermeasure ref="aws-tier-4.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="NOT_BACKUP_POLICIES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                <countermeasure ref="aws-tier-1.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="95ecb37d-1c7a-4202-b391-3444f2b2b0fa" diagramComponentId="e01ddc60-4816-4a1b-8ece-c205a283df6d" ref="1afe11f5-8935-4cfe-ab67-3fde6fcc34b5" name="AWS RDS (Relational Database Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="rds">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>Everyone can access the RDS database and obtain the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
                        attacker gains access to our systems and/or security systems
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
                        to them and exfiltrate the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no data backup retention policies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.411">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
  Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
  &lt;li&gt;Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --vpc-security-group-ids &amp;lt;data_tier_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are configured to use the Data Tier
                            Security Group:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.312">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.30" name="Do not allow the RDS database to be publically accessible" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt;Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each publicly accessible DB instance, and make it private:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --no-publicly-accessible 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="6.30" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are publicly available:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.312">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.&lt;/p&gt; 
&lt;p&gt;There are 6 database engines available for customers to run their database workloads on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
 &lt;li&gt;MySQL&lt;/li&gt; 
 &lt;li&gt;MariaDB&lt;/li&gt; 
 &lt;li&gt;Oracle&lt;/li&gt; 
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt; 
&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --auto-minor-version-upgrade&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="2.3.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have Auto Minor Version Upgrade enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should be enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Perform a snapshot of the DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds create-db-snapshot --db-snapshot-identifier db_snapshot --db-instance-identifier your_db_instance 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Confirm created snapshot is available (once snapshot process has completed):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all KMS Customer Managed Keys:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws kms list-aliases 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt;
   aws rds copy-db-snapshot --source-db-snapshot-identifier db_snapshot&amp;nbsp; --target-db-snapshot-identifier encrypted_db_snapshot --kms-key-id data_tier_kms_key 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Restore a snapshot to the target DB instance(from previous step) with the same values as original db instance with additional encrypted storage values:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds restore-db-instance-from-db-snapshot --db-instance-identifier your_db_instance --db-snapshot-identifier encrypted_db_snapshot 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: copy db snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
            <reference name="Amazon docs: copy snapshot" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
            <reference name="Amazon docs: create db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
            <reference name="Amazon docs: create db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
            <reference name="Amazon docs: encryption" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all current RDS instances and review the encryption status of the DB
                            instance:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,
                            EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}'
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
                        for hosting customer created databases which can allow for a reduction in operational burden on
                        customers.&lt;/p&gt;
                        &lt;p&gt;RDS event subscriptions provide notification of selected event changes at a DB security
                        group level.&lt;/p&gt;
                        &lt;p&gt;Event subscriptions are designed to provide incident notification of events which may
                        affect the network availability of the RDS instance.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
                        &lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new event subscription for DB Security Group events:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;aws rds create-event-subscription --subscription-name rds_event_subscription
                        --sns-topic-arn
                        sns_topic_arn
                        --source-type db-security-group --event-categories rds_events
                        --source-ids events_source_ids --enabled&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-security-group&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.312">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  RDS event subscriptions provide notification of selected event changes at DataBase engine level such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Deletion&lt;/li&gt; 
  &lt;li&gt;Failure&lt;/li&gt; 
  &lt;li&gt;Failover&lt;/li&gt; 
  &lt;li&gt;Low Storage&lt;/li&gt; 
  &lt;li&gt;Maintenance&lt;/li&gt; 
 &lt;/ul&gt; 
  Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new event subscription for DB instance level events:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds create-event-subscription --subscription-name &amp;lt;rds_event_subscription&amp;gt; --sns-topic-arn sns_topic_arn --source-type &amp;lt;db-instance&amp;gt; --event-categories &amp;lt;rds_events&amp;gt; --source-ids &amp;lt;events_source_ids&amp;gt; --enabled 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create event subscription" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
            <reference name="Amazon docs: describe event subcriptions" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
            <reference name="Amazon docs: user event messages" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
          </references>
          <standards>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-instance&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each no-multi-az DB instance, and make it Multi-AZ enabled:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --multi-az 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are Multi-AZ enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{MultiAZ:MultiAZ,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.8" name="Set Backup retention policy on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Possible values are from 0 to 35 days. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each DB instance with a Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --backup-retention-period &amp;lt;backup_retention_period&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have a Backup Retention Period set (0 =
                            there is no backup retention in place, 7 = there are 7 daily backups retained):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.311">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in &amp;quot;References&amp;quot; section.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:32.310">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="database-publically-accesible">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="no-access-control-onrds">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.34" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                <countermeasure ref="aws-tier-6.34" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="no-notification-incident">
                  <countermeasures>
                    <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                    <countermeasure ref="aws-tier-4.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                <countermeasure ref="aws-tier-4.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="NOT_BACKUP_POLICIES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                <countermeasure ref="aws-tier-1.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9dc3640f-1c44-4206-8bd6-57873a8ab9f6" diagramComponentId="9c31ad0f-0d7f-473f-88c0-dc219d622a1a" ref="099eebef-ac91-4a49-80a1-e9fdbeb4314d" name="AWS SageMaker" desc="" library="Hydras-AWS-Foundation" parentComponentRef="de92f94e-3964-44e0-8ea4-36eaf9e04810" componentDefinitionRef="CD-SAGEMAKER">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.788">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.788">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.786">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.788">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.787">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-SAGEMAKER5" name="Connect to AWS SageMaker using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to AWS SageMaker using an Interface VPC Endpoint&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can connect directly to the SageMaker API or to the SageMaker Runtime through an interface endpoint in your Virtual Private Cloud (VPC) instead of connecting over the internet. When you use a VPC interface endpoint, communication between your VPC and the SageMaker API or Runtime is conducted entirely and securely within the AWS network.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; You can create an interface endpoint to connect to SageMaker or to SageMaker Runtime with either the AWS console or AWS Command Line Interface (AWS CLI) commands.&lt;/p&gt; 
&lt;p&gt;The following are the general steps for setting up an interface endpoint via console:&lt;/p&gt; 
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt; 
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt; 
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC.&lt;/p&gt; 
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname.&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt; 
&lt;p&gt;Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt; 
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt; 
&lt;p&gt;6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Connect to SageMaker Through a VPC Interface Endpoint" url="https://docs.aws.amazon.com/sagemaker/latest/dg/interface-vpc-endpoint.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SAGEMAKER2" name="Control access to AWS SageMaker resources" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS SageMaker resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; By default, IAM users and roles don't have permission to create or modify SageMaker resources. They also can't perform tasks using the AWS Management Console, AWS CLI, or AWS API. An IAM administrator must create IAM policies that grant users and roles permission to perform specific API operations on the specified resources they need. The administrator must then attach those policies to the IAM users or groups that require those permissions. &lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Example - Require the Presence or Absence of Tags for API Calls&lt;/p&gt; 
&lt;p&gt;Require the presence or absence of specific tags or specific tag values by using RequestTag condition keys in an IAM policy. For example, if you want to require that every endpoint created by any member of an IAM group to be created with a tag with the key environment and value dev, create a policy as follows:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": "sagemaker:CreateEndpoint", "Resource": "arn:aws:sagemaker:&lt;strong&gt;:*:endpoint/&lt;/strong&gt;", "Condition": { "StringEquals": { "aws:RequestTag/environment": "dev" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon SageMaker Identity-Based Policy Examples" url="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SAGEMAKER1" name="Control root access to a SageMaker notebook instance" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control root access to a SageMaker notebook instance&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; By default, when you create a notebook instance, users that log into that notebook instance have root access. Because users with root access have administrator privileges, users can access and edit all files on a notebook instance with root access enabled.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To prevent users to have root access to a notebook instance, when you call CreateNotebookInstance or UpdateNotebookInstance operations, set the RootAccess field to Disabled. You can also disable root access for users when you create or update a notebook instance in the Amazon SageMaker console.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Data science is an iterative process that might require the data scientist to test and use different software tools and packages, so many notebook instance users need to have root access to be able to install these tools and packages.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Control root access to a SageMaker notebook instance" url="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-root-access.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Ensure that you have configured root access to a SageMaker notebook instance properly.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SAGEMAKER4" name="Create a CloudWatch alarms for AWS SageMaker" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a CloudWatch alarms for AWS SageMaker&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon CloudWatch Logs enables you to monitor, store, and access your log files from Amazon EC2 instances, AWS CloudTrail, and other sources. You can collect and track metrics, create customized dashboards, and set alarms that notify you or take actions when a specified metric reaches a threshold that you specify. CloudWatch Logs can monitor information in the log files and notify you when certain thresholds are met. You can also archive our log data in highly durable storage.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; General steps to create a CloudWatch alarm based on a static threshold&lt;/p&gt; 
&lt;p&gt;You choose a CloudWatch metric for the alarm to watch, and the threshold for that metric. The alarm goes to ALARM state when the metric breaches the threshold for a specified number of evaluation periods.&lt;/p&gt; 
&lt;p&gt;To create an alarm based on a single metric&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Alarms, All alarms.&lt;/p&gt; 
&lt;p&gt;3. Choose Create alarm.&lt;/p&gt; 
&lt;p&gt;4. Choose Select Metric.&lt;/p&gt; 
&lt;p&gt;5. (Optional) If you have enabled cross-account functionality in the CloudWatch console and the current account is a monitoring account, under Search Metrics choose a different AWS account that contains the metric that you want the alarm to watch.&lt;/p&gt; 
&lt;p&gt;6. Do one of the following:&lt;/p&gt; 
&lt;p&gt;- Choose the service namespace that contains the metric that you want. Continue choosing options as they appear to narrow the choices. When a list of metrics appears, select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;- In the search box, enter the name of a metric, dimension, or resource ID and press Enter. Then choose one of the results and continue until a list of metrics appears. Select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;7. Choose the Graphed metrics tab.&lt;/p&gt; 
&lt;p&gt;a. Under Statistic , choose one of the statistics or predefined percentiles, or specify a custom percentile (for example, p95.45).&lt;/p&gt; 
&lt;p&gt;b. Under Period, choose the evaluation period for the alarm. When evaluating the alarm, each period is aggregated into one data point.&lt;/p&gt; 
&lt;p&gt;You can also choose whether the y-axis legend appears on the left or right while you're creating the alarm. This preference is used only while you're creating the alarm.&lt;/p&gt; 
&lt;p&gt;c. Choose Select metric.&lt;/p&gt; 
&lt;p&gt;The Specify metric and conditions page appears, showing a graph and other information about the metric and statistic you have selected.&lt;/p&gt; 
&lt;p&gt;8. Under Conditions, specify the following:&lt;/p&gt; 
&lt;p&gt;a. For Whenever metric is, specify whether the metric must be greater than, less than, or equal to the threshold. Under than..., specify the threshold value.&lt;/p&gt; 
&lt;p&gt;b. Choose Additional configuration. For Datapoints to alarm, specify how many evaluation periods (data points) must be in the ALARM state to trigger the alarm. If the two values here match, you create an alarm that goes to ALARM state if that many consecutive periods are breaching.&lt;/p&gt; 
&lt;p&gt;To create an M out of N alarm, specify a lower number for the first value than you specify for the second value. For more information, see Evaluating an alarm.&lt;/p&gt; 
&lt;p&gt;c. For Missing data treatment, choose how to have the alarm behave when some data points are missing. For more information, see Configuring how CloudWatch alarms treat missing data.&lt;/p&gt; 
&lt;p&gt;d. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you choose ignore (maintain alarm state), the current alarm state is always maintained when the sample size is too low. For more information, see Percentile-based CloudWatch alarms and low data samples.&lt;/p&gt; 
&lt;p&gt;9. Choose Next.&lt;/p&gt; 
&lt;p&gt;10. Under Notification, select an SNS topic to notify when the alarm is in ALARM state, OK state, or INSUFFICIENT_DATA state.&lt;/p&gt; 
&lt;p&gt;To have the alarm send multiple notifications for the same alarm state or for different alarm states, choose Add notification.&lt;/p&gt; 
&lt;p&gt;To have the alarm not send notifications, choose Remove.&lt;/p&gt; 
&lt;p&gt;11. To have the alarm perform Auto Scaling, EC2, or Systems Manager actions, choose the appropriate button and choose the alarm state and action to perform. Alarms can perform Systems Manager actions only when they go into ALARM state. For more information about Systems Manager actions, see Configuring CloudWatch to create OpsItems from alarms and Incident creation.&lt;/p&gt; 
&lt;p&gt;12. When finished, choose Next.&lt;/p&gt; 
&lt;p&gt;13. Enter a name and description for the alarm. The name must contain only ASCII characters. Then choose Next.&lt;/p&gt; 
&lt;p&gt;14. Under Preview and create, confirm that the information and conditions are what you want, then choose Create alarm.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Logging and Monitoring" url="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-incident-response.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the CloudWatch console.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SAGEMAKER3" name="Encrypt AWS SageMaker data with customer managed keys (CMKs) for cross-account access" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypt AWS SageMaker data with customer managed keys (CMKs) for cross-account access &lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; To protect your Amazon SageMaker Studio notebooks and SageMaker notebook instances, along with your model-building data and model artifacts, SageMaker encrypts the notebooks, as well as output from Training and Batch Transform jobs. SageMaker encrypts these by default using the AWS Managed Key for Amazon S3.&lt;br&gt; This AWS Managed Key for Amazon S3 cannot be shared for cross-account access.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; For cross-account access, specify your customer managed key (CMK) while creating SageMaker resources so that it can be shared for cross-account access.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protect Data at Rest Using Encryption" url="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Ensure that your SageMaker notebook instance storage volumes are encrypted with Amazon KMS Customer Master Keys (CMKs) for cross-account access.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="cdalrymple" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="CM_Notes_01" value=""/>
            <customField ref="CountermeasureUUID" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-19T21:03:37.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SAGEMAKER1" mitigation="50"/>
                    <countermeasure ref="C-AWS-SAGEMAKER2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SAGEMAKER1" mitigation="50"/>
                <countermeasure ref="C-AWS-SAGEMAKER2" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SAGEMAKER3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SAGEMAKER3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP-A10-2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident. Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SAGEMAKER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SAGEMAKER4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="cdalrymple" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SAGEMAKER5" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SAGEMAKER5" mitigation="50"/>
                <countermeasure ref="aws-tier-5.1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="ThreatUUID" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
