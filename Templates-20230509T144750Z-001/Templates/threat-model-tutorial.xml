<?xml version="1.0" encoding="UTF-8"?>
<template ref="threat-model-tutorial" name="Threat Model Tutorial" tags="">
  <desc/>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="60"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="AWS EC2 (Elastic Compute Cloud) -&gt; AWS S3 (Simple Storage Service)" ref="3189a244-289d-499f-a52e-1472e43699f3" source="91f5d3be-a2ae-4f36-800f-3300421b63d2" target="67689fb4-f6f9-499f-a75c-76e15fae4d56">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="APT" value=""/>
    <customField ref="Application Details" value=""/>
    <customField ref="Application Downtime Cost" value=""/>
    <customField ref="Application Type" value=""/>
    <customField ref="Apply Standard at all times" value="1"/>
    <customField ref="Contact Email" value=""/>
    <customField ref="Custom Field A" value=""/>
    <customField ref="DEL" value=""/>
    <customField ref="GPS Environment" value="NO"/>
    <customField ref="Hosting Location" value="GCP"/>
    <customField ref="Milestone 1" value=""/>
    <customField ref="Milestone 1 - Deadline" value=""/>
    <customField ref="Milestone 2" value=""/>
    <customField ref="Milestone 2 - Deadline" value=""/>
    <customField ref="Milestone 3" value=""/>
    <customField ref="Milestone 3 - Deadline" value=""/>
    <customField ref="Product Review Session Details" value=""/>
    <customField ref="Project Management Details" value=""/>
    <customField ref="Project Manager" value=""/>
    <customField ref="Project Number" value="_::_"/>
    <customField ref="Project Owner Email" value="jrabe@iriusrisk.com"/>
    <customField ref="Ready for Workflow advancement?" value="NO"/>
    <customField ref="Requirements" value=""/>
    <customField ref="Test Custom" value=""/>
    <customField ref="Third Party Contact" value=""/>
    <customField ref="Third Party Organization" value=""/>
    <customField ref="UPS Template Picker" value="GCP Template"/>
    <customField ref="Use Case" value=""/>
    <customField ref="User Email Field" value=""/>
    <customField ref="VZ - Requirements" value="Type 1||Type 2"/>
  </customFields>
  <components>
    <component uuid="48190899-cf0c-4449-90f4-7f1a0db1e37b" diagramComponentId="ca713c5c-267e-4f06-afff-6d26f1331cb3" ref="32b58c89-07c3-404e-8bf0-b062f4ff7c1f" name="AWS EC2 (Elastic Compute Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="ec2">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.964">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.965">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.965">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.965">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.966">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.767">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.767">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" name="Ensure that the EC2 instances are managed by the systems manager" issueId="" issueLink="" platform="" cost="0" risk="50" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;AWS Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances. Additional configuration is needed in Systems Manager for patch deployment to managed EC2 instances.&lt;/p&gt;&lt;p&gt;If you use EC2 instances managed by Systems Manager to collect inventory for your cardholder data environment (CDE), make sure that the instances are managed by Systems Manager. Using Systems Manager can help to maintain an inventory of system components that are in scope for PCI DSS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For systems that are in scope for PCI DSS, before you install vendor patches in a production environment, you should test and validate them. After you deploy patches, validate security settings and controls to ensure that deployed patches have not affected the security of the CDE. If you use EC2 instances managed by Systems Manager to patch managed instances in your CDE, ensure that the instances are managed by Systems Manager. Systems Manager deploys system patches, which helps to protect system components and software from known vulnerabilities.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You can use the Systems Manager quick setup to set up Systems Manager to manage your EC2 instances.&lt;/p&gt;&lt;p&gt;To determine whether your instances can support Systems Manager associations, see Systems Manager prerequisites in the &lt;i&gt;AWS Systems Manager User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To ensure EC2 instances are managed by Systems Manager&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the AWS Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Quick setup&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the configuration screen, keep the default options.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Set up Systems Manager&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.770">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.765">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.762">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.766">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.762">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.764">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="5.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.763">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-1" name="VPC default security group should prohibit inbound and outbound traffic" issueId="" issueLink="" platform="" cost="0" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;If a service that is in scope for PCI DSS is associated with the default security group, the default rules for the security group will allow all outbound traffic. The rules also allow all inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.&lt;/p&gt;&lt;p&gt;You should change the default security group rules setting to restrict inbound and outbound traffic. Using the default might violate the requirement to allow only necessary traffic to and from the CDE.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, create new security groups and assign those security groups to your resources. To prevent the default security groups from being used, remove their inbound and outbound rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To create new security groups and assign them to your resources&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;. View the default security groups details to see the resources that are assigned to them.&lt;/li&gt;&lt;li&gt;Create a set of least-privilege security groups for the resources. For details on how to create security groups, see Creating a security group in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;On the Amazon EC2 console, change the security group for the resources that use the default security groups to the least-privilege security group you created. See Changing an instance's security groups in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After you assign the new security groups to the resources, remove the inbound and outbound rules from the default security groups. This ensures that the default security groups are not used.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To remove the rules from the default security group&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select a default security group, and choose the &lt;strong&gt;Inbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit inbound rules&lt;/strong&gt;. Then delete all of the inbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;li&gt;Select a default security group and choose the &lt;strong&gt;Outbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit outbound rules&lt;/strong&gt;. Then delete all of the outbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.767">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                <countermeasure ref="aws-tier-6.9" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Mitre" value=""/>
                <customField ref="Records" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="c7c0e695-f51d-40b3-8333-fb2d9bcb389b" diagramComponentId="62c01e75-352a-4241-bca9-1417e068529b" ref="91f5d3be-a2ae-4f36-800f-3300421b63d2" name="AWS EC2 (Elastic Compute Cloud)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="ec2">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.713">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.712">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.713">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.713">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.713">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.714">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.500">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" name="Ensure that the EC2 instances are managed by the systems manager" issueId="" issueLink="" platform="" cost="0" risk="50" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;AWS Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances. Additional configuration is needed in Systems Manager for patch deployment to managed EC2 instances.&lt;/p&gt;&lt;p&gt;If you use EC2 instances managed by Systems Manager to collect inventory for your cardholder data environment (CDE), make sure that the instances are managed by Systems Manager. Using Systems Manager can help to maintain an inventory of system components that are in scope for PCI DSS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For systems that are in scope for PCI DSS, before you install vendor patches in a production environment, you should test and validate them. After you deploy patches, validate security settings and controls to ensure that deployed patches have not affected the security of the CDE. If you use EC2 instances managed by Systems Manager to patch managed instances in your CDE, ensure that the instances are managed by Systems Manager. Systems Manager deploys system patches, which helps to protect system components and software from known vulnerabilities.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You can use the Systems Manager quick setup to set up Systems Manager to manage your EC2 instances.&lt;/p&gt;&lt;p&gt;To determine whether your instances can support Systems Manager associations, see Systems Manager prerequisites in the &lt;i&gt;AWS Systems Manager User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To ensure EC2 instances are managed by Systems Manager&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the AWS Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Quick setup&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the configuration screen, keep the default options.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Set up Systems Manager&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.506">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.499">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.502">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.500">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.500">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.501">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.498">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.499">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.503">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.499">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.500">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="5.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.500">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.499">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="4.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.499">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-1" name="VPC default security group should prohibit inbound and outbound traffic" issueId="" issueLink="" platform="" cost="0" risk="47" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;If a service that is in scope for PCI DSS is associated with the default security group, the default rules for the security group will allow all outbound traffic. The rules also allow all inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.&lt;/p&gt;&lt;p&gt;You should change the default security group rules setting to restrict inbound and outbound traffic. Using the default might violate the requirement to allow only necessary traffic to and from the CDE.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, create new security groups and assign those security groups to your resources. To prevent the default security groups from being used, remove their inbound and outbound rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To create new security groups and assign them to your resources&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;. View the default security groups details to see the resources that are assigned to them.&lt;/li&gt;&lt;li&gt;Create a set of least-privilege security groups for the resources. For details on how to create security groups, see Creating a security group in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;On the Amazon EC2 console, change the security group for the resources that use the default security groups to the least-privilege security group you created. See Changing an instance's security groups in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After you assign the new security groups to the resources, remove the inbound and outbound rules from the default security groups. This ensures that the default security groups are not used.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To remove the rules from the default security group&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select a default security group, and choose the &lt;strong&gt;Inbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit inbound rules&lt;/strong&gt;. Then delete all of the inbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;li&gt;Select a default security group and choose the &lt;strong&gt;Outbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit outbound rules&lt;/strong&gt;. Then delete all of the outbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:46.504">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                <countermeasure ref="aws-tier-6.9" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Mitre" value=""/>
                <customField ref="Records" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="b98a2729-b49b-4739-86d3-913dfcc2b421" diagramComponentId="b09c71b8-1fcc-49c7-a3b5-ad797277adc7" ref="67689fb4-f6f9-499f-a75c-76e15fae4d56" name="AWS S3 (Simple Storage Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="s3">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.322">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.321">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.322">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.322">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.322">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.322">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.008">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.005">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-3" name="Enable cross-region replication on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="45" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Enabling cross-Region replication on S3 buckets ensures that multiple versions of the data are available in different distinct Regions. This allows you to store data at even greater distances, minimize latency, increase operational efficiency, and protect against DDoS and data corruption events.&lt;/p&gt;&lt;p&gt;This is one method used to implement system hardening configuration.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;To enable S3 bucket replication&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon S3 console at https://console.aws.amazon.com/s3/.&lt;/li&gt;&lt;li&gt;Choose the S3 bucket that does not have cross-region replication enabled.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Management&lt;/strong&gt;, then choose &lt;strong&gt;Replication&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Add rule&lt;/strong&gt;. If versioning is not already enabled, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose your source bucket - &lt;strong&gt;Entire bucket&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose your destination bucket. If versioning is not already enabled on the destination bucket for your account, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose an IAM role. For more information on setting up permissions for replication, see the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Enter a rule name, choose &lt;strong&gt;Enabled&lt;/strong&gt; for the status, then choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.008">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.006">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. &lt;/p&gt; 
&lt;p&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. &lt;/p&gt; 
&lt;p&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS-managed keys (SSE-KMS). This provides several advantages: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across all regions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail log files. You can assign permissions for the key to the users in your organization according to your requirements.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must be granted decrypt permission by the CMK policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue disclosure of information and provide an extra layer of security.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; The following example shows how to upload data using AWS KMS Encryption: &lt;br /&gt; aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key &lt;/p&gt; 
</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
            <reference name="Storing and Retrieving a Secret (AWS Tutorial)" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag. 
&lt;/div&gt; 
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups? 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.008">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="50" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="50" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.008">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Required" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.008">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="JamesRabe" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br /&gt; 
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br /&gt; 
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion 
&lt;br /&gt;Remediation 
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled 
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="2.1.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields>
            <customField ref="Compensating Controls" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-12-07T15:46:45.007">
              <output/>
            </source>
            <references/>
            <customFields>
              <customField ref="Documentation Links" value=""/>
            </customFields>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-3" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="AWS-S3-3" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="JamesRabe" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="Attack Complexity" value=""/>
                <customField ref="Attack Vector" value=""/>
                <customField ref="Mitre" value=""/>
                <customField ref="Privileges Required" value=""/>
                <customField ref="Records" value=""/>
                <customField ref="STRIDE" value=""/>
                <customField ref="User Interaction" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
